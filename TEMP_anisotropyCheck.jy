#randomSeed(30)

length = 600000#0

aniso = 0.5
theta = 40
slope = toRadians(theta)

#magSlopes = [10,20,30,40,50,60,70,80,90]
#anisotropyList = [0.1,0.3,0.5,0.7,0.9,1.1,1.5,2.1,2.9,3.9]

magSlopes = linspace(1,90,80)
anisotropyList = logspace(0.1,10,50)
numberIterations = 40


from org.apache.commons.math.optimization.fitting import CurveFitter
from org.apache.commons.math.optimization.fitting import ParametricRealFunction
from org.apache.commons.math.optimization.general import LevenbergMarquardtOptimizer

class LinFit(ParametricRealFunction):
    def value(self, x, params):
        a = params[0]
        b = params[1]
        return (a*x + b)
    def gradient(self, x, params):
        a = params[0]
        b = params[1]
        return [x,1]

#############################
#############################
#############################
#############################

outputMagSlopes              = None
outputAnisotropiesInput      = None
outputAnisotropiesMeasured   = None
chiSquaredMap                   = None
outputMagSlopesMap              = None
outputAnisotropiesInputMap      = None
outputAnisotropiesMeasuredMap   = None

monitor.started()
monitor.setTaskSize(len(magSlopes)*len(anisotropyList)*numberIterations)

counter = 0
for angle in magSlopes:
    slope = toRadians(angle)
    
    for anisotropy in anisotropyList:
        aniso = anisotropy
        
        clusterUncertainty               = None
        temp_outputAnisotropiesMeasured  = None
        iteration = 0
        while iteration < numberIterations:
            monitor.setTaskProgress(counter)
            try:
            
                p1 = randomn(long(rand(1)[0]*1E6),length)
                p2 = randomn(long(rand(1)[0]*1E6),length)*aniso
                
                Nz = cos(slope)
                Nx = sin(slope)
                
                p1p2_hist = histogram2d(p1*cos(slope)-p2*sin(slope),p2*cos(slope)+p1*sin(slope),[70,70],dataset([-5,5]),dataset([-5,5]))\
                
                peaks = None
                peaks1 = None
                peaks2 = None
                for i in xrange(len(p1p2_hist)):
                    temp_slice_peak_dep0 = p1p2_hist[i,:][imax(slice0(p1p2_hist,i))]
                    temp_slice_peak_dep1 = p1p2_hist.property(QDataSet.DEPEND_1)[imax(slice0(p1p2_hist,i))]
                    
                    peaks1 = concatenate(peaks1,temp_slice_peak_dep0)
                    peaks2 = concatenate(peaks2,temp_slice_peak_dep1)
                    
                
                
                        
                inputGuessParams = [0.5,0.5]
                f = LinFit()
                ftr_chi = CurveFitter(LevenbergMarquardtOptimizer())
                peaks1 = normalize(peaks1)
                
                for i in xrange(len(p1p2_hist.property(QDataSet.DEPEND_0))):
                    ftr_chi.addObservedPoint(float(peaks1[i]),float(p1p2_hist.property(QDataSet.DEPEND_0)[i]),float(peaks2[i]))
                    #ftr_chi.addObservedPoint(float(p1p2_hist.property(QDataSet.DEPEND_0)[i]),float(peaks2[i]))#,float(ones(len((peaks1)))[i]))
                    
                result_chi = ftr_chi.fit(f,inputGuessParams)
                   
                
                
                chiline = result_chi[0]
                print 'chiline:',chiline
                #print result_chi[1] 
                
                
                epsilon_chi =  - chiline / ( (chiline*(1 - Nz**2)) + Nz*Nx )
                
                phi = atan(chiline)
                #print 'ecc:',(tan((slope - phi)/slope))
                
                #print '1/epsilon:',1./sqrt(epsilon_chi+1)
                print 'measured_anisotropy:',sqrt(epsilon_chi+1)
                print 'input_anisotropy:',aniso
            except:
                continue
            
            

            outputMagSlopes = concatenate(outputMagSlopes,angle)
            outputAnisotropiesInput = concatenate(outputAnisotropiesInput,aniso)
            outputAnisotropiesMeasured = concatenate(outputAnisotropiesMeasured,sqrt(epsilon_chi+1))
            temp_outputAnisotropiesMeasured = concatenate(temp_outputAnisotropiesMeasured,sqrt(epsilon_chi+1))
            temp_outputAnisotropiesMeasured.putProperty(QDataSet.VALID_MIN,0)
            temp_outputAnisotropiesMeasured.putProperty(QDataSet.VALID_MAX,1E10)
            
            iteration   = iteration+1  
            counter     = counter+1  
            
        r=where(valid(temp_outputAnisotropiesMeasured))
        chiSquared = total((temp_outputAnisotropiesMeasured[r]-aniso)**2/aniso)/numberIterations
        chiSquaredMap = concatenate(chiSquaredMap,chiSquared)
        outputMagSlopesMap = concatenate(outputMagSlopesMap,angle)
        outputAnisotropiesInputMap = concatenate(outputAnisotropiesInputMap,aniso)
    
monitor.finished()

###############################
###############################
###############################

    
    
##setLayoutOverplot(5)
#plot(0,p1p2_hist,colorTable='apl_rainbow_white0',zlog=True,zrange=[1E-2,1E6])
#plot(1,p1p2_hist.property(QDataSet.DEPEND_0),peaks2,renderType='scatter',symbolSize=7,color='black')
#
#line = p1p2_hist.property(QDataSet.DEPEND_0)*tan(slope)
#plot(2,p1p2_hist.property(QDataSet.DEPEND_0),line,color='red',xrange=[-5,5],yrange=[-5,5],xtitle='Vz',ytitle='Vx',lineWidth=4)
#plot(3,p1p2_hist.property(QDataSet.DEPEND_0),p1p2_hist.property(QDataSet.DEPEND_0)*result_chi[0],color='blue',lineWidth=4)

outputAnisotropiesMeasured.putProperty(QDataSet.VALID_MIN,0)
outputAnisotropiesMeasured.putProperty(QDataSet.VALID_MAX,1E10)
plot(outputAnisotropiesMeasured)

#plot(5,outputMagSlopes,outputAnisotropiesMeasured,outputAnisotropiesMeasured/outputAnisotropiesInput)
plot(0,outputMagSlopes,outputAnisotropiesMeasured,renderType='scatter',xlog=False,ylog=True,xrange=[-1,91],yrange=[0.08,11])
plot(1,outputMagSlopesMap,outputAnisotropiesInputMap,chiSquaredMap,renderType='colorScatter',xlog=False,ylog=True,xrange=[-1,91],yrange=[0.08,11])
