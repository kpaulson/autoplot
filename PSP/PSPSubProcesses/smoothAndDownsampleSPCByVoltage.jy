
def smoothAndDownsampleSPCByVoltage(spc_ds,mv_lo,mv_hi,smoothSeconds):
    '''
    Smooth the rank2 SPC data by the mv_lo value (time-varying DEPEND_1 variable)
    rather than just smoothing across indices. Replaces smoothSPCByVoltage() by smoothing
    according to given timerange in seconds rather than arbitrary number of indices
    
    input:
        spc_ds         = rank2 dataset - raw measurements
        mv_lo          = rank2 dataset that acts as spc_ds DEPEND_1 variable - lower bound
        mv_hi          = rank2 dataset that acts as spc_ds DEPEND_1 variable - upper bound
        smoothSeconds  = number of seconds over which to smooth (corresponded to spectra on SPC)
    output:
        spc_ds_smooth_downsampled  = rank2 dataset - smoothed and downsampled to smoothSeconds cadence
        
    TODO: Add sliding window functionality (is it as simple as decimating the downsampling?)
    TODO: Interpolating mv_lo will cause trouble with where() calls, look into discrete integration
              using only values from uniq_mv_lo
    '''
    
    import java
    
    temp_time = spc_ds.property(QDataSet.DEPEND_0)
    temp_time.putProperty(QDataSet.NAME,None)
    minimumCadence = min(diff(temp_time)[where(ne(diff(temp_time),0))])
    
    trs_downsampler= generateTimeRanges('$Y-$m-$d $H:$M:$(S,span=%s)'%smoothSeconds,str(datumRange('%s to %s'%(str(temp_time[0]),str(temp_time[-1])))) )
    
    spc_ds_smooth_downsampled_mean = -1*ones(len(trs_downsampler),len(spc_ds[0,:]))
    spc_ds_smooth_downsampled_median = -1*ones(len(trs_downsampler),len(spc_ds[0,:]))
    spc_ds_smooth_downsampled_mode = -1*ones(len(trs_downsampler),len(spc_ds[0,:]))
    mv_lo_downsampled = -1*ones(len(trs_downsampler),len(spc_ds[0,:]))
    mv_hi_downsampled = -1*ones(len(trs_downsampler),len(spc_ds[0,:]))
    time_downsampled = -1*ones(len(trs_downsampler))
    
    tr_downsampler_index = 0
    for tr_downsampler in trs_downsampler:
        try:
            tr_downsampler_timerange = datumRange( '%s to %s'%(tr_downsampler,datum(tr_downsampler)+datum('%ssec'%smoothSeconds)) )
            
            spc_ds_temp = trim(spc_ds,tr_downsampler_timerange)
            mv_lo_temp = trim(mv_lo,tr_downsampler_timerange)
            mv_hi_temp = trim(mv_hi,tr_downsampler_timerange)
            timestamp = mean(spc_ds_temp.property(QDataSet.DEPEND_0))
            
            mv_lo_range = extent(mv_lo_temp)
            min_mv_lo = mv_lo_range[0]
            max_mv_lo = mv_lo_range[1]
            
            valid_mv_lo = where(valid(mv_lo_temp))
            min_mv_lo_sliceIndex = where(eq(mv_lo_temp,min_mv_lo))
            min_mv_lo_sliceIndex = min_mv_lo_sliceIndex[imin(min_mv_lo_sliceIndex[:,1]),0]
            max_mv_lo_sliceIndex = where(eq(mv_lo_temp,max_mv_lo))
            max_mv_lo_sliceIndex = max_mv_lo_sliceIndex[imax(max_mv_lo_sliceIndex[:,1]),0]
            
            TEMP_mv_lo = concatenate(mv_lo_temp[min_mv_lo_sliceIndex,:],mv_lo_temp[max_mv_lo_sliceIndex,:])
            
            s = sort(TEMP_mv_lo)
            uniq_mv_lo = uniqValues(TEMP_mv_lo,s)
                
            mv_index = 0
            for mv in uniq_mv_lo:
                r = where(eq(mv_lo_temp,mv))
                
                spc_ds_smooth_downsampled_mean[tr_downsampler_index,mv_index] = mean(spc_ds_temp[r])
                spc_ds_smooth_downsampled_median[tr_downsampler_index,mv_index] = median(spc_ds_temp[r])
                spc_ds_smooth_downsampled_mode[tr_downsampler_index,mv_index] = mode(spc_ds_temp[r])
                mv_lo_downsampled[tr_downsampler_index,mv_index] = mv
                mv_hi_downsampled[tr_downsampler_index,mv_index] = median(mv_hi_temp[r])
                
                mv_index += 1
                
            time_downsampled[tr_downsampler_index] = timestamp
        except(java.lang.IndexOutOfBoundsException):
            continue
        tr_downsampler_index += 1
        
    spc_ds_smooth_downsampled_mean.putProperty(QDataSet.DEPEND_0,time_downsampled)
    spc_ds_smooth_downsampled_mean.putProperty(QDataSet.DEPEND_1,mv_lo_downsampled)
    spc_ds_smooth_downsampled_median.putProperty(QDataSet.DEPEND_0,time_downsampled)
    spc_ds_smooth_downsampled_median.putProperty(QDataSet.DEPEND_1,mv_lo_downsampled)
    spc_ds_smooth_downsampled_mode.putProperty(QDataSet.DEPEND_0,time_downsampled)
    spc_ds_smooth_downsampled_mode.putProperty(QDataSet.DEPEND_1,mv_lo_downsampled)
  
    spc_ds_smooth_downsampled_mean.putProperty(QDataSet.VALID_MIN,0)
    spc_ds_smooth_downsampled_median.putProperty(QDataSet.VALID_MIN,0)
    spc_ds_smooth_downsampled_mode.putProperty(QDataSet.VALID_MIN,0)
    
    return(spc_ds_smooth_downsampled_mean, spc_ds_smooth_downsampled_median, spc_ds_smooth_downsampled_mode, mv_lo_downsampled, mv_hi_downsampled)