#############################
#    SCRIPT FOR READYING    #
#       PSP DATA FOR        #
#     DEHOFFMAN-TELLER      #
#    AND GRAD-SHAFRANOV     #
#############################


# Variable timestamp input
#timerange = getParam('timerange','2018-11-11 12:00 to 2018-11-12 12:00','Timerange of PSP Data')
timerange = getParam('timerange','2020-06-12 to 2020-06-14','Timerange of PSP Data')
dd = timerange[0:10]

downsampleSeconds = getParam('downsampleSeconds',10.,'Number of seconds in new time cadence for desired output dataset (linear interpolation)')
#downsamplePoints = getParam('downsamplePoints',100,'Number opf points over which to smooth and downsample mag data')

write_output = getParam('writeOutput','T','Do you want to write the current setup to the GS directory?',['T','F']) 

#Full cadence magnetic field:
#B_input = getDataSet('http://sweap.cfa.harvard.edu/data/sci/mag/l2_draft/$Y/$m/psp_fld_l2_mag_$Y$m$d_v$v.cdf?psp_fld_mag_rtn',timerange)
mag_L2_file_berkeley = 'http://research.ssl.berkeley.edu/data/psp/data/sci/fields/l2/mag_RTN/$Y/$m/psp_fld_l2_mag_RTN_$Y$m$d$(H,span=6)_v$v.cdf'
mag_L2_file_berkeley = 'http://research.ssl.berkeley.edu/data/spp/data/sci/fields/staging/l2/mag_RTN/$Y/$m/psp_fld_l2_mag_RTN_$Y$m$d$(H,span=6)_v$v.cdf'
B_input = getDataSet(mag_L2_file_berkeley+'?psp_fld_l2_mag_RTN',timerange) 

#B_input = smooth(B_input,downsamplePoints)[::downsamplePoints,:]
B_mag = magnitude(B_input)
time = B_mag.property(QDataSet.DEPEND_0)

newTime = timegen(str(datumRange(timerange).min()),str(downsampleSeconds*1E6)+' microseconds',int(convertUnitsTo((datumRange(timerange).max()-datumRange(timerange).min()),Units.seconds)/putProperty(dataset(downsampleSeconds),QDataSet.UNITS,Units.seconds)) )

magTime_to_newTime_ratio = findex(time,newTime)
B_mag = interpolate(B_mag,magTime_to_newTime_ratio)
Bx = interpolate(B_input[:,0],magTime_to_newTime_ratio)
By = interpolate(B_input[:,1],magTime_to_newTime_ratio)
Bz = interpolate(B_input[:,2],magTime_to_newTime_ratio)
#print out
#stop

B_mag.putProperty(QDataSet.LABEL,'Bmag')
B_input = bundle(B_mag,Bx,By,Bz)
B_input.putProperty(QDataSet.DEPEND_0,newTime)

#V_input = getDataSet('http://sweap.cfa.harvard.edu/data/sci/spc/L3/$Y/$m/spp_swp_spc_l3i_$Y$m$d_v$v.cdf?vp_moment_RTN',timerange)
spc_L3_file_cfa = 'http://w3sweap.cfa.harvard.edu/data/sci/sweap/spc/L3/$Y/$m/spp_swp_spc_l3i_$Y$m$d_v$v.cdf'
V_input = getDataSet(spc_L3_file_cfa+'?vp_moment_RTN',timerange)
swe_time = V_input.property(QDataSet.DEPEND_0)

Vx = unbundle(V_input,0)#[r][s]
Vy = unbundle(V_input,1)#[r][s]
Vz = unbundle(V_input,2)#[r][s]

def fillInGaps(element):
    #element.putProperty(QDataSet.VALID_MIN,-1E6)
    #element.putProperty(QDataSet.VALID_MAX, 1E6)
    element_time = element[where( valid(element).eq(1) )].property(QDataSet.DEPEND_0)
    TEMP_ratio = findex(element_time,swe_time)
    TEMP_element = interpolate(element[where( valid(element).eq(1) )],TEMP_ratio)
    return(TEMP_element)

#pos_input = getDataSet('http://sweap.cfa.harvard.edu/data/sci/spc/L3/$Y/$m/spp_swp_spc_l3i_$Y$m$d_v$v.cdf?sc_pos_HCI',timerange)
pos_input = getDataSet(spc_L3_file_cfa+'?sc_pos_HCI',timerange)
pos_x = unbundle(pos_input,0)#[r][s]
pos_y = unbundle(pos_input,1)#[r][s]
pos_z = unbundle(pos_input,2)#[r][s]

#density_input = getDataSet('http://sweap.cfa.harvard.edu/data/sci/spc/L3/$Y/$m/spp_swp_spc_l3i_$Y$m$d_v$v.cdf?np_moment',timerange)
density_input = getDataSet(spc_L3_file_cfa+'?np_moment',timerange)

#wp_moment = getDataSet('http://sweap.cfa.harvard.edu/data/sci/spc/L3/$Y/$m/spp_swp_spc_l3i_$Y$m$d_v$v.cdf?wp_moment',timerange)
wp_moment = getDataSet(spc_L3_file_cfa+'?wp_moment',timerange)
temp_input = (wp_moment*(9.79E0))**2   # Convert thermal speed to eV (from NRL formulary)
temp_input.putProperty(QDataSet.LABEL,'Tp_moment (eV)')

#def filterAndUpscale(element,faster_ds):
#    ''' Runs a median filter throwing out single points more than 3 standard deviations from the mean of the 2 surrounding data points. Then, interpolates up to faster_ds time cadence'''
##for element in [Vx,Vy,Vz,pos_x,pos_y,pos_z,density_input,temp_input] :
#
#    element_filter = medianFilter(element[where(valid(element).eq(1))],3)
#    r = where( abs(element[where(valid(element).eq(1))]-element_filter).ge(3*stddev(element[where(valid(element).eq(1))])) )
#    mask = ones(len(element[where(valid(element).eq(1))]))
#    mask[r] = -1E31
#    element[where(valid(element).eq(1))] = element[where(valid(element).eq(1))]*mask
#
#    element.putProperty(QDataSet.VALID_MIN,-1E10)
#    element.putProperty(QDataSet.VALID_MAX, 1E10)
#    element = synchronize(faster_ds,element[where( valid(element).eq(1) )])
#    element_time = element[where( valid(element).eq(1) )].property(QDataSet.DEPEND_0)
#    TEMP_ratio = findex(element_time,time)
#    TEMP_element = interpolate(element[where( valid(element).eq(1) )],TEMP_ratio)
#    return(TEMP_element)
    
def filterAndUpscale(element,faster_ds):
    ''' Runs a median filter throwing out single points more than 3 standard deviations from 
    the mean of the 2 surrounding data points. Then, interpolates up to faster_ds time cadence'''
#for element in [Vx,Vy,Vz,pos_x,pos_y,pos_z,density_input,temp_input] :
    
    element_filter = medianFilter(element[where(valid(element).eq(1))],3)
    r = where( abs(element[where(valid(element).eq(1))]-element_filter).ge(3*stddev(element[where(valid(element).eq(1))])) )
    mask = ones(len(element[where(valid(element).eq(1))]))
    mask[r] = -1E31
    element[where(valid(copy(element)).eq(1))] = copy(element[where(valid(copy(element)).eq(1))])*mask
    
    element.putProperty(QDataSet.VALID_MIN,-1E10) # Sets valid limits on element
    element.putProperty(QDataSet.VALID_MAX, 1E10)
    element = copy(element[where( valid(element).eq(1) )]) # Removes invalid outliers
    #element = synchronize( faster_ds , element ) # Interpolates element up to higher cadence SOMETHING IS BROKEN HERE
    element_time = element[where( valid(element).eq(1) )].property(QDataSet.DEPEND_0) 
    time = faster_ds.property(QDataSet.DEPEND_0)
    TEMP_ratio = findex(element_time,time)
    TEMP_element = interpolate(element[where( valid(element).eq(1) )],TEMP_ratio)
    return(TEMP_element)
  
plasma_velocity_x = filterAndUpscale(Vx,B_input)
plasma_velocity_y = filterAndUpscale(Vy,B_input)
plasma_velocity_z = filterAndUpscale(Vz,B_input)

pos_x = filterAndUpscale(pos_x,B_input)
pos_y = filterAndUpscale(pos_y,B_input)
pos_z = filterAndUpscale(pos_z,B_input)

density_upsampled = filterAndUpscale(density_input,B_input)
temp_upsampled = filterAndUpscale(temp_input,B_input)


# Rename data variables, reassign fill values

last = TimeUtil.now()


r = where( valid(B_input[:,1]).eq(0) )
temp_Bx = copy(B_input[:,1])
temp_Bx[r] = -9999.999

r = where( valid(B_input[:,2]).eq(0) )
temp_By = copy(B_input[:,2])
temp_By[r] = -9999.999

r = where( valid(B_input[:,3]).eq(0) )
temp_Bz = copy(B_input[:,3])
temp_Bz[r] = -9999.999

r = where( valid(B_input[:,0]).eq(0) )
temp_Btot = copy(B_input[:,0])
temp_Btot[r] = -9999.999

fgm = bundle(temp_Bx,temp_By,temp_Bz,temp_Btot)

r = where( valid(plasma_velocity_x).eq(0) )
plasma_velocity_x[r] = -9999.999
r = where( valid(plasma_velocity_y).eq(0) )
plasma_velocity_y[r] = -9999.999
r = where( valid(plasma_velocity_z).eq(0) )
plasma_velocity_z[r] = -9999.999

r = where( valid(pos_x).eq(0) )
pos_x[r] = -9999.999
r = where( valid(pos_y).eq(0) )
pos_y[r] = -9999.999
r = where( valid(pos_z).eq(0) )
pos_z[r] = -9999.999

r = where( valid(density_upsampled).eq(0) )
density_upsampled[r] = -9999.999

r = where( valid(temp_upsampled).eq(0) )
temp_upsampled[r] = -9999.999
        
print 'To reset fill values took:',TimeUtil.now()-last
last = TimeUtil.now()

plot(0, newTime, fgm)
plot(1, newTime, bundle(plasma_velocity_x, plasma_velocity_y, plasma_velocity_z))
plot(2, newTime, density_upsampled)
plot(3, newTime, temp_upsampled)

if write_output=='T':
    
        output = None        
        output = bundle(output,pos_x,pos_y,pos_z)
        output = bundle(output,fgm[:,3])
        output = bundle(output,fgm[:,0],fgm[:,1],fgm[:,2])
        output = bundle(output,density_upsampled,temp_upsampled)
        output = bundle(output,plasma_velocity_x,plasma_velocity_y,plasma_velocity_z)
        
        output.putProperty(QDataSet.DEPEND_0,newTime)
        print 'To bundle everything took:',TimeUtil.now()-last
        last = TimeUtil.now()
        #stop
        
        # ###
        # ### WRITE DAILY FILE
        # ###
        
        sc = 'PSP'
        psp_data_directory = 'C:/Users/kpaulson/GoogleDrive/Research/GradShafranovReconstruction/gs_code_v1_windows/PSPDATA/merged_mag_plasma/'
        #'D:/Research/Solar Wind Projects/2012 Hu Reconstruction Codes/gs_code_v1_windows/PSPDATA/merged_mag_plasma/'
        psp_data_file = '%s_%s_merged.txt'%(sc,dd)
        
        formatDataSet(output,psp_data_directory+psp_data_file+'?format=9.4f&tformat=milliseconds')
        print 'Written to:',psp_data_directory+psp_data_file
