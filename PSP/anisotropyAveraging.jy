################################
#                              #
#     Anisotropy Averaging     #
#                              #
#       Kristoff Paulson       #
#                              #
################################

'''This code combines the two independent measurements of the anisotropy from the anisotropyFromMath.jy
   script into a single variable. This is done through a weighted average where the weights are given by
   the systematic error values determined via anisotropyCheck.jy.
   Further fitting errors are propagated through to the final product
   
   input:
       L0 cdf created by anisotropyFromMath.jy
   output:
       L1 cdf containing the variables:
           N_xyz,                                        Unit vector of background magnetic field direction in spacecraft coordinates
           Bmag,                                         Total magnetic field strength
           average_anisotropy,                           Combined anisotropy product
           average_anisotropy_uncertainty_deltaPlus,     Upper uncertainty range of average_anisotropy
           average_anisotropy_uncertainty_deltaMinus,    Lower uncertainty range of average_anisotropy
           beta_SI,                                      Plasma Beta
           beta_parallel_SI,                             Parallel plasma Beta
           beta_perp_SI,                                 Perpendicular plasma Beta

'''




########################

def getTrimDataSet(ds_string,ds_timerange):
    ds = getDataSet(ds_string,ds_timerange)
    ds = trim(ds,ds_timerange)
    
    return(ds)

########################

import sys

tr = getParam('timerange','2019-08-26','Timerange over which to generate combined anisotropy measurement')
version_L0 = '0.4.4'
version_L1 = '1.1.4'

writeStuff = getParam('writeFiles','F','Write out the L1 files with this version of the code?',['T','F'])
if writeStuff == 'T':
    writeStuff = True
elif writeStuff == 'F':
    writeStuff = False
    
angleBinWdith = getParam('angleBinWidth',4,'width of bins of incident magnetic field angle in uncertainty maps')
anisotropyBinNumber = getParam('anisotropyBins',40,'Number of bins in anisotropy axis')

analyzingTimeWidthComparisons = False   
fitSeconds = getParam('fitSeconds',1,'Width of time used to fit data for anisotropy (this should only be used in the time comparison results)')

# SI
k    = 1.3807E-23
mu_0 = PI*4E-7
mp   = 1.6726E-27

#######################

try:
    ### IMPORT SUBPROCESSES
    get_OS_version = getFile( 'https://github.com/kpaulson/autoplot/blob/master/CoreSubprocesses/get_os_version.jy',monitor.getSubtaskMonitor('import get_os_version()'))
    execfile( get_OS_version.toString() )
    
    getSPCAnisotropyUncertaintyMaps = getFile( 'https://github.com/kpaulson/autoplot/blob/master/PSPSubProcesses/getSPCAnisotropyUncertaintyMaps.jy',monitor.getSubtaskMonitor('import getSPCAnisotropyUncertaintyMaps()'))
    execfile( getSPCAnisotropyUncertaintyMaps.toString() )
except:
    print 'Unable to grab scripts from github'
    def get_os_version():
        '''
        Basic subprocess that should print out the operating system version. Mostly helpful
        for scripts looking for files in a different directory structure on windows vs mac.
        Easiest application:
            print get_os_version().split()[0]
        '''
        import sys
        ver = sys.platform.lower()
        if ver.startswith('java'):
            import java.lang
            ver = java.lang.System.getProperty("os.name").lower()
        return ver
        
    def getSPCAnisotropyUncertaintyMaps(angleBinWdith,anisotropyBinNumber,OS):
        '''
        Subprocess that grabs the pre-generated uncertaintyMap file and creates a rebinned 
        array. This is used by several SPC anisotropy scripts to define instrumental error
        if each measurement based on the observed anisotropy and incident Bfield angle.
        
        The error is calculated numerically, so too fine of a chosen resolution will result
        in empty bins queried
        
        input:
            angleBinWdith        = resolution of incident magnetic field angle bin in degrees
            anisotropyBinNumber  = number of bins in logarithmic anisotropy space between 1E-1 and 1E1
        output:
            deltaPlus   = rank2 array of binned values of upper bounds of probable anisotropy
            deltaMinus  = rank2 array of binned values of lower bounds of probable anisotropy
        '''
        
        if OS == 'mac':
            UncertaintyMapFile = '/home/kpaulson/Google Drive File Stream/My Drive/Research/PSP/SPC/SPC_Anisotropy/Anisotropy_Files/UncertaintyMaps/Anisotropy_DELTA_PLUS-MINUS.cdf'
        elif OS == 'windows':
            UncertaintyMapFile = 'file:///C:/Users/kpaulson/GoogleDrive/Research/PSP/SPC/SPC_Anisotropy/Anisotropy_Files/UncertaintyMaps/Anisotropy_DELTA_PLUS-MINUS.cdf'
        
        anisotropy_deltaPlus = getDataSet(UncertaintyMapFile+'?Anisotropy DELTA_PLUS')
        anisotropy_deltaMinus = getDataSet(UncertaintyMapFile+'?Anisotropy DELTA_MINUS')
    
        deltaPlus      = anisotropy_deltaPlus[:,2]
        deltaPlus_dep0 = anisotropy_deltaPlus[:,0]
        deltaPlus_dep1 = anisotropy_deltaPlus[:,1]
    
        deltaMinus      = anisotropy_deltaMinus[:,2]
        deltaMinus_dep0 = anisotropy_deltaMinus[:,0]
        deltaMinus_dep1 = anisotropy_deltaMinus[:,1]
    
        deltaPlus.putProperty(QDataSet.VALID_MIN,0)
        deltaPlus.putProperty(QDataSet.VALID_MAX,1E10)
        deltaPlus.putProperty(QDataSet.NAME,'DELTA_PLUS')
        deltaPlus_dep0.putProperty(QDataSet.NAME,'Incident Mag Angle')
        deltaPlus_dep1.putProperty(QDataSet.NAME,'Anisotropy')
        deltaMinus.putProperty(QDataSet.VALID_MIN,0)
        deltaMinus.putProperty(QDataSet.VALID_MAX,1E10)
        deltaMinus.putProperty(QDataSet.NAME,'DELTA_MINUS')
        deltaMinus_dep0.putProperty(QDataSet.NAME,'Incident Mag Angle')
        deltaMinus_dep1.putProperty(QDataSet.NAME,'Anisotropy')
    
        deltaPlusLink  = link(deltaPlus_dep0,deltaPlus_dep1,deltaPlus)
        deltaMinusLink = link(deltaMinus_dep0,deltaMinus_dep1,deltaMinus)
        deltaPlusLink.putProperty( QDataSet.NAME,'Anisotropy_DELTA_PLUS')
        deltaMinusLink.putProperty(QDataSet.NAME,'Anisotropy_DELTA_MINUS')
    
        # This commented section is left over from plotting the results as a spectrogram before the rebinning was fixed
        #plot(0,link(deltaPlus_dep0,deltaPlus_dep1,deltaPlus),renderType='spectrogram',colorTable='apl_rainbow_white0',ytitle='Anisotropy DELTA_PLUS',yrange=[anisotropyMin,anisotropyMax],ylog=True,zrange=[1E-4,1E1],zlog=True)
        #plot(1,link(deltaMinus_dep0,deltaMinus_dep1,deltaMinus),xtitle='Incident MAG Angle',renderType='spectrogram',colorTable='apl_rainbow_white0',ytitle='Anisotropy DELTA_MINUS',yrange=[anisotropyMin,anisotropyMax],ylog=True,zrange=[1E-4,1E1],zlog=True)
    
        angleMin = -90
        angleMax = 90
        angleBinNumber = int((angleMax-angleMin)/angleBinWdith)     # Number of bins in incident mag angle space
        
        anisotropyMin = 0.03
        anisotropyMax = 15
        #anisotropyBinNumber = 50  # Number of bins in anisotropy space
        
        magSlopes = linspace(angleMin,angleMax,angleBinNumber)
        anisotropyList = logspace(anisotropyMin,anisotropyMax,anisotropyBinNumber)
    
        deltaPlusRebin  = rebin(deltaPlusLink,magSlopes,anisotropyList)
        deltaMinusRebin = rebin(deltaMinusLink,magSlopes,anisotropyList)
    
        deltaPlusRebin.putProperty( QDataSet.NAME,'DELTA_PLUS_UncertaintyMap')
        deltaMinusRebin.putProperty(QDataSet.NAME,'DELTA_MINUS_UncertaintyMap')
        
        #plot(deltaPlusRebin)
        #plot(1,deltaMinusRebin)
        return(deltaPlusRebin,deltaMinusRebin)

OS = get_os_version().split()[0]

if OS == 'mac':
    googleDrive_directory = 'file:/home/kpaulson/Google Drive File Stream/My Drive/'
elif OS == 'windows':
    googleDrive_directory = 'file:/C:/Users/kpaulson/GoogleDrive/'

filename = googleDrive_directory+'Research/PSP/SPC/SPC_Anisotropy/Anisotropy_Files/L0/v%s/SPC_Anisotropy_$Y-$m-$d_v%s.cdf'%(version_L0,version_L0)


if analyzingTimeWidthComparisons == True:
    filename = googleDrive_directory+'Research/PSP/SPC/SPC_Anisotropy/Anisotropy_Files/TEMP/L0/v%s/SPC_Anisotropy_$Y-$m-$d_v%s_%ssec.cdf'%(version_L0,version_L0,fitSeconds)

chi = getDataSet(filename+'?Anisotropy_chi',tr)
chi_plus = getDataSet(filename+'?anisotropy_chi_deltaPlus',tr)
chi_minus = getDataSet(filename+'?anisotropy_chi_deltaMinus',tr)
psi = getDataSet(filename+'?Anisotropy_psi',tr)
psi_plus = getDataSet(filename+'?anisotropy_psi_deltaPlus',tr)
psi_minus = getDataSet(filename+'?anisotropy_psi_deltaMinus',tr)
ChiSquared_chi = getDataSet(filename+'?ChiSquared_chi',tr)
ChiSquared_psi = getDataSet(filename+'?ChiSquared_psi',tr)
rSquared_chi = getDataSet(filename+'?rSquared_chi',tr)
rSquared_psi = getDataSet(filename+'?rSquared_psi',tr)
slopeError_chi = getDataSet(filename+'?slopeError_chi',tr)
slopeError_psi = getDataSet(filename+'?slopeError_psi',tr)

epoch = getDataSet(filename+'?Epoch',tr)

chi_plus.putProperty(QDataSet.VALID_MIN,0)
chi_plus.putProperty(QDataSet.VALID_MAX,1E10)
psi_plus.putProperty(QDataSet.VALID_MIN,0)
psi_plus.putProperty(QDataSet.VALID_MAX,1E10)
chi_minus.putProperty(QDataSet.VALID_MIN,0)
chi_minus.putProperty(QDataSet.VALID_MAX,1E10)
psi_minus.putProperty(QDataSet.VALID_MIN,0)
psi_minus.putProperty(QDataSet.VALID_MAX,1E10)
#chi            = getTrimDataSet(filename+'?Anisotropy_chi',tr)
#chi_plus       = getTrimDataSet(filename+'?anisotropy_chi_deltaPlus',tr)
#chi_minus      = getTrimDataSet(filename+'?anisotropy_chi_deltaMinus',tr)
#ChiSquared_chi = getTrimDataSet(filename+'?ChiSquared_chi',tr)
#psi            = getTrimDataSet(filename+'?Anisotropy_psi',tr)
#psi_plus       = getTrimDataSet(filename+'?anisotropy_psi_deltaPlus',tr)
#psi_minus      = getTrimDataSet(filename+'?anisotropy_psi_deltaMinus',tr)
#ChiSquared_psi = getTrimDataSet(filename+'?ChiSquared_psi',tr)
#
#epoch          = getTrimDataSet(filename+'?Epoch',tr)


#chi.putProperty(QDataSet.DELTA_PLUS,chi_plus+ChiSquared_chi)
#chi.putProperty(QDataSet.DELTA_MINUS,chi_minus+ChiSquared_chi)
#psi.putProperty(QDataSet.DELTA_PLUS,psi_plus+ChiSquared_psi)
#psi.putProperty(QDataSet.DELTA_MINUS,psi_minus+ChiSquared_psi)
chi.putProperty(QDataSet.DELTA_PLUS,chi_plus)
chi.putProperty(QDataSet.DELTA_MINUS,chi_minus)
psi.putProperty(QDataSet.DELTA_PLUS,psi_plus)
psi.putProperty(QDataSet.DELTA_MINUS,psi_minus)


# Recalculate deltaPlus and deltaMinus values since I screwed it up before and it doesn't take long
                               
#####
##########
#################

# This is the old system to pull the uncertainty maps, the new one-liner below imports the pull script from github and loads up a custom array
#if OS == 'mac':
#    anisotropy_deltaPlusMinusFile = 'file:/home/kpaulson/Research/PSP/SPC/SPC Anisotropy/TEMP_Anisotropy_DELTA_PLUS-MINUS copy.cdf'
#    anisotropy_deltaPlusMinusFile = 'file:/home/kpaulson/Google Drive File Stream/My Drive/Research/PSP/SPC/SPC_Anisotropy/Anisotropy_Files/UncertaintyMaps/Anisotropy_DELTA_PLUS-MINUS.cdf'
#
#    anisotropy_deltaPlus = getDataSet(anisotropy_deltaPlusMinusFile+'?UncertaintyMap DELTA_PLUS')
#    anisotropy_deltaMinus = getDataSet(anisotropy_deltaPlusMinusFile+'?UncertaintyMap DELTA_MINUS')
#elif OS == 'windows':
#    anisotropy_deltaPlusMinusFile = 'file:/C:/Users/kpaulson/GoogleDrive/Research/PSP/SPC/SPC_Anisotropy/Anisotropy_Files/UncertaintyMaps/Anisotropy_DELTA_PLUS-MINUS.cdf'
#
#    anisotropy_deltaPlus = getDataSet(anisotropy_deltaPlusMinusFile+'?UncertaintyMap DELTA_PLUS')
#    anisotropy_deltaMinus = getDataSet(anisotropy_deltaPlusMinusFile+'?UncertaintyMap DELTA_MINUS')

(anisotropy_deltaPlus,anisotropy_deltaMinus) = getSPCAnisotropyUncertaintyMaps(angleBinWdith,anisotropyBinNumber,OS)
 
#plot(6,anisotropy_deltaPlus)
anisotropy_deltaPlus.putProperty(QDataSet.VALID_MIN,0)
anisotropy_deltaPlus.putProperty(QDataSet.VALID_MAX,1E10)
anisotropy_deltaMinus.putProperty(QDataSet.VALID_MIN,0)
anisotropy_deltaMinus.putProperty(QDataSet.VALID_MAX,1E10)
#################
##########
#####

B_hat = getDataSet(filename+'?B_hat',tr)#print filename
Nx = B_hat[:,0]
Ny = B_hat[:,1]
Nz = B_hat[:,2]

epsilonEpoch = epoch
anisotropy_chi = chi
anisotropy_psi = psi
        
anisotropy_chi_deltaPlus  = dblarr(len(epsilonEpoch))
anisotropy_chi_deltaMinus = dblarr(len(epsilonEpoch))
anisotropy_psi_deltaPlus  = dblarr(len(epsilonEpoch))
anisotropy_psi_deltaMinus = dblarr(len(epsilonEpoch))
for i in xrange(len(epsilonEpoch)):
    # The asin() is wrong, since I don't want the total orthogonality angle, just the angle between (Nx,Ny) and Nz
    #mappedAngleIndex_chi = imin(abs(toDegrees(asin(Nx[i]))-anisotropy_deltaPlus.property(QDataSet.DEPEND_0))) 
    #mappedAngleIndex_psi = imin(abs(toDegrees(asin(Ny[i]))-anisotropy_deltaPlus.property(QDataSet.DEPEND_0))) 
    
    # This atan() sould account for the above issue
    mappedAngleIndex_chi = imin(abs(toDegrees(atan(Nx[i]/Nz[i]))-anisotropy_deltaPlus.property(QDataSet.DEPEND_0))) 
    mappedAngleIndex_psi = imin(abs(toDegrees(atan(Ny[i]/Nz[i]))-anisotropy_deltaPlus.property(QDataSet.DEPEND_0))) 
    
    mappedAnisotropyIndex_chi = imin(abs(anisotropy_chi[i]-anisotropy_deltaPlus.property(QDataSet.DEPEND_1))) 
    mappedAnisotropyIndex_psi = imin(abs(anisotropy_psi[i]-anisotropy_deltaPlus.property(QDataSet.DEPEND_1))) 
    
    if mappedAngleIndex_chi != -1 and mappedAnisotropyIndex_chi != -1 :
        anisotropy_chi_deltaPlus[i]  = anisotropy_deltaPlus[ mappedAngleIndex_chi,mappedAnisotropyIndex_chi]
        anisotropy_chi_deltaMinus[i] = anisotropy_deltaMinus[mappedAngleIndex_chi,mappedAnisotropyIndex_chi]
    else:
        anisotropy_chi_deltaPlus[i]  = -1
        anisotropy_chi_deltaMinus[i] = -1
        
    if mappedAngleIndex_psi != -1 and mappedAnisotropyIndex_psi != -1 :
        anisotropy_psi_deltaPlus[i]  = anisotropy_deltaPlus[ mappedAngleIndex_psi,mappedAnisotropyIndex_psi]
        anisotropy_psi_deltaMinus[i] = anisotropy_deltaMinus[mappedAngleIndex_psi,mappedAnisotropyIndex_psi]
    else:
        anisotropy_psi_deltaPlus[i]  = -1
        anisotropy_psi_deltaMinus[i] = -1

chi.putProperty(QDataSet.DELTA_PLUS,anisotropy_chi_deltaPlus)
chi.putProperty(QDataSet.DELTA_MINUS,anisotropy_chi_deltaMinus)
psi.putProperty(QDataSet.DELTA_PLUS,anisotropy_psi_deltaPlus)
psi.putProperty(QDataSet.DELTA_MINUS,anisotropy_psi_deltaMinus)

chi_plus = anisotropy_chi_deltaPlus
chi_minus = anisotropy_chi_deltaMinus
psi_plus = anisotropy_psi_deltaPlus
psi_minus = anisotropy_psi_deltaMinus

############################
############################


##### Calculate total uncertainty for each measurement
# This version used the rSquared value, but that uncertainty will decrease for higher slopes, preferentially choosing high anisotropies.
#chi_deltaMagnitude = sqrt(chi_plus**2 + chi_minus**2) * (1./rSquared_chi)
#psi_deltaMagnitude = sqrt(psi_plus**2 + psi_minus**2) * (1./rSquared_psi)
# This version used the ChiSquared value
#chi_deltaMagnitude = sqrt(chi_plus**2 + chi_minus**2) * (ChiSquared_chi)
#psi_deltaMagnitude = sqrt(psi_plus**2 + psi_minus**2) * (ChiSquared_psi)
# Maybe I shouldn't be using that, and instead should keep the ChiSquared separate just to weight the result....
#chi_deltaMagnitude = sqrt(chi_plus**2 + chi_minus**2)
#psi_deltaMagnitude = sqrt(psi_plus**2 + psi_minus**2)
# Or now that I have a "slopeError", I should tack that on to the instrumental error added in quadrature (since they are independent)
chi_deltaMagnitude = sqrt(chi_plus**2 + chi_minus**2 + slopeError_chi**2)
psi_deltaMagnitude = sqrt(psi_plus**2 + psi_minus**2 + slopeError_psi**2)

#plot(0,chi_plus)
#plot(1,chi_deltaMagnitude)
#stop

combined_delta_magnitude = sqrt(chi_deltaMagnitude**2 + psi_deltaMagnitude**2)

#Theses should be good weights that normalize the two measurements' errors against each other
inverse_normalized_chi_delta = 1./( chi_deltaMagnitude / combined_delta_magnitude )
inverse_normalized_psi_delta = 1./( psi_deltaMagnitude / combined_delta_magnitude )


#inverse_chi_delta =  1./( chi_deltaMagnitude )
#inverse_psi_delta =  1./( psi_deltaMagnitude )
#inverse_normalized_chi_delta = sqrt(combined_delta_magnitude**2 + ChiSquared_chi**2 + ChiSquared_psi**2 ) * 1./( chi_deltaMagnitude )
#inverse_normalized_psi_delta = sqrt(combined_delta_magnitude**2 + ChiSquared_chi**2 + ChiSquared_psi**2 ) * 1./( psi_deltaMagnitude )

#plot(2,inverse_normalized_psi_delta)


# This is the original merging of the datasets, but it throws out values where either dataset is fill
#average_anisotropy = (inverse_normalized_chi_delta*chi + inverse_normalized_psi_delta*psi) / (inverse_normalized_chi_delta + inverse_normalized_psi_delta)
#average_anisotropy_uncertainty = 2*((inverse_normalized_chi_delta+inverse_normalized_psi_delta)**-2)
#average_anisotropy.putProperty(QDataSet.DELTA_PLUS,average_anisotropy_uncertainty)
#average_anisotropy.putProperty(QDataSet.DELTA_MINUS,average_anisotropy_uncertainty)

# This performs the original merging above, and also uses the single measurements when the other is bad data (fill)
average_anisotropy = ones(len(epoch))*-1E36
average_anisotropy_uncertainty = dblarr(len(epoch))
average_anisotropy_uncertainty_deltaPlus = dblarr(len(epoch))
average_anisotropy_uncertainty_deltaMinus = dblarr(len(epoch))

chiValidOnly = where(valid(chi).and(eq(valid(psi),0)))
psiValidOnly = where(valid(psi).and(eq(valid(chi),0)))
bothValid = where(valid(chi).and(valid(psi)))



weight_chi = inverse_normalized_chi_delta
weight_psi = inverse_normalized_chi_delta

average_anisotropy[bothValid] = (weight_chi[bothValid]*chi[bothValid] + weight_psi[bothValid]*psi[bothValid]) / (weight_chi[bothValid] + weight_psi[bothValid])
#average_anisotropy[bothValid] = (inverse_normalized_chi_delta[bothValid]*chi[bothValid] + inverse_normalized_psi_delta[bothValid]*psi[bothValid]) / (inverse_normalized_chi_delta[bothValid] + inverse_normalized_psi_delta[bothValid])
average_anisotropy[chiValidOnly] = chi[chiValidOnly]
average_anisotropy[psiValidOnly] = psi[psiValidOnly]

# methodUncertainty is my name for the uncertainty due to the method itself regardless of the data we have
combined_methodUncertainty = sqrt((chi_deltaMagnitude[bothValid]**2+psi_deltaMagnitude[bothValid]**2))/(2)
combined_methodUncertainty_deltaPlus  = sqrt((chi_plus[bothValid]**2 +psi_plus[bothValid]**2))/(2)
combined_methodUncertainty_deltaMinus = sqrt((chi_minus[bothValid]**2+psi_minus[bothValid]**2))/(2)

# This takes the uncertainty due to the difference between chi and psi as a chi-squared error, I don't think this is correct
#average_anisotropy_uncertainty[bothValid] = 2*((inverse_normalized_chi_delta[bothValid]+inverse_normalized_psi_delta[bothValid])**-2) + ( ((chi[bothValid]-average_anisotropy[bothValid])**2/average_anisotropy[bothValid]) + ((psi[bothValid]-average_anisotropy[bothValid])**2/average_anisotropy[bothValid]) )/2.
average_anisotropy_uncertainty[bothValid] = combined_methodUncertainty + ( ((chi[bothValid]-average_anisotropy[bothValid])**2/average_anisotropy[bothValid]) + ((psi[bothValid]-average_anisotropy[bothValid])**2/average_anisotropy[bothValid]) )/2.
average_anisotropy_uncertainty_deltaPlus[bothValid] = combined_methodUncertainty_deltaPlus + ( ((chi[bothValid]-average_anisotropy[bothValid])**2/average_anisotropy[bothValid]) + ((psi[bothValid]-average_anisotropy[bothValid])**2/average_anisotropy[bothValid]) )/2.
average_anisotropy_uncertainty_deltaMinus[bothValid] = combined_methodUncertainty_deltaMinus + ( ((chi[bothValid]-average_anisotropy[bothValid])**2/average_anisotropy[bothValid]) + ((psi[bothValid]-average_anisotropy[bothValid])**2/average_anisotropy[bothValid]) )/2.

# This takes a simpler approach of delta(x_bar) = (x_1 - x_2) /sqrt(2)   It is probably right
#average_anisotropy_uncertainty[bothValid] = 2*((inverse_normalized_chi_delta[bothValid]+inverse_normalized_psi_delta[bothValid])**-2) + ( abs(chi[bothValid]-psi[bothValid])/sqrt(2.) )
average_anisotropy_uncertainty[bothValid] = combined_methodUncertainty + ( abs(chi[bothValid]-psi[bothValid])/sqrt(2.) )
average_anisotropy_uncertainty_deltaPlus[bothValid]  = sqrt( combined_methodUncertainty_deltaPlus**2  + slopeError_chi[bothValid]**2 + slopeError_psi[bothValid]**2 + abs(chi[bothValid]-psi[bothValid])**2 / 2. )
average_anisotropy_uncertainty_deltaMinus[bothValid] = sqrt( combined_methodUncertainty_deltaMinus**2 + slopeError_chi[bothValid]**2 + slopeError_psi[bothValid]**2 + abs(chi[bothValid]-psi[bothValid])**2 / 2. )

average_anisotropy_uncertainty[chiValidOnly] = chi_deltaMagnitude[chiValidOnly]
average_anisotropy_uncertainty_deltaPlus[chiValidOnly] = chi_plus[chiValidOnly]
average_anisotropy_uncertainty_deltaMinus[chiValidOnly] = chi_minus[chiValidOnly]
average_anisotropy_uncertainty[psiValidOnly] = psi_deltaMagnitude[psiValidOnly]
average_anisotropy_uncertainty_deltaPlus[psiValidOnly] = psi_plus[psiValidOnly]
average_anisotropy_uncertainty_deltaMinus[psiValidOnly] = psi_minus[psiValidOnly]

average_anisotropy_uncertainty_deltaPlus.putProperty(QDataSet.NAME,'anisotropy_deltaPlus')
average_anisotropy_uncertainty_deltaPlus.putProperty(QDataSet.TITLE,'Upper range of uncertainty for combined anisotropy measurement')
average_anisotropy_uncertainty_deltaMinus.putProperty(QDataSet.NAME,'anisotropy_deltaMinus')
average_anisotropy_uncertainty_deltaMinus.putProperty(QDataSet.TITLE,'Lower range of uncertainty for combined anisotropy measurement')

average_anisotropy.putProperty(QDataSet.DEPEND_0,epoch)
average_anisotropy.putProperty(QDataSet.DELTA_PLUS,average_anisotropy_uncertainty_deltaPlus)
average_anisotropy.putProperty(QDataSet.DELTA_MINUS,average_anisotropy_uncertainty_deltaMinus)
average_anisotropy.putProperty(QDataSet.VALID_MIN,0)
average_anisotropy.putProperty(QDataSet.VALID_MAX,1E10)
average_anisotropy.putProperty(QDataSet.NAME,'Anisotropy')
average_anisotropy.putProperty(QDataSet.TITLE,'SPC Ion Anisotropy combining independent measurements in Vx/Vz and Vy/Vz planes from L0 v%s file'%(version_L0))

#average_anisotropy = trim(average_anisotropy,tr)


r = where(valid(average_anisotropy))

average_anisotropy_filtered = medianFilter(average_anisotropy[r],10)

average_anisotropy_filtered.putProperty(QDataSet.DEPEND_0,epoch[r])
average_anisotropy_filtered.putProperty(QDataSet.DELTA_PLUS,average_anisotropy_uncertainty[r])
average_anisotropy_filtered.putProperty(QDataSet.DELTA_MINUS,average_anisotropy_uncertainty[r])
average_anisotropy_filtered.putProperty(QDataSet.VALID_MIN,0)
average_anisotropy_filtered.putProperty(QDataSet.VALID_MAX,1E10)

load(googleDrive_directory+'Research/PSP/SPC/SPC_Anisotropy/Anisotropy_Files/L1/L1_anisotropyAveragingPlotter.vap')
#setLayoutOverplot(2)
plot(0,chi,color='red',legendLabel='&Chi;',ytitle='T!B&perp;!N/T!B||!N',ylog=True,yrange=[1E-1,1E1])
plot(1,psi,color='blue',legendLabel='&Psi;',ytitle='T!B&perp;!N/T!B||!N',ylog=True,yrange=[1E-1,1E1])
plot(2,average_anisotropy,ylog=True,yrange=[1E-1,1E1],ytitle='T!B&perp;!N/T!B||!N')

#plot(3,average_anisotropy_filtered,ylog=True,yrange=[1E-1,1E1])
#plot(3,epoch,average_anisotropy_uncertainty)

#STOP

#N_xyz = getDataSet(filename+'?B_hat',tr)
Bmag = getDataSet(filename+'?B_total',tr)

sweap_directory = 'http://sweap.cfa.harvard.edu/data/sci/sweap/spc/L3/$Y/$m/'
sweap_file = 'spp_swp_spc_l3i_$Y$m$d_v$v.cdf'
wp = getDataSet(sweap_directory+sweap_file+'?wp_moment',tr)
np = getDataSet(sweap_directory+sweap_file+'?np_moment',tr)

#reset()
Tp = 0.5*((wp*1E3)**2)*(mp/k)#0.5*(mp/k)**2
Tp2 = (wp*(9.79E0))**2  # Temperature in K along s/c z-direction

#plot(0,Tp,Tp2)
#stop

#B_sc = getDataSet('http://w3sweap.cfa.harvard.edu/data/sci/mag/l2_draft/$Y/$m/psp_fld_l2_mag_$Y$m$d_v$v.cdf?psp_fld_mag_sc',tr)
#Bmag = magnitude(B_sc)
#Bmag = synchronize(average_anisotropy,Bmag)

(np,Tp) = synchronize(average_anisotropy,[np,Tp])



# ###
# ### DEFINE T_PARALLEL/T_PERP
# ###

theta_Br = acos(Nz)
#Tp_parallel = Tp / sqrt(1 + average_anisotropy**2)
Tp_parallel = Tp / (Nz**2 + average_anisotropy*(1 - Nz**2) )
#Tp_parallel = Tp / ( N_xyz[:,2] + average_anisotropy*sin(acos(N_xyz[:,2])) )
Tp_perp = Tp_parallel * average_anisotropy
#Tp_parallel = Tp/(cos^2 theta_BR + a*sin^2 theta_BR)  # Temperature in K

# From Mike:
#I get that the parallel and perpendicular components of the temperature, once you solve for T_R and anisotropy factor a, are as follows:

#Tpar = T_R/(cos^2 theta_BR + a*sin^2 theta_BR)
#Tperp =  a*Tpar



# ###
# ### CALCULATE BETA
# ###

## cgs.. off from SI by a constant factor of 1.0827310778 -> what the hell is this factor?
#k    = 1.3807E-16
#mu_0 = 1.
#pressureParticle = (np)*k*(Tp*8.6174E-5)#nkT
#pressureParticle = (np)*k*(Tp*13.606)#nkT
#pressureMag = (Bmag*1E-5)**2/(2*mu_0)
#beta_cgs = pressureParticle/pressureMag

# SI
#k    = 1.3807E-23
#mu_0 = PI*4E-7
pressureParticle = (np*1E6)*k*(Tp)#nkT
pressureParticle_parallel = (np*1E6)*k*(Tp_parallel)#nkT
pressureParticle_perp = (np*1E6)*k*(Tp_perp)#nkT
pressureMag = (Bmag*1E-9)**2/(2*mu_0)

beta_SI = pressureParticle/pressureMag
beta_SI.putProperty(QDataSet.VALID_MIN,1E-10)
beta_SI.putProperty(QDataSet.VALID_MAX,1E10)
beta_SI.putProperty(QDataSet.NAME,'Beta')
beta_SI.putProperty(QDataSet.LABEL,'&beta;')
beta_SI.putProperty(QDataSet.TITLE,'Ion Plasma Beta from SPC Moments')

beta_parallel_SI = pressureParticle_parallel/pressureMag
beta_parallel_SI.putProperty(QDataSet.VALID_MIN,1E-10)
beta_parallel_SI.putProperty(QDataSet.VALID_MAX,1E10)
beta_parallel_SI.putProperty(QDataSet.NAME,'Beta_parallel')
beta_parallel_SI.putProperty(QDataSet.LABEL,'&beta;!B||')
beta_parallel_SI.putProperty(QDataSet.TITLE,'Ion Plasma Parallel Beta from SPC Moments')

beta_perp_SI = pressureParticle_perp/pressureMag
beta_perp_SI.putProperty(QDataSet.VALID_MIN,1E-10)
beta_perp_SI.putProperty(QDataSet.VALID_MAX,1E10)
beta_perp_SI.putProperty(QDataSet.NAME,'Beta_perp')
beta_perp_SI.putProperty(QDataSet.LABEL,'&beta;!B&perp;')
beta_perp_SI.putProperty(QDataSet.TITLE,'Ion Plasma Perpendicular Beta from SPC Moments')

## NRL Formulary.. same as SI
#beta_NRL = (4.03E-11)*(np)*(Tp*8.6174E-5)*((Bmag*1E-5)**-2)

#average_anisotropy.putProperty(QDataSet.DELTA_PLUS,None)
#average_anisotropy.putProperty(QDataSet.DELTA_MINUS,None)

anisotropyMin = 0.1
anisotropyMax = 10
anisotropyBinNumber = 50
betaMin = 0.0001
betaMax = 10000
betaBinNumber = 140

aa = logspace(anisotropyMin,anisotropyMax,anisotropyBinNumber)
bb = logspace(betaMin,betaMax,betaBinNumber)

rebin_anisotropyVsBeta = rebin( link(beta_parallel_SI,average_anisotropy,ones(len(average_anisotropy))) , bb , aa )

#plot(3,beta_cgs/beta_SI)
plot(3,beta_SI)
plot(4,beta_parallel_SI)
plot(5,beta_perp_SI)
#plot(4,(B_parallel*1E-9)**2/(2*mu_0))
#plot(3,beta_parallel_SI,average_anisotropy,renderType='scatter',ylog=True,xlog=True,ytitle='T!B&perp;!N/T!B||!N',xtitle='&beta;!B||')
#plot(3,((4.03E-11)*(np)*(Tp*8.6174E-5)*((Bmag*1E-5)**-2))/beta_SI)

#average_anisotropy.putProperty(QDataSet.DELTA_MINUS,None)
#average_anisotropy.putProperty(QDataSet.DELTA_PLUS,None)
#plot(6,average_anisotropy,(beta_perp_SI/beta_parallel_SI))

plot(6,rebin_anisotropyVsBeta.property(QDataSet.WEIGHTS),zlog=True,ylog=True,yrange=[1E-1,1E1])



###
###
###

if writeStuff == True:
    if analyzingTimeWidthComparisons == True:
        output_anitostropyL1_directory = googleDrive_directory+'Research/PSP/SPC/SPC_Anisotropy/Anisotropy_Files/TEMP/L1/v%s/'%version_L1
        output_anitostropyL1_file = 'SPC_Anisotropy_L1_%s_v%s_%ssec.cdf'%(tr,version_L1,fitSeconds)
    else:
        output_anitostropyL1_directory = googleDrive_directory+'Research/PSP/SPC/SPC_Anisotropy/Anisotropy_Files/L1/v%s/'%(version_L1)
        output_anitostropyL1_file = 'SPC_Anisotropy_L1_%s_v%s.cdf'%(tr,version_L1)
        
    #formatDataSet(epoch,output_anitostropyL1_file)
    #print output_anitostropyL1_file
    #print B_npq
    #f = open(output_anitostropyL1_directory + output_anitostropyL1_file,"w+")
    #formatDataSet(B_npq,               f)
    #formatDataSet(Bmag,                output_anitostropyL1_directory + output_anitostropyL1_file+'?append=T')
    #formatDataSet(average_anisotropy,  output_anitostropyL1_directory + output_anitostropyL1_file+'?append=T')
    #formatDataSet(beta_SI,             output_anitostropyL1_directory + output_anitostropyL1_file+'?append=T')
    #formatDataSet(beta_parallel_SI,    output_anitostropyL1_directory + output_anitostropyL1_file+'?append=T')
    #formatDataSet(beta_perp_SI,        output_anitostropyL1_directory + output_anitostropyL1_file+'?append=T')
    formatDataSet(B_hat,                                     output_anitostropyL1_directory + output_anitostropyL1_file)
    formatDataSet(Bmag,                                      output_anitostropyL1_directory + output_anitostropyL1_file+'?append=T')
    formatDataSet(average_anisotropy,                        output_anitostropyL1_directory + output_anitostropyL1_file+'?append=T')
    formatDataSet(average_anisotropy_uncertainty_deltaPlus,  output_anitostropyL1_directory + output_anitostropyL1_file+'?append=T')
    formatDataSet(average_anisotropy_uncertainty_deltaMinus, output_anitostropyL1_directory + output_anitostropyL1_file+'?append=T')
    formatDataSet(beta_SI,                                   output_anitostropyL1_directory + output_anitostropyL1_file+'?append=T')
    formatDataSet(beta_parallel_SI,                          output_anitostropyL1_directory + output_anitostropyL1_file+'?append=T')
    formatDataSet(beta_perp_SI,                              output_anitostropyL1_directory + output_anitostropyL1_file+'?append=T')
