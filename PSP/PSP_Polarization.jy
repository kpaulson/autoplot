

############################################################################
##################            VARIABLES          ###########################
############################################################################
############################################################################

scrollingPlots    = False  # True spits out polarization plots by scrolling through data 
timerange = getParam('timerange','2019-04-01 02:45 to 03:25','Timerange over which to calculate Poynting Flux')

freq_min       = getParam('minFrequency', 0.3,  'Lower frequency bound of analysis (Hz)')
freq_max       = getParam('maxFrequency', 9.,  'Upper frequency bound of analysis (Hz)')
window         = getParam('windowWidth',  1024, 'Number of points in fft window')
slide          = getParam('slideFactor',  8,    'Reciprocal of fraction of non-overlap between neighboring windows')
trend_seconds  = getParam('trendSeconds', 60,   'Number of seconds used to identify the background magnetic field')
wave_power_min = getParam('wavePowerMin', 0.07, 'Minimum Wave Power value in Bfield to be plotted (filters out noise)')

logyn             = 'T'    # Display the frequency axis logarithmically, 'T' or 'F'?
output_dir        = '/home/kpaulson/Research/PSP/Wave_Polarization/'      # Local directory for image/file storage

    
useLocalSubprocesses = getParam('useLocalSubprocesses','T','Use local subprocess imports instead of Github',['T','F'])
useLocalFiles        = getParam('useLocalFiles','F','Pull data from local cache',['T','F'])
plotStuff            = getParam('plotStuff','T','Plot dataset',['T','F'])
writeStuff           = getParam('writeStuff','F','Write dataset out to cdf file',['T','F'])
useRegularTimestamps = getParam('useRegularTimestamps','T','Rewrite flds timestamps to constant cadence',['T','F'])

if useLocalSubprocesses == 'T':
    useLocalSubprocesses = True
elif useLocalSubprocesses == 'F':
    useLocalSubprocesses = False
    
if useLocalFiles == 'T':
    useLocalFiles = True
elif useLocalFiles == 'F':
    useLocalFiles = False
    
if plotStuff == 'T':
    plotStuff = True
elif plotStuff == 'F':
    plotStuff = False
    
if writeStuff == 'T':
    writeStuff = True
    outputDirectory = getParam('outputDirectory','Research/PSP/WaveAnalysis/WaveAnalysis_Files/v%s/'%(version),'Where to write file')
elif writeStuff == 'F':
    writeStuff = False
    outputDirectory = '/tmp/'
    
if useRegularTimestamps == 'T':
    useRegularTimestamps = True
elif useRegularTimestamps == 'F':
    useRegularTimestamps = False

power_min         = wave_power_min
power_max         = 1E2



############################################################################
##################            IMPORTS            ###########################
############################################################################
############################################################################

import sys
import java
try:
    if useLocalSubprocesses == True:
        raise stopLookingOnlineException
        
    ### IMPORT SUBPROCESSES
    get_OS_version = getFile( 'https://github.com/kpaulson/autoplot/blob/master/CoreSubprocesses/get_os_version.jy',monitor.getSubtaskMonitor('import get_os_version()'))
    execfile( get_OS_version.toString() )
    
    #Poynting_Flux = getFile( 'https://github.com/kpaulson/autoplot/blob/master/CoreSubprocesses/Poynting_Flux.jy',monitor.getSubtaskMonitor('import Poyntingify()'))
    #execfile( Poynting_Flux.toString() )
    
    Polarization_Means = getFile( 'https://github.com/kpaulson/autoplot/blob/master/CoreSubprocesses/Polarization_Means.jy',monitor.getSubtaskMonitor('import Polarize()'))
    execfile( Polarization_Means.toString() )
    
    Hanningfft = getFile( 'https://github.com/kpaulson/autoplot/blob/master/CoreSubprocesses/Hanningfft.jy',monitor.getSubtaskMonitor('import Hanningfft()'))
    execfile( Hanningfft.toString() )
    
    field_aligner = getFile( 'https://github.com/kpaulson/autoplot/blob/master/CoreSubprocesses/Field_Aligner.jy',monitor.getSubtaskMonitor('import field_aligner()'))
    execfile( field_aligner.toString() )
    
    
except:
    print 'Unable to grab subprocess from github'
    
    get_OS_version = getFile( 'C:/Users/kpaulson/Software/Autoplot/GithubScripts/CoreSubprocesses/get_os_version.jy',monitor.getSubtaskMonitor('import get_os_version()'))
    execfile( get_OS_version.toString() )
    
    #Poynting_Flux = getFile( 'C:/Users/kpaulson/Software/Autoplot/GithubScripts/CoreSubprocesses/Poynting_Flux.jy',monitor.getSubtaskMonitor('import Poyntingify()'))
    #execfile( Poynting_Flux.toString() )
    
    Polarization_Means = getFile( 'C:/Users/kpaulson/Software/Autoplot/GithubScripts/CoreSubprocesses/Polarization_Means.jy',monitor.getSubtaskMonitor('import Polarize()'))
    execfile( Polarization_Means.toString() )
    
    Hanningfft = getFile( 'C:/Users/kpaulson/Software/Autoplot/GithubScripts/CoreSubprocesses/Hanningfft.jy',monitor.getSubtaskMonitor('import Hanningfft()'))
    execfile( Hanningfft.toString() )
    
    field_aligner = getFile( 'C:/Users/kpaulson/Software/Autoplot/GithubScripts/CoreSubprocesses/Field_Aligner.jy',monitor.getSubtaskMonitor('import field_aligner()'))
    execfile( field_aligner.toString() )
    
    
    
############################################################################
#################            BEGIN SCRIPT        ###########################
############################################################################
############################################################################



if scrollingPlots == True:
    dds= generateTimeRanges('$Y$m$d $(H,span=6):00 ',timerange)
    #dds= generateTimeRanges('$Y$m$d $(H,span=24):00 ',timerange)
    monitor.started()
    monitor.setLabel('PSP Polarization')
    monitor.setTaskSize(len(dds))
    
    for ind in xrange(len(dds)):
        monitor.setTaskProgress(ind)
        monitor.setProgressMessage('Downloading Data')
        
        if ind < len(dds)-1:
            try:
                #tr = dds[ind]+' to '+str(dds[ind+1])
                tr = dds[ind]+' to '+dds[ind+1]
        
        
                mag_datafile = 'http://w3sweap.cfa.harvard.edu/data/sci/mag/l2_draft/$Y/$m/psp_fld_l2_mag_$Y$m$d_v$v.cdf'
                mag = getDataSet(mag_datafile+'?psp_fld_mag_sc',tr)
                
                #mag = getDataSet('file:/home/kpaulson/data/remote/spp_swp_spc_magosurvey_20181103_v00.cdf?B_SC')
                mag = trim(mag,tr)
                
                mag_time = mag.property(QDataSet.DEPEND_0)
                
                pos = getDataSet('http://sweap.cfa.harvard.edu/data/sci/spc/L3/$Y/$m/spp_swp_spc_l3i_$Y$m$d_v$v.cdf?sc_pos_HCI',tr)
                pos_time = pos.property(QDataSet.DEPEND_0)
                
                Bx = mag[:,0]
                By = mag[:,1]
                Bz = mag[:,2]
                Btotal = magnitude(mag)
                Btime = Btotal.property(QDataSet.DEPEND_0)
                
                
                # ###
                # ### ROTATE INTO FIELD-ALIGNED COORDINATES
                # ###
                
                monitor.setProgressMessage('Rotating Data')
                
                TEMP_Rx = pos[:,0]  # Theoretically I would use a radial position vector to calculate the perpendicular field components.
                TEMP_Ry = pos[:,1]
                TEMP_Rz = pos[:,2]
                
                TEMP_Rx = ones(len(pos))   # Instead of position vector, I am just using a vector pointing in the positive X direction. For PSP and SC frame mag data, this would mean the ram direction, right?
                TEMP_Ry = zeros(len(pos))
                TEMP_Rz = zeros(len(pos))
                TEMP_Rx.putProperty(QDataSet.DEPEND_0,pos_time)
                TEMP_Ry.putProperty(QDataSet.DEPEND_0,pos_time)
                TEMP_Rz.putProperty(QDataSet.DEPEND_0,pos_time)
                
                try:
                    ( Bn , Bp , Bq , Nx , Ny , Nz , Px , Py , Pz , Qx , Qy , Qz ) = field_aligner( Bx , By, Bz , Btotal , TEMP_Rx , TEMP_Ry , TEMP_Rz , trend_seconds )
                except:
                    TEMP_Rx = ones(len(mag))   # Instead of position vector, I am just using a vector pointing in the positive X direction. For PSP and SC frame mag data, this would mean the ram direction, right?
                    TEMP_Ry = zeros(len(mag))
                    TEMP_Rz = zeros(len(mag))
                    TEMP_Rx.putProperty(QDataSet.DEPEND_0,mag_time)
                    TEMP_Ry.putProperty(QDataSet.DEPEND_0,mag_time)
                    TEMP_Rz.putProperty(QDataSet.DEPEND_0,mag_time)
                    ( Bn , Bp , Bq , Nx , Ny , Nz , Px , Py , Pz , Qx , Qy , Qz ) = field_aligner( Bx , By, Bz , Btotal , TEMP_Rx , TEMP_Ry , TEMP_Rz , trend_seconds )
                
                
                # ###
                # ### GENERATE FFTs
                # ###
                
                monitor.setProgressMessage('Generating FFTs')
                
#                Bn_fft = Hanningfft( Bn , freq_min , freq_max , window , slide )
#                Bp_fft = Hanningfft( Bp , freq_min , freq_max , window , slide )
#                Bq_fft = Hanningfft( Bq , freq_min , freq_max , window , slide )
                Bn_fft = HanningfftNoTrim( Bn , freq_min , freq_max , window , slide )
                Bp_fft = HanningfftNoTrim( Bp , freq_min , freq_max , window , slide )
                Bq_fft = HanningfftNoTrim( Bq , freq_min , freq_max , window , slide )
                
                fft_time = Bn_fft.property(QDataSet.DEPEND_0)
                frequency_axis = Bn_fft.property(QDataSet.DEPEND_1)
            
                # ###
                # ### RUN POLARIZATION
                # ###
                
                monitor.setProgressMessage('Running Polarization')
            
                ( Handedness , Ellipticity , Angle_Normal , Deg_Polarization , Coherency , Angle_Polarization , Wave_Power , Power_par , Power_perp) = Polarize( Bn_fft , Bp_fft , Bq_fft , Nx , Ny , Nz , wave_power_min )
                
                
                # ###
                # ### PREPARE STUFF
                # ###
                
                
                background_grey = java.awt.Color(216,216,216,255)
                
                if ( logyn == 'T'):
                  logfreq = 1
                else:
                  logfreq = 0
                
                from org.das2.graph.DasColorBar.Type import APL_RAINBOW_BLACK0
                from org.das2.graph.DasColorBar.Type import BLUE_WHITE_RED_WEDGE
                from org.das2.graph.DasColorBar.Type import GRAYSCALE
                from org.das2.graph.DasColorBar.Type import INVERSE_GRAYSCALE
                from org.das2.graph.LegendPosition import *
                from org.das2.graph.SpectrogramRenderer.RebinnerEnum import lanlNearestNeighbor
                from org.das2.graph.SpectrogramRenderer.RebinnerEnum import nearestNeighbor
                
                putProps([Bp, Bq, Bn ] , QDataSet.VALID_MAX , 1E10 )
                putProps([Bp, Bq, Bn ] , QDataSet.VALID_MIN , -1E10 )
                
                
                ###
                ### PLOT STUFF
                ###
                
                monitor.setProgressMessage('Plotting Parameters')
                
                r = where(Bp.ge(-1E10).and(Bp.ge(-1E10)).and(Bp.le(1E10).and(Bp.le(1E10))))
                #Bp = Bp[r]
                #Bn = Bn[r]
                #Btime = Btime[r]
                
                y_max = 1.1 * max( max(abs(Bp[r])) , max(abs(Bn[r])) )
                
                setLayoutOverplot(2)
                plotx ( 0 , mag_time , Bp , yrange=[-y_max,y_max] , renderType='series' , title = 'Polarization parameters for PSP' , ytitle='Field!CComponents' )
                plotx ( 1 , mag_time , Bn , yrange=[-y_max,y_max] , renderType='series' )
                dom.plotElements[0].setDisplayLegend(True)
                dom.plotElements[1].style.color= Color.BLUE
                dom.plotElements[1].setDisplayLegend(True)
                
                plotx ( 2 , Wave_Power , ytitle='Frequency (Hz)', ylog=logfreq , yrange=[freq_min, freq_max] , zlog=1, zrange=[power_min , power_max], ztitle='Wave Intensity!C(nT!U2!N/Hz)' )#, title = 'Polarization parameters for RBSP S/C-'+SC_upper+' - '+start_date+'T'+str(start_hour))
                plotx ( 3 , Coherency , ylog=logfreq , yrange=[freq_min, freq_max] , ztitle='Coherency', zlog=0, zrange=[0,1] )
                plotx ( 4 , Angle_Normal , ylog=logfreq , yrange=[freq_min, freq_max] , ztitle='Wave-Normal!CRelative to |B|', zrange=[0, 90])
                plotx ( 5 , Ellipticity , ylog=logfreq , yrange=[freq_min, freq_max] , zrange=[-1 , 1], ztitle='Ellipticity!CRH               LH')#, ztitle='              Ellipticity!C!BRight                         Left!C!BHand                       Hand!N' )
                
                monitor.setProgressMessage('Tweaking Plots')
                waitUntilIdle()
                
                dom.plots[0].xaxis.drawTickLabels = 0
                dom.plots[0].controller.dasColorBar.setFillColor(background_grey)
                dom.plots[0].setDisplayLegend(True)
                dom.plots[0].setLegendPosition(OutsideNE)
                dom.plots[0].xaxis.setRange(datumRange(tr))
                
                dom.plots[1].xaxis.drawTickLabels = 0
                dom.plots[1].displayTitle = 0
                dom.plots[1].setColortable(APL_RAINBOW_BLACK0)
                dom.plots[1].controller.dasColorBar.setFillColor(background_grey)
                dom.plots[1].xaxis.setRange(datumRange(tr))
                dom.plotElements[2].style.setRebinMethod(nearestNeighbor)
                
                dom.plots[2].xaxis.drawTickLabels = 0
                dom.plots[2].displayTitle = 0
                dom.plots[2].setColortable(GRAYSCALE)
                dom.plots[2].controller.dasColorBar.setFillColor(background_grey)
                dom.plots[2].xaxis.setRange(datumRange(tr))
                dom.plotElements[3].style.setRebinMethod(nearestNeighbor)
                
                dom.plots[3].xaxis.drawTickLabels = 0
                dom.plots[3].displayTitle = 0
                dom.plots[3].setColortable(INVERSE_GRAYSCALE)
                dom.plots[3].controller.dasColorBar.setFillColor(background_grey)
                dom.plots[3].xaxis.setRange(datumRange(tr))
                dom.plotElements[4].style.setRebinMethod(nearestNeighbor)
                
                dom.plots[4].displayTitle = 0
                dom.plots[4].setColortable(BLUE_WHITE_RED_WEDGE)
                dom.plots[4].controller.dasColorBar.setFillColor(background_grey)
                dom.plots[4].xaxis.setRange(datumRange(tr))
                dom.plotElements[5].style.setRebinMethod(nearestNeighbor)
                #dom.plots[4].ticksURI = 'vap+das2server:http://emfisis.physics.uiowa.edu/das/das2Server?dataset=rbsp/ephemeris'+SPACECRAFT+'.dsdf&timerange='+str(starttitle)+' through '+str(endtitle)+'&interval=60'
                
                waitUntilIdle()
                fixLayout()
                
                dom.plots[0].controller.dasPlot.row.ptMaximum = 10 #closes in gaps between windows after "Fix Layout" to be a little more compact
                dom.plots[1].controller.dasPlot.row.ptMaximum = 10
                dom.plots[2].controller.dasPlot.row.ptMaximum = 10
                dom.plots[3].controller.dasPlot.row.ptMaximum = 10
                dom.plots[4].controller.dasPlot.row.ptMaximum = 10
                
                dom.controller.bind( dom.plots[2].yaxis, dom.plots[2].yaxis.PROP_RANGE,  dom.plots[1].yaxis, dom.plots[1].yaxis.PROP_RANGE ) #adds binding along frequency axis between plots
                dom.controller.bind( dom.plots[3].yaxis, dom.plots[3].yaxis.PROP_RANGE,  dom.plots[1].yaxis, dom.plots[1].yaxis.PROP_RANGE )
                dom.controller.bind( dom.plots[4].yaxis, dom.plots[4].yaxis.PROP_RANGE,  dom.plots[1].yaxis, dom.plots[1].yaxis.PROP_RANGE )
                
                dom.controller.bind( dom.plots[0].xaxis, dom.plots[0].xaxis.PROP_RANGE,  dom.plots[1].xaxis, dom.plots[1].xaxis.PROP_RANGE ) #adds binding along time axis between plots
                dom.controller.bind( dom.plots[0].xaxis, dom.plots[0].xaxis.PROP_RANGE,  dom.plots[2].xaxis, dom.plots[2].xaxis.PROP_RANGE )
                dom.controller.bind( dom.plots[0].xaxis, dom.plots[0].xaxis.PROP_RANGE,  dom.plots[3].xaxis, dom.plots[3].xaxis.PROP_RANGE )
                dom.controller.bind( dom.plots[0].xaxis, dom.plots[0].xaxis.PROP_RANGE,  dom.plots[4].xaxis, dom.plots[4].xaxis.PROP_RANGE )
            
                waitUntilIdle()
                dom.plots[4].xaxis.setRange(datumRange(tr))
                
                # ###
                # ### SAVE PLOT
                # ###
                
                waitUntilIdle()
                writeToPng(output_dir+'PSP_Polarization_'+dds[ind][0:8]+'_'+dds[ind][-5:-3]+dds[ind][-2:]+'-'+dds[ind+1][-5:-3]+dds[ind+1][-2:]+'.png')
            
                #stop
            
            
                # ###
                # ### WRITE STUFF
                # ###
                
                
                if writeStuff == True:
                    
                    monitor.setProgressMessage('Writing to File')
                    
                    Btime.putProperty(QDataSet.NAME,'Bfield_time')
                    fft_time.putProperty(QDataSet.NAME,'FFT_time')
                    frequency_axis.putProperty(QDataSet.NAME,'Frequencies')
                    
                    #tempOutputFile = 'C:/Users/Kristoff/Desktop/TEMP_polarization'#.cdf'
                    tempOutputFile = output_dir+'PSP_Polarization_'+dds[ind][0:8]+'_'+dds[ind][-5:-3]+dds[ind][-2:]
                    #tempOutputFile = output_dir+'PSP_Polarization_'+dds[ind][0:8]+'_'+dds[ind][-5:-3]+dds[ind][-2:]
                    b_wna = bundle(Bp, Bq, Bn)
                    b_wna.putProperty(QDataSet.NAME,'Bfield_wna')
                    b_wna.putProperty(QDataSet.TITLE,'Magnetic Field in wave-normal coordinates')
                    b_wna.putProperty(QDataSet.VALID_MIN,-1E10)
                    b_wna.putProperty(QDataSet.VALID_MAX, 1E10)
                    b_wna.putProperty(QDataSet.DEPEND_0, Btime)
                    
                    failedToWrite = True
                    write_fail_counter = 0
                    while failedToWrite == True:
                        try:
                            formatDataSet(b_wna,tempOutputFile+'.cdf')
                            failedToWrite = False
                        except:
                            write_fail_counter+=1
                            tempOutputFile = tempOutputFile+str(write_fail_counter)
                    tempOutputFile = tempOutputFile+'.cdf'
                    
                    Coherency.putProperty(QDataSet.NAME,'Coherency')
                    Coherency.putProperty(QDataSet.VALID_MIN,0)
                    Coherency.putProperty(QDataSet.VALID_MAX,1)
                    Ellipticity.putProperty(QDataSet.NAME,'Ellipticity')
                    Ellipticity.putProperty(QDataSet.VALID_MIN,-1)
                    Ellipticity.putProperty(QDataSet.VALID_MAX,1)
                    Angle_Normal.putProperty(QDataSet.NAME,'Angle_Normal')
                    Angle_Normal.putProperty(QDataSet.VALID_MIN,0)
                    Angle_Normal.putProperty(QDataSet.VALID_MAX,90)
                    Power_perp.putProperty(QDataSet.NAME,'Power_Perp')
                    Power_perp.putProperty(QDataSet.UNITS,Units.lookupUnits('nT!U2!N/Hz'))
                    Power_perp.putProperty(QDataSet.VALID_MIN,0)
                    Power_perp.putProperty(QDataSet.VALID_MAX,1E10)
                    Power_par.putProperty(QDataSet.NAME,'Power_Par')
                    Power_par.putProperty(QDataSet.UNITS,Units.lookupUnits('nT!U2!N/Hz'))
                    Power_par.putProperty(QDataSet.VALID_MIN,0)
                    Power_par.putProperty(QDataSet.VALID_MAX,1E10)
                    
                    putProps([Coherency, Ellipticity, Angle_Normal, Power_perp, Power_par] , QDataSet.DEPEND_0 , fft_time )
                    putProps([Coherency, Ellipticity, Angle_Normal, Power_perp, Power_par] , QDataSet.DEPEND_1 , frequency_axis )
                    
                    formatDataSet(Power_perp,tempOutputFile+'?append=T')
                    formatDataSet(Power_par,tempOutputFile+'?append=T')
                    formatDataSet(Coherency,tempOutputFile+'?append=T')
                    formatDataSet(Ellipticity,tempOutputFile+'?append=T')
                    formatDataSet(Angle_Normal,tempOutputFile+'?append=T')
                    
            except:
                
                continue
                
elif scrollingPlots == False:
    
    monitor.started()
    monitor.setLabel('PSP Polarization')
    #monitor.setTaskSize(len(dds))
    
    #tr = dds[ind]+' to '+str(dds[ind+1])
    tr = timerange

    
    if useLocalFiles == True:
        cfa_sweap_file  = googleDrive_path+'Research/Data/AutoplotCache/http/w3sweap.cfa.harvard.edu/data/sci/sweap/spc/L3/$Y/$m/spp_swp_spc_l3i_$Y$m$d_v$v.cdf'
        #mag_datafile    = googleDrive_path+'Research/Data/AutoplotCache/http/w3sweap.cfa.harvard.edu/data/sci/mag/l2_draft/$Y/$m/psp_fld_l2_mag_$Y$m$d_v$v.cdf'
        mag_datafile    = googleDrive_path+'Research/Data/AutoplotCache/http/research.ssl.berkeley.edu/data/psp/data/sci/fields/l2/mag_SC/$Y/$m/psp_fld_l2_mag_SC_$Y$m$d$(H,span=6)_v$v.cdf'
        efield_datafile = googleDrive_path+'Research/Data/AutoplotCache/http/research.ssl.berkeley.edu/data/psp/data/sci/fields/l2/dfb_wf_dvdc/$Y/$m/psp_fld_l2_dfb_wf_dvdc_$Y$m$d$(H,span=6)_v01.cdf'
    else:
        cfa_sweap_file  = 'http://w3sweap.cfa.harvard.edu/data/sci/sweap/spc/L3/$Y/$m/spp_swp_spc_l3i_$Y$m$d_v$v.cdf'
        #mag_datafile    = 'http://w3sweap.cfa.harvard.edu/data/sci/sweap/mag/l2_draft/$Y/$m/psp_fld_l2_mag_$Y$m$d_v$v.cdf'
        mag_datafile    = 'http://research.ssl.berkeley.edu/data/psp/data/sci/fields/l2/mag_SC/$Y/$m/psp_fld_l2_mag_SC_$Y$m$d$(H,span=6)_v$v.cdf'
        efield_datafile = 'http://research.ssl.berkeley.edu/data/psp/data/sci/fields/l2/dfb_wf_dvdc/$Y/$m/psp_fld_l2_dfb_wf_dvdc_$Y$m$d$(H,span=6)_v$v.cdf'
                   
    try:
        title_warning = ''
        mag_data = getDataSet(mag_datafile+'?psp_fld_l2_mag_SC',timerange)
        #efield_data = getDataSet(efield_datafile+'?psp_fld_l2_dfb_wf_dVdc_sc',timerange)
    except:
        title_warning = '  - Uncalibrated Fields Data'
        mag_datafile = 'http://research.ssl.berkeley.edu/data/spp/data/sci/fields/staging/l2/mag_SC/$Y/$m/psp_fld_l2_mag_SC_$Y$m$d$(H,span=6)_v$v.cdf'
        #efield_datafile = 'http://research.ssl.berkeley.edu/data/spp/data/sci/fields/staging/l2/dfb_wf_dvdc/$Y/$m/psp_fld_l2_dfb_wf_dvdc_$Y$m$d$(H,span=6)_v$v.cdf'
        mag_data = getDataSet(mag_datafile+'?psp_fld_l2_mag_SC',timerange)
        #efield_data = getDataSet(efield_datafile+'?psp_fld_l2_dfb_wf_dVdc_sc',timerange)
    print 'mag data used:',mag_datafile
    mag_time = mag_data.property(QDataSet.DEPEND_0)
    
    # This clause generates new timestamps from the most common cadence in the mag dataset
    #   (this is to avoid the issues with the fft when there are changes in time cadence)
    if useRegularTimestamps == True:
        startTime = putProperty(mag_time[0],QDataSet.NAME,None)
        endTime = putProperty(mag_time[-1],QDataSet.NAME,None)
        cadence = mode(diff(mag_time))
        timeLength = (endTime-startTime)/cadence
        new_time = timegen(str(startTime),str(cadence),int(timeLength))
        
        mag_time_to_new_time_ratio = findex(mag_time,new_time)
        mag_data = interpolate(mag_data,mag_time_to_new_time_ratio)
        mag_time = new_time
     
    #mag = getDataSet('file:/home/kpaulson/data/remote/spp_swp_spc_magosurvey_20181103_v00.cdf?B_SC')
    mag = trim(mag_data,tr)
    
    mag_time = mag.property(QDataSet.DEPEND_0)
    
    pos = getDataSet(cfa_sweap_file+'?sc_pos_HCI',tr)
    pos_time = pos.property(QDataSet.DEPEND_0)
    
    Bx = mag[:,0]
    By = mag[:,1]
    Bz = mag[:,2]
    Btotal = magnitude(mag)
    
    
    # ###
    # ### ROTATE INTO FIELD-ALIGNED COORDINATES
    # ###
    
    monitor.setProgressMessage('Rotating Data')
    
    TEMP_Rx = pos[:,0]  # Theoretically I would use a radial position vector to calculate the perpendicular field components.
    TEMP_Ry = pos[:,1]
    TEMP_Rz = pos[:,2]
    
    TEMP_Rx = zeros(len(pos))   # Instead of position vector, I am just using a vector pointing in the positive X direction. For PSP and SC frame mag data, this would mean the ram direction, right?
    TEMP_Ry = ones(len(pos))
    TEMP_Rz = zeros(len(pos))
    TEMP_Rx.putProperty(QDataSet.DEPEND_0,pos_time)
    TEMP_Ry.putProperty(QDataSet.DEPEND_0,pos_time)
    TEMP_Rz.putProperty(QDataSet.DEPEND_0,pos_time)
    
    try:
        ( Bn , Bp , Bq , Nx , Ny , Nz , Px , Py , Pz , Qx , Qy , Qz ) = field_aligner( Bx , By, Bz , Btotal , TEMP_Rx , TEMP_Ry , TEMP_Rz , trend_seconds )
    except:
        TEMP_Rx = ones(len(mag))   # Instead of position vector, I am just using a vector pointing in the positive X direction. For PSP and SC frame mag data, this would mean the ram direction, right?
        TEMP_Ry = zeros(len(mag))
        TEMP_Rz = zeros(len(mag))
        TEMP_Rx.putProperty(QDataSet.DEPEND_0,mag_time)
        TEMP_Ry.putProperty(QDataSet.DEPEND_0,mag_time)
        TEMP_Rz.putProperty(QDataSet.DEPEND_0,mag_time)
        ( Bn , Bp , Bq , Nx , Ny , Nz , Px , Py , Pz , Qx , Qy , Qz ) = field_aligner( Bx , By, Bz , Btotal , TEMP_Rx , TEMP_Ry , TEMP_Rz , trend_seconds )
    
    
    # ###
    # ### GENERATE FFTs
    # ###
    
    monitor.setProgressMessage('Generating FFTs')
    
    Bn_fft = Hanningfft( Bn , freq_min , freq_max , window , slide )
    Bp_fft = Hanningfft( Bp , freq_min , freq_max , window , slide )
    Bq_fft = Hanningfft( Bq , freq_min , freq_max , window , slide )
    

    # ###
    # ### RUN POLARIZATION
    # ###
    
    monitor.setProgressMessage('Running Polarization')

    ( Handedness, Ellipticity, Angle_Normal, Deg_Polarization, Coherency, Angle_Polarization, Power_compressional, Power_perp ) = Polarize( Bn_fft , Bp_fft , Bq_fft , Nx , Ny , Nz , wave_power_min )
    Wave_Power = Power_perp
    
    # ###
    # ### PREPARE STUFF
    # ###
    
    Ellipticity.putProperty(        QDataSet.NAME,'ellipticity')
    Angle_Normal.putProperty(       QDataSet.NAME,'wave_normal')
    Coherency.putProperty(          QDataSet.NAME,'coherency')
    Power_compressional.putProperty(QDataSet.NAME,'B_power_para')
    Power_perp.putProperty(         QDataSet.NAME,'B_power_perp')
    Bn.putProperty(                 QDataSet.NAME,'Bn')
    Bp.putProperty(                 QDataSet.NAME,'Bp')
    Bq.putProperty(                 QDataSet.NAME,'Bq')
    
    Ellipticity.putProperty(        QDataSet.LABEL,'Ellipticity')
    Angle_Normal.putProperty(       QDataSet.LABEL,'Wave Normal')
    Coherency.putProperty(          QDataSet.LABEL,'Coherency')
    Power_compressional.putProperty(QDataSet.LABEL,'B!Bpara!N')
    Power_perp.putProperty(         QDataSet.LABEL,'B!Bperp!N')
    Bn.putProperty(                 QDataSet.LABEL,'B!B||!N')
    Bp.putProperty(                 QDataSet.LABEL,'B!B&perp;T!N')
    Bq.putProperty(                 QDataSet.LABEL,'B!B&perp;N!N')
    
    Ellipticity.putProperty(        QDataSet.TITLE,'Ellipticity')
    Angle_Normal.putProperty(       QDataSet.TITLE,'Wave Normal Angle')
    Coherency.putProperty(          QDataSet.TITLE,'Coherency')
    Power_compressional.putProperty(QDataSet.TITLE,'Bfield Power Compressional')
    Power_perp.putProperty(         QDataSet.TITLE,'Bfield Power Transverse')
    Bn.putProperty(                 QDataSet.TITLE,'Compressional magnetic field')
    Bp.putProperty(                 QDataSet.TITLE,'Transverse magnetic field in RTN_T direction')
    Bq.putProperty(                 QDataSet.TITLE,'Transverse magnetic field in RTN_N direction')
            
    
    
    background_grey = java.awt.Color(216,216,216,255)
    
    if ( logyn == 'T'):
      logfreq = 1
    else:
      logfreq = 0
    
    from org.das2.graph.DasColorBar.Type import APL_RAINBOW_BLACK0
    from org.das2.graph.DasColorBar.Type import BLUE_WHITE_RED_WEDGE
    from org.das2.graph.DasColorBar.Type import GRAYSCALE
    from org.das2.graph.DasColorBar.Type import INVERSE_GRAYSCALE
    from org.das2.graph.LegendPosition import *
    from org.das2.graph.SpectrogramRenderer.RebinnerEnum import lanlNearestNeighbor
    from org.das2.graph.SpectrogramRenderer.RebinnerEnum import nearestNeighbor
    
    putProps([Bp, Bq, Bn ] , QDataSet.VALID_MAX , 1E10 )
    putProps([Bp, Bq, Bn ] , QDataSet.VALID_MIN , -1E10 )
    
    
    ###
    ### PLOT STUFF
    ###
    
    monitor.setProgressMessage('Plotting Parameters')
    
    r = where(Bp.ge(-1E10).and(Bp.ge(-1E10)).and(Bp.le(1E10).and(Bp.le(1E10))))
    #Bp = Bp[r]
    #Bn = Bn[r]
    #Btime = Btime[r]
    
    y_max = 1.1 * max( max(abs(Bp[r])) , max(abs(Bn[r])) )
    
    setLayoutOverplot(2)
    plotx ( 0 , mag_time , Bp , yrange=[-y_max,y_max] , renderType='series' , title = 'Polarization parameters for PSP'+title_warning , ytitle='Field!CComponents' )
    plotx ( 1 , mag_time , Bn , yrange=[-y_max,y_max] , renderType='series' )
    dom.plotElements[0].setDisplayLegend(True)
    dom.plotElements[1].style.color= Color.BLUE
    dom.plotElements[1].setDisplayLegend(True)
    
    plotx ( 2 , Wave_Power , ytitle='Frequency (Hz)', ylog=logfreq , yrange=[freq_min, freq_max] , zlog=1, zrange=[power_min , power_max], ztitle='Wave Intensity!C(nT!U2!N/Hz)' )#, title = 'Polarization parameters for RBSP S/C-'+SC_upper+' - '+start_date+'T'+str(start_hour))
    plotx ( 3 , Coherency , ylog=logfreq , yrange=[freq_min, freq_max] , ztitle='Coherency', zlog=0, zrange=[0,1] )
    plotx ( 4 , Angle_Normal , ylog=logfreq , yrange=[freq_min, freq_max] , ztitle='Wave-Normal!CRelative to |B|', zrange=[0, 90])
    plotx ( 5 , Ellipticity , ylog=logfreq , yrange=[freq_min, freq_max] , zrange=[-1 , 1], ztitle='Ellipticity!CRH               LH')#, ztitle='              Ellipticity!C!BRight                         Left!C!BHand                       Hand!N' )
    
    monitor.setProgressMessage('Tweaking Plots')
    waitUntilIdle()
    
    dom.plots[0].xaxis.drawTickLabels = 0
    dom.plots[0].controller.dasColorBar.setFillColor(background_grey)
    dom.plots[0].setDisplayLegend(True)
    dom.plots[0].setLegendPosition(OutsideNE)
    dom.plots[0].xaxis.setRange(datumRange(tr))
    
    dom.plots[1].xaxis.drawTickLabels = 0
    dom.plots[1].displayTitle = 0
    dom.plots[1].setColortable(APL_RAINBOW_BLACK0)
    dom.plots[1].controller.dasColorBar.setFillColor(background_grey)
    dom.plots[1].xaxis.setRange(datumRange(tr))
    dom.plotElements[2].style.setRebinMethod(nearestNeighbor)
    
    dom.plots[2].xaxis.drawTickLabels = 0
    dom.plots[2].displayTitle = 0
    dom.plots[2].setColortable(GRAYSCALE)
    dom.plots[2].controller.dasColorBar.setFillColor(background_grey)
    dom.plots[2].xaxis.setRange(datumRange(tr))
    dom.plotElements[3].style.setRebinMethod(nearestNeighbor)
    
    dom.plots[3].xaxis.drawTickLabels = 0
    dom.plots[3].displayTitle = 0
    dom.plots[3].setColortable(INVERSE_GRAYSCALE)
    dom.plots[3].controller.dasColorBar.setFillColor(background_grey)
    dom.plots[3].xaxis.setRange(datumRange(tr))
    dom.plotElements[4].style.setRebinMethod(nearestNeighbor)
    
    dom.plots[4].displayTitle = 0
    dom.plots[4].setColortable(BLUE_WHITE_RED_WEDGE)
    dom.plots[4].controller.dasColorBar.setFillColor(background_grey)
    dom.plots[4].xaxis.setRange(datumRange(tr))
    dom.plotElements[5].style.setRebinMethod(nearestNeighbor)
    #dom.plots[4].ticksURI = 'vap+das2server:http://emfisis.physics.uiowa.edu/das/das2Server?dataset=rbsp/ephemeris'+SPACECRAFT+'.dsdf&timerange='+str(starttitle)+' through '+str(endtitle)+'&interval=60'
    
    waitUntilIdle()
    fixLayout()
    
    dom.plots[0].controller.dasPlot.row.ptMaximum = 10 #closes in gaps between windows after "Fix Layout" to be a little more compact
    dom.plots[1].controller.dasPlot.row.ptMaximum = 10
    dom.plots[2].controller.dasPlot.row.ptMaximum = 10
    dom.plots[3].controller.dasPlot.row.ptMaximum = 10
    dom.plots[4].controller.dasPlot.row.ptMaximum = 10
    
    dom.controller.bind( dom.plots[2].yaxis, dom.plots[2].yaxis.PROP_RANGE,  dom.plots[1].yaxis, dom.plots[1].yaxis.PROP_RANGE ) #adds binding along frequency axis between plots
    dom.controller.bind( dom.plots[3].yaxis, dom.plots[3].yaxis.PROP_RANGE,  dom.plots[1].yaxis, dom.plots[1].yaxis.PROP_RANGE )
    dom.controller.bind( dom.plots[4].yaxis, dom.plots[4].yaxis.PROP_RANGE,  dom.plots[1].yaxis, dom.plots[1].yaxis.PROP_RANGE )
    
    dom.controller.bind( dom.plots[0].xaxis, dom.plots[0].xaxis.PROP_RANGE,  dom.plots[1].xaxis, dom.plots[1].xaxis.PROP_RANGE ) #adds binding along time axis between plots
    dom.controller.bind( dom.plots[0].xaxis, dom.plots[0].xaxis.PROP_RANGE,  dom.plots[2].xaxis, dom.plots[2].xaxis.PROP_RANGE )
    dom.controller.bind( dom.plots[0].xaxis, dom.plots[0].xaxis.PROP_RANGE,  dom.plots[3].xaxis, dom.plots[3].xaxis.PROP_RANGE )
    dom.controller.bind( dom.plots[0].xaxis, dom.plots[0].xaxis.PROP_RANGE,  dom.plots[4].xaxis, dom.plots[4].xaxis.PROP_RANGE )

    waitUntilIdle()
    dom.plots[4].xaxis.setRange(datumRange(tr))
    
    # ###
    # ### SAVE PLOT
    # ###
    
    waitUntilIdle()
    #writeToPng(output_dir+'PSP_Polarization_'+dds[ind][0:8]+'_'+dds[ind][-5:-3]+dds[ind][-2:]+'-'+dds[ind+1][-5:-3]+dds[ind+1][-2:]+'.png')

    #stop


    # ###
    # ### WRITE STUFF
    # ###
    
    if writeStuff == True:
        
        monitor.setProgressMessage('Writing to File')
        
        Btime.putProperty(QDataSet.NAME,'Bfield_time')
        fft_time.putProperty(QDataSet.NAME,'FFT_time')
        frequency_axis.putProperty(QDataSet.NAME,'Frequencies')
        
        tempOutputFile = 'C:/Users/Kristoff/Desktop/TEMP_polarization'#.cdf'
        b_wna = bundle(Bp, Bq, Bn)
        b_wna.putProperty(QDataSet.NAME,'Bfield_wna')
        b_wna.putProperty(QDataSet.TITLE,'Magnetic Field in wave-normal coordinates')
        b_wna.putProperty(QDataSet.VALID_MIN,-1E10)
        b_wna.putProperty(QDataSet.VALID_MAX, 1E10)
        b_wna.putProperty(QDataSet.DEPEND_0, Btime)
        
        failedToWrite = True
        write_fail_counter = 0
        while failedToWrite == True:
            try:
                formatDataSet(b_wna,tempOutputFile+'.cdf')
                failedToWrite = False
            except:
                write_fail_counter+=1
                tempOutputFile = tempOutputFile+str(write_fail_counter)
        tempOutputFile = tempOutputFile+'.cdf'
        
        Coherency.putProperty(QDataSet.NAME,'Coherency')
        Coherency.putProperty(QDataSet.VALID_MIN,0)
        Coherency.putProperty(QDataSet.VALID_MAX,1)
        Ellipticity.putProperty(QDataSet.NAME,'Ellipticity')
        Ellipticity.putProperty(QDataSet.VALID_MIN,-1)
        Ellipticity.putProperty(QDataSet.VALID_MAX,1)
        Angle_Normal.putProperty(QDataSet.NAME,'Angle_Normal')
        Angle_Normal.putProperty(QDataSet.VALID_MIN,0)
        Angle_Normal.putProperty(QDataSet.VALID_MAX,90)
        Power_perp.putProperty(QDataSet.NAME,'Power_Perp')
        Power_perp.putProperty(QDataSet.UNITS,Units.lookupUnits('nT!U2!N/Hz'))
        Power_perp.putProperty(QDataSet.VALID_MIN,0)
        Power_perp.putProperty(QDataSet.VALID_MAX,1E10)
        Power_par.putProperty(QDataSet.NAME,'Power_Par')
        Power_par.putProperty(QDataSet.UNITS,Units.lookupUnits('nT!U2!N/Hz'))
        Power_par.putProperty(QDataSet.VALID_MIN,0)
        Power_par.putProperty(QDataSet.VALID_MAX,1E10)
        
        putProps([Coherency, Ellipticity, Angle_Normal, Power_perp, Power_par] , QDataSet.DEPEND_0 , fft_time )
        putProps([Coherency, Ellipticity, Angle_Normal, Power_perp, Power_par] , QDataSet.DEPEND_1 , frequency_axis )
        
        formatDataSet(Power_perp,tempOutputFile+'?append=T')
        formatDataSet(Power_par,tempOutputFile+'?append=T')
        formatDataSet(Coherency,tempOutputFile+'?append=T')
        formatDataSet(Ellipticity,tempOutputFile+'?append=T')
        formatDataSet(Angle_Normal,tempOutputFile+'?append=T')

monitor.finished()


