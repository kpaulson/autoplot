#randomSeed(30)
generatingTotalErrorMap = False
generatingDeltaPlusMinusMaps = True
randomMapGeneration = False

length = 600000#0         # Number of points in each maxwellian distributions
numberIterations = 20     # Number of times to iterate each set slope and anisotropy measurement in TotalErrorMap
pauseAndPlotCounter = 50  # Number of points to run through before generating each plot

angleMin = 0
angleMax = 180 #90
angleBinNumber = 120 #40       # Number of bins in incident mag angle space

anisotropyMin = 0.01
anisotropyMax = 30
anisotropyBinNumber = 50 #30  # Number of bins in anisotropy space (TODO: fix the rebin method to use log space)

timeToStopProcessing = '2024-06-29 21:00'   # Time in UT until which the process will run and aggregate data before writing the result

magSlopes = linspace(angleMin,angleMax,angleBinNumber*5)
magSlopes.putProperty(QDataSet.UNITS, Units.degrees)
anisotropyList = logspace(anisotropyMin,anisotropyMax,anisotropyBinNumber*5)



aniso = 0.5
theta = 40
slope = toRadians(theta)


def get_os_version():
    '''
    Basic subprocess that should print out the operating system version. Mostly helpful
    for scripts looking for files in a different directory structure on windows vs mac.
    Easiest application:
        print get_os_version().split()[0]
    '''
    import sys
    ver = sys.platform.lower()
    if ver.startswith('java'):
        import java.lang
        ver = java.lang.System.getProperty("os.name").lower()
    return ver
       
OS = get_os_version().split()[0]
if OS == 'mac' or OS == 'linux':
    googleDrive_path = '/home/kpaulson/MyDrive/'
elif OS == 'windows':
    #googleDrive_path = '/Users/kpaulson/GoogleDrive/'
    googleDrive_path = 'G:/My Drive/'


from org.apache.commons.math.optimization.fitting import CurveFitter
from org.apache.commons.math.optimization.fitting import ParametricRealFunction
from org.apache.commons.math.optimization.general import LevenbergMarquardtOptimizer

class LinFit(ParametricRealFunction):
    def value(self, x, params):
        a = params[0]
        b = params[1]
        return (a*x + b)
    def gradient(self, x, params):
        a = params[0]
        b = params[1]
        return [x,1]

def deltaPlusMinusCalculator(counter, length, slope, aniso, deltaPlus, deltaMinus, deltaPlus_dep0, deltaPlus_dep1, deltaMinus_dep0, deltaMinus_dep1):
    p1 = randomn(long(rand(1)[0]*1E6),length)
    p2 = randomn(long(rand(1)[0]*1E6),length)*aniso
    
    Nz = cos(slope)
    Nx = sin(slope)
    
    p1p2_hist = histogram2d(p1*cos(slope)-p2*sin(slope),p2*cos(slope)+p1*sin(slope),[70,70],dataset([-5,5]),dataset([-5,5]))\
    
    peaks = None
    peaks1 = None
    peaks2 = None
    for i in xrange(len(p1p2_hist)):
        temp_slice_peak_dep0 = p1p2_hist[i,:][imax(slice0(p1p2_hist,i))]
        temp_slice_peak_dep1 = p1p2_hist.property(QDataSet.DEPEND_1)[imax(slice0(p1p2_hist,i))]
        
        peaks1 = concatenate(peaks1,temp_slice_peak_dep0)
        peaks2 = concatenate(peaks2,temp_slice_peak_dep1)
        
            
    inputGuessParams = [0.5,0.5]
    f = LinFit()
    ftr_chi = CurveFitter(LevenbergMarquardtOptimizer())
    peaks1 = normalize(peaks1)
    
    for i in xrange(len(p1p2_hist.property(QDataSet.DEPEND_0))):
        ftr_chi.addObservedPoint(float(peaks1[i]),float(p1p2_hist.property(QDataSet.DEPEND_0)[i]),float(peaks2[i]))
        #ftr_chi.addObservedPoint(float(p1p2_hist.property(QDataSet.DEPEND_0)[i]),float(peaks2[i]))#,float(ones(len((peaks1)))[i]))
        
    result_chi = ftr_chi.fit(f,inputGuessParams)
       
    
    
    chiline = result_chi[0]
    #print 'chiline:',chiline
    #print result_chi[1] 
    
    
    epsilon_chi =  - chiline / ( (chiline*(1 - Nz**2)) + Nz*Nx )
    
    phi = atan(chiline)
    #print 'ecc:',(tan((slope - phi)/slope))
    
    #print '1/epsilon:',1./sqrt(epsilon_chi+1)
    #print 'measured_anisotropy:',sqrt(epsilon_chi+1)
    #print 'input_anisotropy:',aniso
    
    anisotropyDifference = sqrt(epsilon_chi+1) - aniso
    #print 'anisotropy difference:',anisotropyDifference
    #print 'toDegrees(slope):',toDegrees(slope)
    #print 'sqrt(epsilon_chi+1):',sqrt(epsilon_chi+1)
    if le(anisotropyDifference.value(),0):
        deltaPlus_dep0 = concatenate(deltaPlus_dep0,toDegrees(slope))
        deltaPlus_dep1 = concatenate(deltaPlus_dep1,sqrt(epsilon_chi+1))
        deltaPlus = concatenate( deltaPlus , -anisotropyDifference )
        #deltaPlus.putProperty(QDataSet.DEPEND_0,deltaPlus_dep0)
        #deltaPlus.putProperty(QDataSet.DEPEND_1,deltaPlus_dep1)
    else:
        deltaMinus_dep0 = concatenate(deltaMinus_dep0,toDegrees(slope))
        deltaMinus_dep1 = concatenate(deltaMinus_dep1,sqrt(epsilon_chi+1))
        deltaMinus = concatenate( deltaMinus , anisotropyDifference )
        #deltaMinus.putProperty(QDataSet.DEPEND_0,deltaMinus_dep0)
        #deltaMinus.putProperty(QDataSet.DEPEND_1,deltaMinus_dep1)
    counter     = counter+1  
    #print 'deltaPlus:',deltaPlus
    #print 'deltaMinus:',deltaMinus
    #print 'deltaPlus_dep0:',deltaPlus_dep0
    #print 'deltaPlus_dep1:',deltaPlus_dep1
    #print 'deltaMinus_dep0:',deltaMinus_dep0
    #print 'deltaMinus_dep1:',deltaMinus_dep1
    
    #print '    ****'
    return(counter, deltaPlus, deltaMinus, deltaPlus_dep0, deltaPlus_dep1, deltaMinus_dep0, deltaMinus_dep1)
    
def intermittentPlotter(deltaPlus, deltaMinus, magSlopes, anisotropyList):
    
    deltaPlus.putProperty(QDataSet.VALID_MIN,0)
    deltaPlus.putProperty(QDataSet.VALID_MAX,1E10)
    deltaMinus.putProperty(QDataSet.VALID_MIN,0)
    deltaMinus.putProperty(QDataSet.VALID_MAX,1E10)
    
    #plot(0,link(deltaPlus_dep0,deltaPlus_dep1,deltaPlus),renderType='spectrogram',colorTable='apl_rainbow_white0',ytitle='Anisotropy DELTA_PLUS',yrange=[anisotropyMin,anisotropyMax],ylog=True,zrange=[1E-4,1E1],zlog=True)
    #plot(1,link(deltaMinus_dep0,deltaMinus_dep1,deltaMinus),xtitle='Incident MAG Angle',renderType='spectrogram',colorTable='apl_rainbow_white0',ytitle='Anisotropy DELTA_MINUS',yrange=[anisotropyMin,anisotropyMax],ylog=True,zrange=[1E-4,1E1],zlog=True)
    
    deltaPlusRebin  = rebin(link(deltaPlus_dep0,deltaPlus_dep1,deltaPlus),magSlopes,anisotropyList)
    deltaMinusRebin = rebin(link(deltaMinus_dep0,deltaMinus_dep1,deltaMinus),magSlopes,anisotropyList)
    plot(0,deltaPlusRebin,colorTable='apl_rainbow_white0',ytitle='Anisotropy DELTA_PLUS',yrange=[anisotropyMin,anisotropyMax],ylog=True,zrange=[1E-4,1E1],zlog=True)
    plot(1,deltaMinusRebin,xtitle='Incident MAG Angle',colorTable='apl_rainbow_white0',ytitle='Anisotropy DELTA_MINUS',yrange=[anisotropyMin,anisotropyMax],ylog=True,zrange=[1E-4,1E1],zlog=True)

    outputMap = outputDirectory+'TEMP_Anisotropy_DELTA_PLUS-MINUS.cdf'
    mkdir(outputDirectory)
    formatDataSet( link(deltaPlus_dep0,deltaPlus_dep1,deltaPlus) , outputMap )
    formatDataSet( link(deltaMinus_dep0,deltaMinus_dep1,-deltaMinus) , outputMap+'?append=T' )
    formatDataSet( deltaPlusRebin  , outputMap+'?append=T' )
    formatDataSet( deltaMinusRebin , outputMap+'?append=T' )

#############################
#############################
#############################
#############################

outputMagSlopes              = None
outputAnisotropiesInput      = None
outputAnisotropiesMeasured   = None
chiSquaredMap                   = None
outputMagSlopesMap              = None
outputAnisotropiesInputMap      = None
outputAnisotropiesMeasuredMap   = None

deltaPlus              = None
deltaPlus_dep0         = None
deltaPlus_dep1         = None
deltaMinus             = None
deltaMinus_dep0        = None
deltaMinus_dep1        = None

monitor.started()
print '         *               *             *                        SCRIPT STARTING               *            *           *'

counter = 0
if generatingTotalErrorMap == True:
    monitor.setTaskSize(len(magSlopes)*len(anisotropyList)*numberIterations)
    for angle in magSlopes:
        slope = toRadians(angle)
        
        for anisotropy in anisotropyList:
            aniso = anisotropy
            
            clusterUncertainty               = None
            temp_outputAnisotropiesMeasured  = None
            iteration = 0
            while iteration < numberIterations:
                monitor.setTaskProgress(counter)
                try:
                    (counter, deltaPlus, deltaMinus, deltaPlus_dep0, deltaPlus_dep1, deltaMinus_dep0, deltaMinus_dep1) = deltaPlusMinusCalculator(counter, length, slope, aniso, deltaPlus, deltaMinus, deltaPlus_dep0, deltaPlus_dep1, deltaMinus_dep0, deltaMinus_dep1)
                except:
                    continue
                
                
    
                outputMagSlopes = concatenate(outputMagSlopes,angle)
                outputAnisotropiesInput = concatenate(outputAnisotropiesInput,aniso)
                outputAnisotropiesMeasured = concatenate(outputAnisotropiesMeasured,sqrt(epsilon_chi+1))
                temp_outputAnisotropiesMeasured = concatenate(temp_outputAnisotropiesMeasured,sqrt(epsilon_chi+1))
                temp_outputAnisotropiesMeasured.putProperty(QDataSet.VALID_MIN,0)
                temp_outputAnisotropiesMeasured.putProperty(QDataSet.VALID_MAX,1E10)
                
                iteration   = iteration+1  
                counter     = counter+1  
                
            r=where(valid(temp_outputAnisotropiesMeasured))
            chiSquared = total((temp_outputAnisotropiesMeasured[r]-aniso)**2/aniso)/numberIterations
            chiSquaredMap = concatenate(chiSquaredMap,chiSquared)
            outputMagSlopesMap = concatenate(outputMagSlopesMap,angle)
            outputAnisotropiesInputMap = concatenate(outputAnisotropiesInputMap,aniso)
    
    
    ##setLayoutOverplot(5)
    #plot(0,p1p2_hist,colorTable='apl_rainbow_white0',zlog=True,zrange=[1E-2,1E6])
    #plot(1,p1p2_hist.property(QDataSet.DEPEND_0),peaks2,renderType='scatter',symbolSize=7,color='black')
    #
    #line = p1p2_hist.property(QDataSet.DEPEND_0)*tan(slope)
    #plot(2,p1p2_hist.property(QDataSet.DEPEND_0),line,color='red',xrange=[-5,5],yrange=[-5,5],xtitle='Vz',ytitle='Vx',lineWidth=4)
    #plot(3,p1p2_hist.property(QDataSet.DEPEND_0),p1p2_hist.property(QDataSet.DEPEND_0)*result_chi[0],color='blue',lineWidth=4)
    
    outputAnisotropiesMeasured.putProperty(QDataSet.VALID_MIN,0)
    outputAnisotropiesMeasured.putProperty(QDataSet.VALID_MAX,1E10)
    plot(outputAnisotropiesMeasured)
    
    #plot(5,outputMagSlopes,outputAnisotropiesMeasured,outputAnisotropiesMeasured/outputAnisotropiesInput)
    plot(0,outputMagSlopes,outputAnisotropiesMeasured,renderType='scatter',xlog=False,ylog=True,xrange=[-1,91],yrange=[0.08,11])
    plot(1,outputMagSlopesMap,outputAnisotropiesInputMap,chiSquaredMap,renderType='colorScatter',xlog=False,ylog=True,xrange=[-1,91],yrange=[0.08,11])

            
elif generatingDeltaPlusMinusMaps:
    #monitor.setTaskSize(numberOfPoints)
    monitor.setTaskSize(len(magSlopes)*len(anisotropyList)*numberIterations)
    monitor.setLabel('Generating Uncertainty Maps')   
    outputDirectory = googleDrive_path+'Research/PSP/SPC/SPC_Anisotropy/Anisotropy_Files/UncertaintyMaps/'
    #while counter <= numberOfPoints:
    #while lt(TimeUtil.now(),TimeUtil.parseTime('2019-06-25 13:00')):
    while lt(TimeUtil.now(),datum(timeToStopProcessing)):
        if randomMapGeneration:
            randAngle = (angleMin + (angleMax-angleMin) * rand(1))
            randAnisotropy = 10.**(log10(anisotropyMin) + (log10(anisotropyMax)-log10(anisotropyMin)) * rand(1))
            
            slope = toRadians(randAngle)[0]
            aniso = randAnisotropy[0]
        
            monitor.setTaskProgress(counter)
            try:
                (counter, deltaPlus, deltaMinus, deltaPlus_dep0, deltaPlus_dep1, deltaMinus_dep0, deltaMinus_dep1) = deltaPlusMinusCalculator(counter, length, slope, aniso, deltaPlus, deltaMinus, deltaPlus_dep0, deltaPlus_dep1, deltaMinus_dep0, deltaMinus_dep1)
            
                
            except:
                counter     = counter+1  
                continue
                
            if mod(counter,pauseAndPlotCounter) == 0 :     
                monitor.setProgressMessage('Remaining: '+str(datum(timeToStopProcessing) - TimeUtil.now()))    
                intermittentPlotter(deltaPlus, deltaMinus, magSlopes, anisotropyList)
                
        elif not randomMapGeneration:
            for angle in magSlopes:
                slope = toRadians(angle)
                for aniso in anisotropyList:
                    monitor.setTaskProgress(counter)
                    # if True:
                    try:
                        (counter, deltaPlus, deltaMinus, deltaPlus_dep0, deltaPlus_dep1, deltaMinus_dep0, deltaMinus_dep1) = deltaPlusMinusCalculator(counter, length, slope, aniso, deltaPlus, deltaMinus, deltaPlus_dep0, deltaPlus_dep1, deltaMinus_dep0, deltaMinus_dep1)
                    except:
                        counter     = counter+1  
                        continue
                    
                    if mod(counter,pauseAndPlotCounter) == 0 :     
                        monitor.setProgressMessage('Remaining: '+str(datum(timeToStopProcessing) - TimeUtil.now()))    
                        intermittentPlotter(deltaPlus, deltaMinus, magSlopes, anisotropyList)
            
            deltaPlus.putProperty(QDataSet.DEPEND_0,deltaPlus_dep0)
            deltaPlus.putProperty(QDataSet.DEPEND_1,deltaPlus_dep1)
            deltaMinus.putProperty(QDataSet.DEPEND_0,deltaMinus_dep0)
            deltaMinus.putProperty(QDataSet.DEPEND_1,deltaMinus_dep1)
            # deltaPlus.putProperty(QDataSet.VALID_MIN,0)
            # deltaPlus.putProperty(QDataSet.VALID_MAX,1E10)
            # deltaMinus.putProperty(QDataSet.VALID_MIN,0)
            # deltaMinus.putProperty(QDataSet.VALID_MAX,1E10)
            
      
    deltaPlus.putProperty(QDataSet.VALID_MIN,0)
    deltaPlus.putProperty(QDataSet.VALID_MAX,1E10)
    deltaPlus.putProperty(QDataSet.NAME,'Anisotropy DELTA_PLUS')
    deltaMinus.putProperty(QDataSet.VALID_MIN,0)
    deltaMinus.putProperty(QDataSet.VALID_MAX,1E10)
    deltaMinus.putProperty(QDataSet.NAME,'Anisotropy DELTA_MINUS')
    #plot(0,link(deltaPlus_dep0,deltaPlus_dep1,deltaPlus),renderType='spectrogram',colorTable='apl_rainbow_white0',ytitle='Anisotropy DELTA_PLUS',yrange=[anisotropyMin,anisotropyMax],ylog=True,zrange=[1E-4,1E1],zlog=True)
    #plot(1,link(deltaMinus_dep0,deltaMinus_dep1,deltaMinus),xtitle='Incident MAG Angle',renderType='spectrogram',colorTable='apl_rainbow_white0',ytitle='Anisotropy DELTA_MINUS',yrange=[anisotropyMin,anisotropyMax],ylog=True,zrange=[1E-4,1E1],zlog=True)
    
    
    deltaPlusRebin  = rebin(link(deltaPlus_dep0,deltaPlus_dep1,deltaPlus),magSlopes,anisotropyList)
    deltaMinusRebin = rebin(link(deltaMinus_dep0,deltaMinus_dep1,deltaMinus),magSlopes,anisotropyList)
    plot(0,link(deltaPlus_dep0,deltaPlus_dep1,deltaPlus),renderType='spectrogram',colorTable='apl_rainbow_white0',ytitle='Anisotropy DELTA_PLUS',yrange=[anisotropyMin,anisotropyMax],ylog=True,zrange=[1E-4,1E1],zlog=True)
    plot(1,link(deltaMinus_dep0,deltaMinus_dep1,deltaMinus),xtitle='Incident MAG Angle',renderType='spectrogram',colorTable='apl_rainbow_white0',ytitle='Anisotropy DELTA_MINUS',yrange=[anisotropyMin,anisotropyMax],ylog=True,zrange=[1E-4,1E1],zlog=True)
        
  
    outputMap = outputDirectory+'Anisotropy_DELTA_PLUS-MINUS_newest.cdf'
    formatDataSet( link(deltaPlus_dep0,deltaPlus_dep1,deltaPlus) , outputMap )
    formatDataSet( link(deltaMinus_dep0,deltaMinus_dep1,-deltaMinus) , outputMap+'?append=T' )
       
        
    deltaPlusRebin.putProperty(QDataSet.VALID_MIN,0)
    deltaPlusRebin.putProperty(QDataSet.VALID_MAX,1E10)
    deltaPlusRebin.putProperty(QDataSet.NAME,'UncertaintyMap DELTA_PLUS')
    deltaMinusRebin.putProperty(QDataSet.VALID_MIN,-1E10)
    deltaMinusRebin.putProperty(QDataSet.VALID_MAX,0)
    deltaMinusRebin.putProperty(QDataSet.NAME,'UncertaintyMap DELTA_MINUS')
    
    formatDataSet( deltaPlusRebin  , outputMap+'?append=T' )
    formatDataSet( deltaMinusRebin , outputMap+'?append=T' )
    
monitor.finished()

###############################
###############################
###############################
