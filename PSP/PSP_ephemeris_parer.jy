timerange = getParam('timerange', '2018-11-02', 'timerange of data to add to PSP ephemeris file')
checkPrevious = getParam('checkPrevious', 'T', 'check for previous instances of output file and skip day if present', ['T', 'F'])
cfa_sweap_spc_L3_file = 'http://w3sweap.cfa.harvard.edu/data/sci/sweap/spc/L3/$Y/$m/spp_swp_spc_l3i_$Y$m$d_v$v.cdf'
#local_hourlyEphem_file = 'file:/C:/Users/kpaulson/GoogleDrive/Research/PSP/Ephemeris/EPHEMERIS/spp_swp_spc_hourlyephem_$Y.cdf'
local_hourlyEphem_file = 'file:/G:/My Drive/Research/PSP/Ephemeris/EPHEMERIS/spp_swp_spc_hourlyephem_$Y.cdf'

#PSP_ephem_directory = 'C:/Users/kpaulson/GoogleDrive/Research/PSP/Ephemeris/'
PSP_ephem_directory = 'G:/My Drive/Research/PSP/Ephemeris/dailyFiles/'

#inputEphemeris_txt_r_Sun = getDataSet(PSP_ephem_file_txt+'?r_Sun&depend0=time')
#inputEphemeris_txt = getDataSet(PSP_ephem_file_txt+'?rank2=r_Sun-z_HCI&depend0=time')
#time = inputEphemeris_txt.property(QDataSet.DEPEND_0)

if checkPrevious == 'T':
    checkPrevious = True
elif checkPrevious == 'F':
    checkPrevious = False

rsun = 696340.

trs = generateTimeRanges('$Y-$m-$d',timerange)
for tr in trs:
    PSP_ephem_file_cdf = PSP_ephem_directory+'PSP_ephemeris_%s.cdf'%(tr)
    PSP_ephem_file_txt = PSP_ephem_directory+'PSP_ephemeris_%s.txt'%(tr)
    try:
        if checkPrevious == True:
            try:
                previous_file = getFile(PSP_ephem_file_cdf,None)
            except:
                pass
            if 'previous_file' in locals():
                print 'Already have data for %s'%(tr)
                break
                del(previous_file)
        
        try:
            old_sc_pos_HCI     = getDataSet(local_hourlyEphem_file+'?pos_HCI',tr)
            old_carr_latitude  = getDataSet(local_hourlyEphem_file+'?CARR_LAT',tr)
            old_carr_longitude = getDataSet(local_hourlyEphem_file+'?CARR_LON',tr)
            print 'Used local hourly file'
        except:    
            try:
                old_sc_pos_HCI     = getDataSet(cfa_sweap_spc_L3_file+'?sc_pos_HCI',tr)
                old_carr_latitude  = getDataSet(cfa_sweap_spc_L3_file+'?carr_latitude',tr)
                old_carr_longitude = getDataSet(cfa_sweap_spc_L3_file+'?carr_longitude',tr)
                spc_time = old_sc_pos_HCI.property(QDataSet.DEPEND_0)
                print 'Used sweap L3 file'
            except:
                raise noSPCDataException
                
        old_time = old_sc_pos_HCI.property(QDataSet.DEPEND_0)
        new_time = timegen(str(tr),'5 min',12*24)
        
#        already_there = where( time.ge(new_time[0]).and(time.le(new_time[-1])) )
#        everything_else = where( time.lt(new_time[0]).or(time.gt(new_time[-1])) )
#
#        if( ( len(already_there) > 2 ) ):
#            print 'Already have data for %s'%(tr)
#            raise DataAlreadyThereException
    
        (sc_pos_HCI, carr_latitude, carr_longitude) = synchronize(new_time,[old_sc_pos_HCI, old_carr_latitude, old_carr_longitude])
        
        old_to_new_timeRatio = findex(old_time, new_time)
        carr_longitude = interpolateMod(old_carr_longitude , dataset(datumRange('-180 to 180 degrees')), old_to_new_timeRatio)
    
        solar_distance = magnitude(sc_pos_HCI)/rsun
        
        solar_distance.putProperty(QDataSet.VALID_MIN,0)
        solar_distance.putProperty(QDataSet.VALID_MAX,250)
        carr_latitude.putProperty(QDataSet.VALID_MIN,-180)
        carr_latitude.putProperty(QDataSet.VALID_MAX,180)
        carr_longitude.putProperty(QDataSet.VALID_MIN,-180)
        carr_longitude.putProperty(QDataSet.VALID_MAX,180)
        
        solar_distance.putProperty(QDataSet.NAME,'r_Sun')
        carr_latitude.putProperty( QDataSet.NAME,'latitude')
        carr_longitude.putProperty(QDataSet.NAME,'longitude')
        sc_pos_HCI.putProperty(    QDataSet.NAME,'sc_pos_HCI')
        
        solar_distance.putProperty(QDataSet.LABEL,'r_Sun')
        carr_latitude.putProperty( QDataSet.LABEL,'latitude')
        carr_longitude.putProperty(QDataSet.LABEL,'longitude')
        sc_pos_HCI.putProperty(    QDataSet.LABEL,'sc_pos_HCI')
        
        solar_distance.putProperty(QDataSet.TITLE,'Distance from Sun to PSP in km')
        carr_latitude.putProperty( QDataSet.TITLE,'Carrington Latitude of PSP')
        carr_longitude.putProperty(QDataSet.TITLE,'Carrington Longitude of PSP')
        sc_pos_HCI.putProperty(    QDataSet.TITLE,'PSP position in HCI coordinates')
        
        output_ephem = bundle(solar_distance,carr_latitude,carr_longitude)
        output_ephem = bundle(output_ephem,sc_pos_HCI[:,0],sc_pos_HCI[:,1],sc_pos_HCI[:,2])
        output_ephem.putProperty(QDataSet.DEPEND_0,new_time)
        
        # This part below is left over from when I had a single Ephemeris file for the whole mission. It turned into a pain, so I have switched to daily files
#        output_ephem = concatenate(output_ephem,inputEphemeris_txt)
#        s = sort(output_ephem.property(QDataSet.DEPEND_0))
#        output_ephem = output_ephem[s]
#
#        uniqueValues = uniq(output_ephem.property(QDataSet.DEPEND_0))
#        output_ephem = output_ephem[uniqueValues]
        
        formatDataSet(output_ephem, PSP_ephem_file_txt+'?header=rich')
        #formatDataSet(output_ephem, PSP_ephem_file_cdf+'?bundle=T')
        
        formatDataSet(solar_distance, PSP_ephem_file_cdf)
        formatDataSet(carr_latitude, PSP_ephem_file_cdf+'?append=T')
        formatDataSet(carr_longitude, PSP_ephem_file_cdf+'?append=T')
        formatDataSet(sc_pos_HCI, PSP_ephem_file_cdf+'?append=T')
        
    except:
        print 'Could not write data for %s'%(tr)
        continue




