
############################################################################
##################            VARIABLES          ###########################
############################################################################
############################################################################


#timerange = getParam('timerange','2018-11-01 06:00 to 08:00','Iteration Timerange')
timerange = getParam('timerange','2019-04-01 06:00 to 09:00','Timerange over which to calculate Poynting Flux')

freq_min       = getParam('minFrequency', 0.1,  'Lower frequency bound of analysis (Hz)')
freq_max       = getParam('maxFrequency', 9.,  'Upper frequency bound of analysis (Hz)')
window         = getParam('windowWidth',  1024, 'Number of points in fft window')
slide          = getParam('slideFactor',  8,    'Reciprocal of fraction of non-overlap between neighboring windows')
trend_seconds  = getParam('trendSeconds', 30,   'Number of seconds used to identify the background magnetic field')
poynting_min   = getParam('poyntingMin',  1E-4, 'Minimum Poynting Flux value to be plotted (filters out noise)')
wave_power_min = getParam('wavePowerMin', 1E-4, 'Minimum Wave Power value in Bfield to be plotted (filters out noise)')


useLocalSubprocesses = True
useLocalFiles        = False
plotStuff            = False
writeStuff           = True
useRegularTimestamps = True

############################################################################
##################            IMPORTS            ###########################
############################################################################
############################################################################
    

import sys
try:
    if useLocalSubprocesses == True:
        raise stopLookingOnlineException
        
    ### IMPORT SUBPROCESSES
    get_OS_version = getFile( 'https://github.com/kpaulson/autoplot/blob/master/CoreSubprocesses/get_os_version.jy',monitor.getSubtaskMonitor('import get_os_version()'))
    execfile( get_OS_version.toString() )
    
    Poynting_Flux = getFile( 'https://github.com/kpaulson/autoplot/blob/master/CoreSubprocesses/Poynting_Flux.jy',monitor.getSubtaskMonitor('import Poyntingify()'))
    execfile( Poynting_Flux.toString() )
    
    Polarization_Means = getFile( 'https://github.com/kpaulson/autoplot/blob/master/CoreSubprocesses/Polarization_Means.jy',monitor.getSubtaskMonitor('import Polarize()'))
    execfile( Polarization_Means.toString() )
    
    Hanningfft = getFile( 'https://github.com/kpaulson/autoplot/blob/master/CoreSubprocesses/Hanningfft.jy',monitor.getSubtaskMonitor('import Hanningfft()'))
    execfile( Hanningfft.toString() )
    
    field_aligner = getFile( 'https://github.com/kpaulson/autoplot/blob/master/CoreSubprocesses/Field_Aligner.jy',monitor.getSubtaskMonitor('import field_aligner()'))
    execfile( field_aligner.toString() )
    
    
except:
    print 'Unable to grab subprocess from github'
    
    get_OS_version = getFile( 'C:/Users/kpaulson/Software/Autoplot/GithubScripts/CoreSubprocesses/get_os_version.jy',monitor.getSubtaskMonitor('import get_os_version()'))
    execfile( get_OS_version.toString() )
    
    Poynting_Flux = getFile( 'C:/Users/kpaulson/Software/Autoplot/GithubScripts/CoreSubprocesses/Poynting_Flux.jy',monitor.getSubtaskMonitor('import Poyntingify()'))
    execfile( Poynting_Flux.toString() )
    
    Polarization_Means = getFile( 'C:/Users/kpaulson/Software/Autoplot/GithubScripts/CoreSubprocesses/Polarization_Means.jy',monitor.getSubtaskMonitor('import Polarize()'))
    execfile( Polarization_Means.toString() )
    
    Hanningfft = getFile( 'C:/Users/kpaulson/Software/Autoplot/GithubScripts/CoreSubprocesses/Hanningfft.jy',monitor.getSubtaskMonitor('import Hanningfft()'))
    execfile( Hanningfft.toString() )
    
    field_aligner = getFile( 'C:/Users/kpaulson/Software/Autoplot/GithubScripts/CoreSubprocesses/Field_Aligner.jy',monitor.getSubtaskMonitor('import field_aligner()'))
    execfile( field_aligner.toString() )
    
    
    
    

############################################################################
##################            DEFINITIONS        ###########################
############################################################################
############################################################################
    
OS = get_os_version().split()[0]
if OS == 'mac':
    googleDrive_path = 'file:///Volumes/Macintosh HD/Volumes/GoogleDrive/My Drive/'
elif OS == 'windows':
    googleDrive_path = '/Users/kpaulson/GoogleDrive/'
    
    
if useLocalFiles == True:
    cfa_sweap_file  = googleDrive_path+'Research/Data/AutoplotCache/http/w3sweap.cfa.harvard.edu/data/sci/sweap/spc/L2/$Y/$m/spp_swp_spc_l2_$Y$m$d_v$v.cdf'
    #mag_datafile    = googleDrive_path+'Research/Data/AutoplotCache/http/w3sweap.cfa.harvard.edu/data/sci/mag/l2_draft/$Y/$m/psp_fld_l2_mag_$Y$m$d_v$v.cdf'
    mag_datafile    = googleDrive_path+'Research/Data/AutoplotCache/http/research.ssl.berkeley.edu/data/psp/data/sci/fields/l2/mag_SC/$Y/$m/psp_fld_l2_mag_SC_$Y$m$d$(H,span=6)_v$v.cdf'
    efield_datafile = googleDrive_path+'Research/Data/AutoplotCache/http/research.ssl.berkeley.edu/data/psp/data/sci/fields/l2/dfb_wf_dvdc/$Y/$m/psp_fld_l2_dfb_wf_dvdc_$Y$m$d$(H,span=6)_v01.cdf'
else:
    cfa_sweap_file  = 'http://w3sweap.cfa.harvard.edu/data/sci/sweap/spc/L2/$Y/$m/spp_swp_spc_l2_$Y$m$d_v$v.cdf'
    #mag_datafile    = 'http://w3sweap.cfa.harvard.edu/data/sci/sweap/mag/l2_draft/$Y/$m/psp_fld_l2_mag_$Y$m$d_v$v.cdf'
    mag_datafile    = 'http://research.ssl.berkeley.edu/data/psp/data/sci/fields/l2/mag_SC/$Y/$m/psp_fld_l2_mag_SC_$Y$m$d$(H,span=6)_v$v.cdf'
    efield_datafile = 'http://research.ssl.berkeley.edu/data/psp/data/sci/fields/l2/dfb_wf_dvdc/$Y/$m/psp_fld_l2_dfb_wf_dvdc_$Y$m$d$(H,span=6)_v$v.cdf'
                    
    #http://research.ssl.berkeley.edu/data/psp/data/sci/fields/l2/dfb_wf_dvdc/2018/11/psp_fld_l2_dfb_wf_dvdc_$Y$m$d$(H,span=6)_v01.cdf
    
    
############################################################################
#################            BEGIN SCRIPT        ###########################
############################################################################
############################################################################


# ###
# ### SPLIT EVERYTHING INTO 6-HOUR CHUNKS (ALA FIELDS DATA)
# ###

trs= generateTimeRanges('$Y-$m-$d $(H,span=6):00 ',timerange)
tr_titles= generateTimeRanges('$Y-$m-$d_$(H,span=6)00 ',timerange)
#dds= generateTimeRanges('$Y$m$d $(H,span=24):00 ',timerange)
monitor.started()
monitor.setLabel('PSP Wave Analysis')
monitor.setTaskSize(len(trs))

index = 0
for tr in trs:
    try:
        tr = str(tr)+' to '+str(tr+datum('6 hr'))
        if lt(datumRange(timerange).width(), datumRange(tr).width()):
            tr = timerange
            
        # ###
        # ### DOWNLOAD DATA AND INTERPOLATE
        # ###
    
        #tr = timerange
    
        mag_data = getDataSet(mag_datafile+'?psp_fld_l2_mag_SC',tr)
        efield_data = getDataSet(efield_datafile+'?psp_fld_l2_dfb_wf_dVdc_sc',tr)
    
        mag_data = trim(mag_data,tr)
        mag_time = mag_data.property(QDataSet.DEPEND_0)
    
        # This clause generates new timestamps from the most common cadence in the mag dataset
        #   (this is to avoid the issues with the fft when there are changes in time cadence)
        if useRegularTimestamps == True:
            startTime = putProperty(mag_time[0],QDataSet.NAME,None)
            endTime = putProperty(mag_time[-1],QDataSet.NAME,None)
            cadence = mode(diff(mag_time))
            timeLength = (endTime-startTime)/cadence
            new_time = timegen(str(startTime),str(cadence),int(timeLength))
            
            mag_time_to_new_time_ratio = findex(mag_time,new_time)
            mag_data = interpolate(mag_data,mag_time_to_new_time_ratio)
            mag_time = new_time
            
        Bx = mag_data[:,0]
        By = mag_data[:,1]
        Bz = mag_data[:,2]
        Btotal = magnitude(mag_data)
    
    
        efield_data = synchronize(mag_data,efield_data)
        Ex = efield_data[:,0]
        Ey = efield_data[:,1]
    
        # ###
        # ### FIND THIRD EFIELD AXIS
        # ###
    
        # Probably need to filter out bad orientation cases (ie, B purely in Bx,By so Bz->0)
        Ez = -(Ex*Bx + Ey*By)/Bz
    
        # ###
        # ### FIELD-ALIGNER
        # ###
    
        # If B~=Br=-Bz (in s/c coords), then P_hat is generally in RTN_T=sc_x direction, and Q_hat is generally in the RTN_N=-sc_y direction (out of the ecliptic plane)
        scy_x = putProperty(  zeros(len(Btotal)),QDataSet.DEPEND_0,mag_time)
        scy_y = putProperty(-1*ones(len(Btotal)),QDataSet.DEPEND_0,mag_time)
        scy_z = putProperty(  zeros(len(Btotal)),QDataSet.DEPEND_0,mag_time)
                
        ( Bn , Bp , Bq , Nx , Ny , Nz , Px , Py , Pz , Qx , Qy , Qz ) = field_aligner( Bx , By , Bz , Btotal , scy_x , scy_y , scy_z , trend_seconds )
    
    
        # ###
        # ### GENERATE FFTS FOR POLARIZATION
        # ###
            
        # These are handled in the purely field-aligned way since that is how polarization is defined
        Bn_fft_pol = Hanningfft( Bn , freq_min , freq_max , window , slide )
        Bp_fft_pol = Hanningfft( Bp , freq_min , freq_max , window , slide )
        Bq_fft_pol = Hanningfft( Bq , freq_min , freq_max , window , slide )
        Nx_pol = Nx
        Ny_pol = Ny
        Nz_pol = Nz
    
    
        # Reverse direction for positive Bz periods so that we are always looking at wave propagation relative to sun->sc direction 
        posBz = where(gt(Bz,0))
        Bn[posBz] = -Bn[posBz]
        Bp[posBz] = -Bp[posBz]
        Bq[posBz] = -Bq[posBz]
        Nx[posBz] = -Nx[posBz]
        Ny[posBz] = -Ny[posBz]
        Nz[posBz] = -Nz[posBz]
        Px[posBz] = -Px[posBz]
        Py[posBz] = -Py[posBz]
        Pz[posBz] = -Pz[posBz]
        Qx[posBz] = -Qx[posBz]
        Qy[posBz] = -Qy[posBz]
        Qz[posBz] = -Qz[posBz]
    
        En = Ex*Nx + Ey*Ny + Ex*Nz
        Ep = Ex*Px + Ey*Py + Ex*Pz
        Eq = Ex*Qx + Ey*Qy + Ex*Qz
    
    
        # ###
        # ### GENERATE FFTS FOR POYNTING
        # ###
            
        Bn_fft = Hanningfft( Bn , freq_min , freq_max , window , slide )
        Bp_fft = Hanningfft( Bp , freq_min , freq_max , window , slide )
        Bq_fft = Hanningfft( Bq , freq_min , freq_max , window , slide )
    
        En_fft = Hanningfft( En , freq_min , freq_max , window , slide )
        Ep_fft = Hanningfft( Ep , freq_min , freq_max , window , slide )
        Eq_fft = Hanningfft( Eq , freq_min , freq_max , window , slide )
    
        fft_time = Bn_fft.property(QDataSet.DEPEND_0)
        frequency_axis = Bn_fft.property(QDataSet.DEPEND_1)
    
    
        # ###
        # ### CALCULATE POLARIZATION PARAMETERS
        # ###
    
        ( Handedness , Ellipticity , Angle_Normal , Deg_Polarization , Coherency , Angle_polarization, Power_compressional, Power_perp ) = Polarize( Bn_fft_pol , Bp_fft_pol , Bq_fft_pol , Nx_pol , Ny_pol , Nz_pol , wave_power_min )
    
    
        # ###
        # ### CALCULATE POYNTING FLUX
        # ###
            
        # With reversal of -Bz above, theta is now relative to Sun->s/c line, so 0 is away from sun, 180 is towards sun
        # This makes phi=0 in the Sun's rotation direction in ecliptic, and phi=90 in the Sun's axis direction out of ecliptic
        ( Smag , Poynting_theta, Poynting_phi, Sn, Sp, Sq, TEMP_Sn, TEMP_Sp, TEMP_Sq ) = Poyntingify( Bn_fft , Bp_fft , Bq_fft , En_fft , Ep_fft , Eq_fft , poynting_min )
    
        # ###
        # ### PLOT STUFF
        # ###
            
        if plotStuff == True:
            plot(0, Smag, ytitle='Frequency (%{UNITS})', zlog=True, zrange=[1.0E-6,0.05], ztitle='Poynting Flux!C!C(%{UNITS})')  
            #plot(1, Poynting_theta) 
            #plot(2, Poynting_phi)   
            plot(1, Sn, ztitle='Sn (along B)') 
            plot(2, Sp, ztitle='Sp (~RTN!BT!N)')    
            plot(3, Sq, ztitle='Sq (~RTN!BN!N)')    
            
        # ###
        # ### WRITE STUFF
        # ###
            
        if writeStuff == True:
            waveAnalysisFiles_directory = googleDrive_path+'Research/PSP/WaveAnalysis/WaveAnalysis_Files/'
            outputFile = waveAnalysisFiles_directory+'PSP_WaveAnalysis_%s.cdf'%(tr_titles[index])
            monitor.setProgressMessage('Writing to File')
            
            mag_time.putProperty(QDataSet.NAME,'Bfield_time')
            fft_time.putProperty(QDataSet.NAME,'FFT_time')
            frequency_axis.putProperty(QDataSet.NAME,'Frequencies')
            
            formatDataSet(fft_time,outputFile)
            
            Ellipticity.putProperty(        QDataSet.NAME,'Ellipticity')
            Angle_Normal.putProperty(       QDataSet.NAME,'Wave Normal Angle')
            Coherency.putProperty(          QDataSet.NAME,'Coherency')
            Power_compressional.putProperty(QDataSet.NAME,'Bfield Power Compressional')
            Power_perp.putProperty(         QDataSet.NAME,'Bfield Power Transverse')
            Smag.putProperty(               QDataSet.NAME,'Poynting Flux Magnitude')
            Poynting_theta.putProperty(     QDataSet.NAME,'Poynting Theta')
            Poynting_phi.putProperty(       QDataSet.NAME,'Poynting Phi')
            Sn.putProperty(                 QDataSet.NAME,'Poynting Flux Parallel (away from Sun)')
            Sp.putProperty(                 QDataSet.NAME,'Poynting Flux Perpendicular (~RTN_T)')
            Sq.putProperty(                 QDataSet.NAME,'Poynting Flux Perpendicular (~RTN_N)')
            
            formatDataSet(Ellipticity        ,outputFile+'?append=T')
            formatDataSet(Angle_Normal       ,outputFile+'?append=T')
            formatDataSet(Coherency          ,outputFile+'?append=T')
            formatDataSet(Power_compressional,outputFile+'?append=T')
            formatDataSet(Power_perp         ,outputFile+'?append=T')
            formatDataSet(Smag               ,outputFile+'?append=T')
            formatDataSet(Poynting_theta     ,outputFile+'?append=T')
            formatDataSet(Poynting_phi       ,outputFile+'?append=T')
            formatDataSet(Sn                 ,outputFile+'?append=T')
            formatDataSet(Sp                 ,outputFile+'?append=T')
            formatDataSet(Sq                 ,outputFile+'?append=T')
            
        
        index = index+1
    except:
        print 'Couldn\'t Run Analysis for %s'%(str(tr_titles[index])) 
        index = index+1
        continue
        
