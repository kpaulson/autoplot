def dotProduct(tensor1,tensor2,truefalse_multiple_timesteps):
    '''
    Calculates dot product between two rank(1) or rank(2) tensors/tensorArrays.
    tensor1 and tensor2 must be of same length n. Should also be able to handle
    dot product between a matrix and tensor assuming same inner dimensionality.
    
    Input:
        tensor1 = rank1 or rank2 array ([3] or [n,3])
        tensor2 = rank1 or rank2 array ([3] or [n,3])
        tf_multiple_timesteps = boolean flag regarding whether there are multiple 
                                stacked vectors/matrices in each tensor (multiple 
                                timesteps usually) [True, False]
    Output:
        tensor1_dot_tensor2 = rank1 or rank2 array ([3] or [n,3])
    '''
    if len(tensor1) != len(tensor2):
        raise tensorsOfDifferentLengthException
    
    
    if truefalse_multiple_timesteps == False:
        if tensor1.rank() == 1 and tensor2.rank() == 1:
            tensor1_dot_tensor2 = dblarr(1)
            tensor1_dot_tensor2[0] = tensor1[0]*tensor2[0] + tensor1[1]*tensor2[1] + tensor1[2]*tensor2[2]

        if tensor1.rank() == 2 and tensor2.rank() == 1:
            tensor1_x_tensor2 = dblarr(len(tensor1),3)
            tensor1_x_tensor2[:,0] = tensor1[:,1]*tensor2[:,2] - tensor1[:,2]*tensor2[:,1]
            tensor1_x_tensor2[:,1] = tensor1[:,2]*tensor2[:,0] - tensor1[:,0]*tensor2[:,2]
            tensor1_x_tensor2[:,2] = tensor1[:,0]*tensor2[:,1] - tensor1[:,1]*tensor2[:,0]
            
    elif truefalse_multiple_timesteps == False:
        if tensor1.rank() == 1 and tensor2.rank() == 1:
            tensor1_dot_tensor2 = dblarr(len(tensor1),1)
            tensor1_dot_tensor2[:,0] = tensor1[:,0]*tensor2[:,0] + tensor1[:,1]*tensor2[:,1] + tensor1[:,2]*tensor2[:,2]

        if tensor1.rank() == 2 and tensor2.rank() == 1:
            tensor1_x_tensor2 = dblarr(len(tensor1),3)
            tensor1_x_tensor2[:,0] = tensor1[:,1]*tensor2[:,2] - tensor1[:,2]*tensor2[:,1]
            tensor1_x_tensor2[:,1] = tensor1[:,2]*tensor2[:,0] - tensor1[:,0]*tensor2[:,2]
            tensor1_x_tensor2[:,2] = tensor1[:,0]*tensor2[:,1] - tensor1[:,1]*tensor2[:,0]
    
    return(tensor1_dot_tensor2)
    