




#timerange = '2018-10-25'
#timerange = '2018-11-01 to 2018-11-05'
timerange = getParam('timerange','2018-11-04','Timerange over which to isolate and total EMIC wave power')

outputDirectory = 'file:///home/kpaulson/Research/PSP/Wave_Polarization/WavePower/'
outputFile = outputDirectory+'PSP_wavePower_%s.cdf'%(timerange)

polarization_file = 'file:///home/kpaulson/Research/PSP/Wave_Polarization/PSP_Polarization_$Y$m$d_$(H,span=6)00.cdf'
#polarization_file = 'C:/Users/krist/Downloads/PSP_Polarization_$Y$m$d_0000.cdf'

scrollingPlots = True
plotStuff = True

writeStuff = True


totalPowerLeft  = None
totalPowerRight = None
totalpower_perp = None


if scrollingPlots == True:
    dds= generateTimeRanges('$Y$m$d $(H,span=6):00 ',timerange)
    #dds= generateTimeRanges('$Y$m$d $(H,span=24):00 ',timerange)
    monitor.started()
    monitor.setLabel('PSP Polarization')
    monitor.setTaskSize(len(dds))
    
    for ind in xrange(len(dds)):
        monitor.setTaskProgress(ind)
        monitor.setProgressMessage('Downloading Data')
        
        if ind < len(dds)-1:
            if dds[ind][9:11] == 18:
                tr = dds[ind]+' to '+str( datum(dds[ind]) + dataset('6hr') )
            else:
                tr = dds[ind]+' to '+dds[ind+1]


            power_perp   = getDataSet(polarization_file+'?Power_Perp',tr)
            coherency    = getDataSet(polarization_file+'?Coherency',tr)
            ellipticity  = getDataSet(polarization_file+'?Ellipticity',tr)
            waveNormal = getDataSet(polarization_file+'?Angle_Normal',tr)
            
            
            bottomTrimIndex            = 20
            min_coherency              = 0.8
            max_waveNormal             = 25
            maxLefthandedness          = -0.8
            minRighthandedness         = 0.8
            timeAxis_smoothpoints      = 2
            frequencyAxis_smoothpoints = 20
            
            
            power_perp  = power_perp[:,bottomTrimIndex:]
            coherency   = coherency[:,bottomTrimIndex:]
            ellipticity = ellipticity[:,bottomTrimIndex:]
            waveNormal = waveNormal[:,bottomTrimIndex:]
            
            
            timeAxis = power_perp.property(QDataSet.DEPEND_0)
            frequencyAxis = power_perp.property(QDataSet.DEPEND_1)
            
            
            timeAxis_smoothpoints = 2
            frequencyAxis_smoothpoints = 20
            
            coherency_smoothedFrequency  = smooth2d(coherency,timeAxis_smoothpoints,frequencyAxis_smoothpoints)
            waveNormal_smoothedFrequency = smooth2d(waveNormal,timeAxis_smoothpoints,frequencyAxis_smoothpoints)
            ellipticity_smoothedFrequency = smooth2d(ellipticity,timeAxis_smoothpoints,frequencyAxis_smoothpoints)
            
            #plot(0,ellipticity)
            #plot(1,coherency_smoothedFrequency)
            
            subset_incoherent = where(le(coherency_smoothedFrequency,min_coherency))
            subset_abbynormal = where(ge(waveNormal_smoothedFrequency,max_waveNormal))
            subset_fill = where(eq(valid(coherency_smoothedFrequency),0))
            subset_badWave = where(le(coherency_smoothedFrequency,min_coherency).or(ge(waveNormal_smoothedFrequency,max_waveNormal)))
            #subset_badWave = where(le(coherency_smoothedFrequency,min_coherency).or(ge(waveNormal_smoothedFrequency,max_waveNormal)).or(eq(valid(coherency_smoothedFrequency),0)))
            #subset_badWave = where(le(coherency,min_coherency).or(ge(waveNormal,max_waveNormal)))
            
            power_perp[subset_incoherent] = 0
            power_perp[subset_abbynormal] = 0
            #power_perp[subset_badWave] = 0
            
            # This next pass to exclude points where coherency is fill should be rolled into the where statement above, but the or thing doesn't seem to work right.
            power_perp[subset_fill] = 0
            
            notLeftHanded  = where(ge(ellipticity_smoothedFrequency,maxLefthandedness))
            notRightHanded = where(le(ellipticity_smoothedFrequency,minRighthandedness))
            #ellipticity[notLeftHanded] = 0
            #plot(ellipticity)
            #stop
            
            power_perp_left = copy(power_perp)
            power_perp_left[notLeftHanded] = 0
            power_perp_right = copy(power_perp)
            power_perp_right[notRightHanded] = 0
            
            
            Power      = total(power_perp,1)
            PowerLeft  = total(power_perp_left,1)
            PowerRight = total(power_perp_right,1)
            #bindle = bundle(totalPowerRight,totalPowerLeft,totalPower)
            #plot(3,timeAxis,bindle,ylog=True)
            
            totalPowerLeft  = append(totalPowerLeft,PowerLeft)
            totalPowerRight = append(totalPowerRight,PowerRight)
            totalpower_perp = append(totalpower_perp,power_perp)
            
if plotStuff == True:
    setLayoutOverplot(2)
    plot(0,totalPowerLeft,ylog=True,color='blue')
    plot(1,totalPowerRight,ylog=True,color='red')

    plot(2,totalpower_perp,zlog=True)

if writeStuff == True:
    timeAxis.putProperty(QDataSet.NAME,'epoch')
    totalPowerLeft.putProperty(QDataSet.NAME,'wavePower_LH')
    totalPowerLeft.putProperty(QDataSet.TITLE,'EMIC Wave Power observed by PSP with Ellipticity below %s (Left-handed)'%(maxLefthandedness))
    totalPowerRight.putProperty(QDataSet.NAME,'wavePower_RH')
    totalPowerRight.putProperty(QDataSet.TITLE,'EMIC Wave Power observed by PSP with Ellipticity above %s (Right-handed)'%(minRighthandedness))
    
    formatDataSet(timeAxis,outputFile)
    formatDataSet(totalPowerLeft,outputFile+'?append=T')
    formatDataSet(totalPowerRight,outputFile+'?append=T')



