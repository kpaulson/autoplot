def doGaussianFit(ds,peakEstimates,single_or_double,chi_squared_critical_min,maxAttempts):
    #sleep(300)
    '''Subroutine to fit dataset to single or double gaussian peaks.
    Inputs:
        ds                         = rank1 dataset to be fit
        peakEstimates              = two-value list for the estimates of the two gaussian peaks (first value taken for single peak fitting)
        single_or_double           = str flag ['single','double'] as to whether to fit one or two peaks
        inputGuessParams           = rank1 list of 4 or 8 guessed parameters describing ideal gaussian
        chi_squared_critical_min   = minimum chi^2 value sufficient for output (will continue trying X times until found)
    Returns:
        min_chi_squared   = rank0 value of lowest achieved chi^2 value
        results           = rank1 list of output paramters satisfying gaussian fit function (in order of input)
        f                 = ParametricRealFunction satisfying fit
    '''
  
    if single_or_double == 'single':
        f = GaussFit()
    elif single_or_double == 'double':
        f = GaussDoubleFit()
    elif single_or_double == 'triple':
        f = GaussTripleFit()
        
    ftr = CurveFitter(LevenbergMarquardtOptimizer())
    
    validPoints = where(valid(ds))
    ds = ds[validPoints]
    
    ds_sigma = mean(ds[-5:-1])*sqrt(2)
    
    x = ds.property(QDataSet.DEPEND_0)
    for i in xrange(len(x)):
        ftr.addObservedPoint(ds_sigma.value(),float(x[i]),float(ds[i]))
        
    #plot(3,ds)
    
    if singleFitAttempt == True:   
        if single_or_double == 'single':
            inputGuessParams = [0,3,peakEstimates[0],30]
        elif single_or_double == 'double': 
            inputGuessParams = [0,3,peakEstimates[0],30,0,1,peakEstimates[1],10]   
        elif single_or_double == 'triple': 
            inputGuessParams = [0,3,peakEstimates[0],30,0,1,peakEstimates[1],10,0,3,peakEstimates[0],30]    
        best_result = ftr.fit(f,inputGuessParams) 
        y= zeros( x.length() )
        chi_squared = 0
        for i in xrange(x.length()):
            y[i]= f.value(x[i],best_result)
            chi_squared = chi_squared + ( ((ds[i]-y[i])**2) / (y[i]) )
        min_chi_squared =    chi_squared
        
    else:
        range_scale = max(x).value()
        peak_scale = max(ds).value()
        width_scale = (max(x)-min(x))/len(x)
        
        #chi_squared_critical_min = 2.#0.005
        chi_squared = chi_squared_critical_min
        min_chi_squared = chi_squared_critical_min*10.
        tryIndex = 1
        while chi_squared >= chi_squared_critical_min and tryIndex<maxAttempts :  # or eq(valid(dataset(min_chi_squared)),0) :
            try:
                Peak1_center     = long(rand(1).value(0)*range_scale)
                Peak1_amplitude  = long(rand(1).value(0)*peak_scale)
                Peak1_width      = long(rand(1).value(0)*width_scale)
                
                Peak2_center     = long(Peak1_center*2)
                Peak2_amplitude  = long(rand(1).value(0)*peak_scale)
                Peak2_width      = long(rand(1).value(0)*width_scale)
                
                Peak3_center     = long(Peak1_center*1.1)
                Peak3_amplitude  = long(rand(1).value(0)*peak_scale)
                Peak3_width      = long(rand(1).value(0)*width_scale)
                
                inputGuessParams = [0.5,Peak1_amplitude,peakEstimates[0],Peak1_width,0.5,Peak2_amplitude,peakEstimates[1],Peak2_width,0.5,Peak3_amplitude,peakEstimates[0],Peak3_width]
                
                result = ftr.fit(f,inputGuessParams)
                    
                if tryIndex == 1:
                    best_result = result
                
                y= zeros( x.length() )
                chi_squared = 0
                for i in xrange(x.length()):
                    y[i]= f.value(x[i],result)
                    chi_squared = chi_squared + ( ((ds[i]-y[i])**2) / (y[i]) )
                
                if chi_squared < min_chi_squared:
                    min_chi_squared = chi_squared
                    best_result = result
                    
                tryIndex = tryIndex+1
            except: 
                if tryIndex == 1:
                    if single_or_double == 'double':
                        best_result = [-1,-1,-1,-1,-1,-1,-1,-1,-1]
                    if single_or_double == 'triple':
                        best_result = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]
                tryIndex = tryIndex+1
                continue
            
    Peak1_amplitude  = best_result[1]
    Peak1_center     = best_result[2]
    Peak1_width      = best_result[3]
    
    Peak2_amplitude  = 0
    Peak2_center     = 0
    Peak2_width      = 0
    Peak3_amplitude  = 0
    Peak3_center     = 0
    Peak3_width      = 0
    if single_or_double == 'double':
        Peak2_amplitude  = best_result[5]
        Peak2_center     = best_result[6]
        Peak2_width      = best_result[7]  
    if single_or_double == 'triple':
        Peak2_amplitude  = best_result[5]
        Peak2_center     = best_result[6]
        Peak2_width      = best_result[7]  
        Peak3_amplitude  = best_result[9]
        Peak3_center     = best_result[10]
        Peak3_width      = best_result[11]  
    
    #v_space_min = dom.plots[1].xaxis.range.min()
    #v_space_max = dom.plots[1].xaxis.range.max()
    v_space_min = min(ds.property(QDataSet.DEPEND_0))
    v_space_max = max(ds.property(QDataSet.DEPEND_0))
    v_space = logspace(v_space_min,v_space_max,1000)
    v_space.putProperty( QDataSet.UNITS, Units.lookupUnits('km/s') )
    
    peak_1 = Peak1_amplitude*exp(-((v_space   - Peak1_center)**2 / (Peak1_width**2)))
    peak_2 = Peak2_amplitude*exp(-((v_space   - Peak2_center)**2 / (Peak2_width**2)))
    peak_3 = Peak3_amplitude*exp(-((v_space   - Peak3_center)**2 / (Peak3_width**2)))
    
    #peak_1 = 3*exp(-((v_space   - 290)**2 / (50**2)))
    #peak_2 = 1*exp(-((v_space   - 390)**2 / (40**2)))
    
    
    print '~~~~~~~~~~~'
    print '~~~~~~~~~~~'
    print '~~~~~~~~~~~'
    print '~~~~~~~~~~~'
    print 'Peak1_amplitude',Peak1_amplitude
    print 'Peak1_center',Peak1_center
    print 'Peak1_width',Peak1_width
    print 'Peak2_amplitude',Peak2_amplitude
    print 'Peak2_center',Peak2_center
    print 'Peak2_width',Peak2_width
    print 'Peak3_amplitude',Peak3_amplitude
    print 'Peak3_center',Peak3_center
    print 'Peak3_width',Peak3_width
    print 'min_chi_squared',min_chi_squared
    print '~~~~~~~~~~~'
    print '~~~~~~~~~~~'
    print '~~~~~~~~~~~'
    print '~~~~~~~~~~~'
    reportFit( { "Peak1_amplitude":Peak1_amplitude, "Peak1_center":Peak1_center, "Peak1_width":Peak1_width, "Peak2_amplitude":Peak2_amplitude, "Peak2_center":Peak2_center, "Peak2_width":Peak2_width, "Peak3_amplitude":Peak3_amplitude, "Peak3_center":Peak3_center, "Peak3_width":Peak3_width, "min_chi_squared":min_chi_squared } )

    model_vdf = dataset( peak_1 + peak_2 + peak_3, units=ds.property(QDataSet.UNITS) )
    plot( 2, v_space, model_vdf, color=Color.RED , xlog=True , ylog=True)    
    




def reactionWheelToneRemover(ds_fft, reactionWheelSpeed, wheelToneSpectralWidth=5, chi_squared_critical_min = 0.05, maxAttempts = 30):
    '''
    Attempts to remove the spectral signal of the reaction wheel from fft
    Input:
        ds_fft = rank? fft array
        reactionWheelSpeed = rank1 array of reaction wheel speed in revolutions per second
    Output:
        ds_fft_clean = rank? fft array with removed signal
    '''
    

    
    from org.apache.commons.math.optimization.fitting import CurveFitter
    from org.apache.commons.math.optimization.fitting import ParametricRealFunction
    from org.apache.commons.math.optimization.general import LevenbergMarquardtOptimizer

    
    class GaussFitKnownCenter(ParametricRealFunction):
        def value(self, x, params):
            a1 = params[0]
            b1 = params[1]
            c1 = params[2]
            d1 = params[3]
            return (a1 + b1*exp(-((x - c1)**2 / (2*d1**2))))
        def gradient(self, x, params):
            a1 = params[0]
            b1 = params[1]
            c1 = params[2]
            d1 = params[3]
            return [1,
                    exp(-((x - c1)**2 / (2*d1**2))),
                    0,
                    #(b1*(x-c1)/(d1**2))*exp(-((x - c1)**2 / (2*d1**2))),
                    (b1*((x-c1)**2)/(d1**3))*exp(-((x - c1)**2 / (2*d1**2)))]  
    
    
    reactionWheelSpeed_fftSync = putProperty(synchronize(ds_fft,reactionWheelSpeed),QDataSet.UNITS,Units.hertz)
    maskArray      = zeros(len(ds_fft[:,0,0]),len(ds_fft[0,:,0]))
    frequencyArray = ones(len(ds_fft[:,0,0]),len(ds_fft[0,:,0]))
    frequencyArray.putProperty(QDataSet.UNITS,Units.hertz)
    frequencyArray.putProperty(QDataSet.DEPEND_0,ds_fft.property(QDataSet.DEPEND_0))
    #print len(ds_fft[:,0,0])
    #print frequencyArray
    frequencyArray = transpose(transpose(frequencyArray) * ds_fft.property(QDataSet.DEPEND_1))
    #print reactionWheelSpeed_fftSync
    #plot( frequencyArray)
    #print ds_fft
    
    smoothPointsWheelTone = 200
    
    wheelPoints = None
    for TEMP_i in xrange(len(maskArray[:,0])):
        #wheelPoint = imin(abs(ds_fft.property(QDataSet.DEPEND_1)-reactionWheelSpeed_fftSync[array_i]))
        # Finds bin closest to the wheel spin frequency
        wheelPoints = concatenate(wheelPoints,imin(abs(ds_fft.property(QDataSet.DEPEND_1)-reactionWheelSpeed_fftSync[TEMP_i])))
        #maskArray[array_i,wheelPoint] = 0
    
    wheelPointsArray                = dblarr(len(wheelPoints),wheelToneSpectralWidth)
    wheelToneArray                  = dblarr(len(wheelPoints),wheelToneSpectralWidth,len(ds_fft[0,0,:]))
    TEMP_binChannelAroundTone_power = dblarr(len(wheelPoints),len(ds_fft[0,0,:]))
    for binChannel in xrange(wheelToneSpectralWidth):
        TEMP_binChannelAroundTone = wheelPoints + (binChannel - floor(wheelToneSpectralWidth/2.))
        wheelPointsArray[:,binChannel] = TEMP_binChannelAroundTone
        for real_imag in xrange(len(ds_fft[0,0,:])):
            for TEMP_i in xrange(len(TEMP_binChannelAroundTone_power)):
                #print TEMP_binChannelAroundTone[TEMP_i]
                if ge(TEMP_binChannelAroundTone[TEMP_i],0).and(lt(TEMP_binChannelAroundTone[TEMP_i],len(ds_fft[0,:,0]))):
                    TEMP_binChannelAroundTone_power[TEMP_i,real_imag] = ds_fft[TEMP_i,TEMP_binChannelAroundTone[TEMP_i],real_imag]
            wheelToneArray[:,binChannel,real_imag] = TEMP_binChannelAroundTone_power[:,real_imag]
        print 'TEMP_binChannelAroundTone_power:',TEMP_binChannelAroundTone_power
        
        #plot(TEMP_binChannelAroundTone_power)
        #maskArray[:,wheelPoints + (binChannel - floor(wheelToneSpectralWidth/2.))] = ds_fft[:,wheelPoints + (binChannel - floor(wheelToneSpectralWidth/2.))]
    
    r = where(lt(wheelPointsArray,0))
    wheelPointsArray[r] = 0
    
    wheelToneArray_power = sqrt(wheelToneArray[:,:,0]**2 + wheelToneArray[:,:,1]**2)
    # BOXCAR AVERAGE OVER WHEEL TONE TO GET AVERAGE EFFECTS, LATER USE THIS TO MEDIAN-OUT WAVE POWER JUMPS
    wheelToneArray_power = smooth(wheelToneArray_power, smoothPointsWheelTone)
    wheelToneArray_power = medianFilter(wheelToneArray_power, smoothPointsWheelTone)
    for binChannel in xrange(wheelToneSpectralWidth):
        if ge(binChannel,0):
            for TEMP_i in xrange(len(TEMP_binChannelAroundTone_power)):
                if ge(TEMP_binChannelAroundTone[TEMP_i],0).and(lt(TEMP_binChannelAroundTone[TEMP_i],len(ds_fft[0,:,0]))):
                    maskArray[TEMP_i,wheelPointsArray[TEMP_i,binChannel]] = wheelToneArray_power[TEMP_i,binChannel]
    #wheelPointsArray.putProperty(QDataSet.DEPEND_0,ds_fft.property(QDataSet.DEPEND_0))
    maskArray.putProperty(QDataSet.DEPEND_0,ds_fft.property(QDataSet.DEPEND_0))
    maskArray.putProperty(QDataSet.DEPEND_1,ds_fft.property(QDataSet.DEPEND_1))
    wheelToneArray.putProperty(QDataSet.DEPEND_0,ds_fft.property(QDataSet.DEPEND_0))
    #print wheelPointsArray
    plot(2,maskArray,ytitle='Mask Array',zrange=[0.001,1],zlog=True)
    #stop
    
    # DO GAUSSIAN FITTING
    ftr = CurveFitter(LevenbergMarquardtOptimizer())
    for tstamp in xrange(len(maskArray)):
        spectralSlice = sqrt(ds_fft[tstamp,:,0]**2 + ds_fft[tstamp,:,1]**2)
        single_or_double = 'single'
        
        doGaussianFit(spectralSlice,peakEstimates,single_or_double,chi_squared_critical_min,maxAttempts)
    
    #wheelFrequency = where(eq(frequencyArray,reactionWheelSpeed_fftSync))
    #print wheelPoints
    #maskArray[:,wheelPoints] = 0
    #plot(1, reactionWheelSpeed_fftSync)
    #plot(2, maskArray)
    #plot(2, wheelPoints)
    #stop
    
    ds_fft_clean = copy(ds_fft)
    if ds_fft.rank()==2:
        print 'rank2'
    if ds_fft.rank()==3:
        print 'rank3'
        for real_imag in xrange(len(ds_fft[0,0,:])):
            #wheelFrequency = where(eq(frequencyArray,reactionWheelSpeed_fftSync))
            #ds_fft_clean[:,:,real_imag][:,wheelPoints] = 0
            ds_fft_clean[:,:,real_imag] = ds_fft_clean[:,:,real_imag] - maskArray
    
    
    #return(ds_fft_clean)
    return(maskArray)

tr = '2020-06-13 04:00 to 08:00'
tr = '2020-06-07+4:00+to+8:00'

wheelNumber = '3'

# GRAB FFT ROUTINE
Hanningfft = getFile( 'C:/Users/kpaulson/Software/Autoplot/GithubScripts/CoreSubprocesses/Hanningfft.jy',monitor.getSubtaskMonitor('import Hanningfft()'))
execfile( Hanningfft.toString() )

#DOWNLOAD EXAMPLE DATA
RW = getDataSet('http://research.ssl.berkeley.edu/data/spp/data/sci/fields/staging/l2/f2_100bps/$Y/$m/psp_fld_l2_f2_100bps_$Y$m$d_v$v.cdf?PSP_FLD_L2_F2_100bps_SC_Reaction_Wheel_Speed_RW%s'%wheelNumber,tr)
#B_RTN_t = getDataSet('http://research.ssl.berkeley.edu/data/spp/data/sci/fields/staging/l2/mag_RTN/2020/06/psp_fld_l2_mag_RTN_2020061306_v00.cdf?psp_fld_l2_mag_RTN[:,1]')
B_RTN_t = getDataSet('http://research.ssl.berkeley.edu/data/spp/data/sci/fields/staging/l2/mag_RTN/$Y/$m/psp_fld_l2_mag_RTN_$Y$m$d$(H,span=6)_v$v.cdf?psp_fld_l2_mag_RTN[:,1]',tr)

#TRIM DATA SO THAT WE CAN DO THIS MORE QUICKLY
#B_RTN_t = trim(B_RTN_t,'2020-06-13 07:00 to 19:20')
B_RTN_t = trim(B_RTN_t,tr)

#RUN FFT
freq_min = 2.
freq_max = 11.
window = 512
slide = 4
Bt_fft = Hanningfft( B_RTN_t , freq_min , freq_max , window , slide )

wheelToneSpectralWidth = 3
maskArray = reactionWheelToneRemover(Bt_fft, RW, wheelToneSpectralWidth)

Bt_fft_power = sqrt(Bt_fft[:,:,0]**2 + Bt_fft[:,:,1]**2)
Bt_fft_clean_power = Bt_fft_power - maskArray

plot(0,Bt_fft_power,ytitle='Bt fft',zrange=[0.001,1],zlog=True)
plot(1,Bt_fft_clean_power,ytitle='Bt fft subtracted',zrange=[0.001,1],zlog=True)
