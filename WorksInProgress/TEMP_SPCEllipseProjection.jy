plotStuff = True
writeStuff = False
#if plotStuff == True:
    #setLayoutOverplot(5)
    
line_length = 1000
xx = linspace(-10,10,line_length)
yy = linspace(-10,10,line_length)

circle_radius = 1.

eccentricity = 0.5#0.9 #e = sqrt(1 - b**2/a**2 ) 
rotAngle = toRadians(40)

ellipse_semimajor = 0.6
ellipse_semiminor = sqrt((1. - eccentricity**2)*(ellipse_semimajor**2))
#ellipse_semiminor = 0.2
x_offset = -0.03
y_offset = 0.1

collimater_length = 16.4/10.846 #In units of the circle radius

###################

rotAngles = toRadians(linspace(0,180,19))
x_offsets = linspace(-1,1,5)
y_offsets = linspace(-1,1,5)
eccentricities = linspace(0,1,19)
#rotAngles = [0.35]


rotAngle_index = 0
x_offset_index = 0
y_offset_index = 0
eccentricity_index = 0

for rotAngle in rotAngles:
    output_U = dblarr(len(x_offsets), len(y_offsets), len(eccentricities))
    output_V = dblarr(len(x_offsets), len(y_offsets), len(eccentricities))
    output_pinch = dblarr(len(x_offsets), len(y_offsets), len(eccentricities))
    
    #for x_offset in x_offsets:
    for x_offset_index in xrange(len(x_offsets)):
        x_offset = x_offsets[x_offset_index]
        #for y_offset in y_offsets:
        for y_offset_index in xrange(len(y_offsets)):
            y_offset = y_offsets[y_offset_index]
            #for eccentricity in eccentricities:
            for eccentricity_index in xrange(len(eccentricities)):
                eccentricity = eccentricities[eccentricity_index]
                #print rotAngle
            
                ellipse_semiminor = sqrt((1. - eccentricity**2)*(ellipse_semimajor**2)).value()
            
                toDegrees(atan2(x_offset,collimater_length))/0.035
                toDegrees(atan2(y_offset,collimater_length))/0.035
                
                detector = link(concatenate(xx,xx),concatenate(sqrt((circle_radius**2)-xx**2),-sqrt((circle_radius**2)-xx**2)))
                #detector = circle(circle_radius)
                
                
                
                spot = ellipse(ellipse_semimajor,ellipse_semiminor)
                spot_dep0 = spot.property(QDataSet.DEPEND_0)
                
                
                
                new_dep0 = spot_dep0*cos(rotAngle) + spot*sin(rotAngle)
                new_spot = spot_dep0*sin(rotAngle) - spot*cos(rotAngle) 
                
                new_spot = link(new_dep0-x_offset,new_spot+y_offset)
                
                
                subSpot = None
                subSpot_dep0 = None
                numberOfRings = 100
                for i in xrange(numberOfRings):
                    subSpot_ring = ellipse(ellipse_semimajor*(i/(1.*numberOfRings)),ellipse_semiminor*(i/(1.*numberOfRings)))
                    
                    subSpot_ring_dep0 = subSpot_ring.property(QDataSet.DEPEND_0)
                    new_subSpot_dep0 = subSpot_ring_dep0*cos(rotAngle) + subSpot_ring*sin(rotAngle)
                    new_subSpot      = subSpot_ring_dep0*sin(rotAngle) - subSpot_ring*cos(rotAngle) 
                    
                    subSpot = concatenate(subSpot,new_subSpot)
                    subSpot_dep0 = concatenate(subSpot_dep0,new_subSpot_dep0)
                
                new_subSpot = link(subSpot_dep0-x_offset,subSpot+y_offset,ones(len(subSpot)))
                
                xx_subspot = linspace(-1,1,250)
                yy_subspot = linspace(-1,1,250)
                
                new_subspot_pixelated = rebin(new_subSpot, xx_subspot, yy_subspot)
                
                new_subspot_pixelated.putProperty(QDataSet.VALID_MIN,0)
                new_subspot_pixelated.putProperty(QDataSet.VALID_MAX,1)
                invalid = where(eq(valid(new_subspot_pixelated),0))
                new_subspot_pixelated[invalid] = 0
                
            #    r_a = where(lt(new_subSpot[:,0],0).and(lt(new_subSpot[:,1],0)))
            #    r_b = where(gt(new_subSpot[:,0],0).and(lt(new_subSpot[:,1],0)))
            #    r_c = where(gt(new_subSpot[:,0],0).and(gt(new_subSpot[:,1],0)))
            #    r_d = where(lt(new_subSpot[:,0],0).and(gt(new_subSpot[:,1],0)))
            #
            #    spc_a = total(new_subSpot[r_a,2])
            #    spc_b = total(new_subSpot[r_b,2])
            #    spc_c = total(new_subSpot[r_c,2])
            #    spc_d = total(new_subSpot[r_d,2])
                
                new_subspot_pixelated_dep0 = new_subspot_pixelated.property(QDataSet.DEPEND_0)
                new_subspot_pixelated_dep1 = new_subspot_pixelated.property(QDataSet.DEPEND_1)
                
                dep0_gt0 = where(gt(new_subspot_pixelated_dep0,0))
                dep0_lt0 = where(lt(new_subspot_pixelated_dep0,0))
                dep1_gt0 = where(gt(new_subspot_pixelated_dep1,0))
                dep1_lt0 = where(lt(new_subspot_pixelated_dep1,0))
                
            #    r_a = where(lt(new_subspot_pixelated_dep0,0).and(lt(new_subspot_pixelated_dep1,0)))
            #    r_b = where(gt(new_subspot_pixelated_dep0,0).and(lt(new_subspot_pixelated_dep1,0)))
            #    r_c = where(gt(new_subspot_pixelated_dep0,0).and(gt(new_subspot_pixelated_dep1,0)))
            #    r_d = where(lt(new_subspot_pixelated_dep0,0).and(gt(new_subspot_pixelated_dep1,0)))
                
                left_ones = dblarr(len(new_subspot_pixelated_dep0), len(new_subspot_pixelated_dep1))
                r = where(lt(new_subspot_pixelated_dep0,0))
                left_ones[r,:] = 1
                right_ones = 1+left_ones*-1
                bottom_ones = dblarr(len(new_subspot_pixelated_dep0), len(new_subspot_pixelated_dep1))
                r = where(lt(new_subspot_pixelated_dep1,0))
                bottom_ones[:,r] = 1
                top_ones = 1+bottom_ones*-1
                
                spc_a = total(total(new_subspot_pixelated*left_ones*bottom_ones,0),0)
                spc_b = total(total(new_subspot_pixelated*right_ones*bottom_ones,0),0)
                spc_c = total(total(new_subspot_pixelated*right_ones*top_ones,0),0)
                spc_d = total(total(new_subspot_pixelated*left_ones*top_ones,0),0)
                
                #print spc_a,spc_b,spc_c,spc_d
                
                totalFlux = spc_a + spc_b + spc_c + spc_d
                
                #totalFlux = totalFlux/((mv_lo + (mv_hi-mv_lo)/2) * (mv_hi-mv_lo))
                
                fluxDifference_scx   = (spc_a + spc_d) - (spc_b + spc_c)
                fluxDifference_scy   = (spc_a + spc_b) - (spc_c + spc_d)
                fluxDifference_pinch = (spc_a + spc_c) - (spc_b + spc_d)
                
                U = (fluxDifference_scy/totalFlux)/0.035
                V = (fluxDifference_scx/totalFlux)/0.035
                pinch = (fluxDifference_pinch/totalFlux)/0.035
                
                
                diag1 = V + 2*(spc_c-spc_d)/totalFlux/0.035
                diag2 = U - 2*(spc_a-spc_d)/totalFlux/0.035
                
                #diag1.putProperty(QDataSet.DEPEND_1,v_z)
                #diag2.putProperty(QDataSet.DEPEND_1,v_z)
                
                print 'U:',U
                print 'V:',V
                print 'pinch:',pinch
                #print 'diag1:',diag1
                #print 'diag2:',diag2
                
                if plotStuff == True:
                    #setLayoutOverplot(5)
                    plot(0,detector)
                    
                    plot(1,linspace(-circle_radius,circle_radius,line_length),zeros(line_length))
                    plot(2,zeros(line_length),linspace(-circle_radius,circle_radius,line_length))
                    #plot(3,new_subSpot,color='red')
                    plot(3,new_subspot_pixelated)
                    plot(4,new_spot)

                
                output_U[x_offset_index,y_offset_index,eccentricity_index] = U
                output_V[x_offset_index,y_offset_index,eccentricity_index] = V
                output_pinch[x_offset_index,y_offset_index,eccentricity_index] = pinch
                


#                eccentricity_index += 1
#            y_offset_index += 1
#        x_offset_index += 1
        
        if writeStuff == True:
                    
            output_U.putProperty(QDataSet.NAME,'U')
            output_V.putProperty(QDataSet.NAME,'V')
            output_pinch.putProperty(QDataSet.NAME,'pinch')
            
            output_U.putProperty(QDataSet.NAME,'U-Deflection (sc-x) as function of [B-angle, x_offset, y_offset, eccentricity]')
            output_V.putProperty(QDataSet.NAME,'V-Deflection (sc-y) as function of [B-angle, x_offset, y_offset, eccentricity]')
            output_pinch.putProperty(QDataSet.NAME,'pinch as function of [B-angle, x_offset, y_offset, eccentricity]')
            
            formatDataSet(output_U,'/tmp/output_U_%sdegrees.cdf'%round(toDegrees(rotAngle).value(),0))
            formatDataSet(output_V,'/tmp/output_V_%sdegrees.cdf'%round(toDegrees(rotAngle).value(),0))
            formatDataSet(output_pinch,'/tmp/output_pinch_%sdegrees.cdf'%round(toDegrees(rotAngle).value(),0))
    rotAngle_index += 1
#stop
#
#plot(4,new_dep0-x_offset,new_spot+y_offset)
#
#print spot
##formatDataSet(spot,'/tmp/TEMP.txt')
#
#dotArray = ones(xx.length(),yy.length())
#dotArray.putProperty(QDataSet.DEPEND_0,xx)
#dotArray.putProperty(QDataSet.DEPEND_1,yy)
#plot(3,dotArray,renderType='colorScatter')
#
#dotArray = ones(spot.length(),spot.length())
#new_spot_xxLin = linspace(min(new_dep0),max(new_dep0),len(new_dep0))
#new_spot_yyLin = linspace(min(new_spot),max(new_spot),len(new_spot))
#
#dotArray.putProperty(QDataSet.DEPEND_0,new_spot_xxLin)
#dotArray.putProperty(QDataSet.DEPEND_1,new_spot_yyLin)
#
#formatDataSet(dotArray,'/tmp/TEMP.txt')
#
#for x in xrange(int(len(new_dep0)/2.)):
#    r = where(gt(dotArray.property(QDataSet.DEPEND_1),spot[x]))
#    dotArray[x,r]=0
#
#dotIndexArray = ones(spot.length(),spot.length())
#for x in xrange(int(len(new_dep0))):
#    dotIndexArray[x,:]=dotArray.property(QDataSet.DEPEND_1)
#
#plot(3,new_spot_xxLin-x_offset,new_spot_yyLin+y_offset,dotIndexArray)
##plot(3,spot_dep0,spot,dotArray)
#
##plot(4,xx,yy,xx*yy)
#
#
#
#
