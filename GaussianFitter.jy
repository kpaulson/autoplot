

    #from org.apache.commons import *
    #
    #from org.apache.commons.math.optimization.fitting import CurveFitter
    ##from org.apache.commons.math3.optimization.fitting import CurveFitter
    #from org.apache.commons.math.optimization.fitting import *
    #from org.apache.commons.math.optimization.fitting import ParametricRealFunction
    #from org.apache.commons.math.optimization.general import LevenbergMarquardtOptimizer
    #
    ##from org.apache.commons.math.optimization.fitting import GaussianFunction
    ##from org.apache.commons.math.optimization.fitting import GaussianParametersGuesser
    ##from org.apache.commons.math.optimization.fitting import GaussianFitter
    #
    #setLayoutOverplot(2)
    #
    ##Peak1_center = getParam('Peak1 Center',0.5)
    ##Peak1_amplitude = getParam('Peak1 Amplitude',0.5)
    ##Peak1_width = getParam('Peak1 Width',0.5)
    ##
    ##Peak2_center = getParam('Peak2 Center',0.5)
    ##Peak2_center = getParam('Peak2 Center',Peak1_center*2)
    ##Peak2_amplitude = getParam('Peak2 Amplitude',0.5)
    ##Peak2_width = getParam('Peak2 Width',0.5)
    #
    #Peak1_center = getParam('Peak1 Center',rand(1).value(0))
    #Peak1_amplitude = getParam('Peak1 Amplitude',rand(1).value(0))
    #Peak1_width = getParam('Peak1 Width',rand(1).value(0))
    #
    #Peak2_center = getParam('Peak2 Center',Peak1_center*2)
    #Peak2_amplitude = getParam('Peak2 Amplitude',rand(1).value(0))
    #Peak2_width = getParam('Peak2 Width',rand(1).value(0))
    #
    #initial_guess_params = [0.5,Peak1_amplitude,Peak1_center,Peak1_width,0.5,Peak2_amplitude,Peak2_center,Peak2_width]
    #
    #x = linspace(-5,5,32*2)
    #nf = 0.02  # Noise Factor
    #
    ##randomSeed(354646)
    #aa1 = rand(1).value(0)
    #bb1 = rand(1).value(0)
    #cc1 = rand(1).value(0)
    #dd1 = rand(1).value(0)
    #
    #aa2 = rand(1).value(0)
    #bb2 = rand(1).value(0)
    #cc2 = rand(1).value(0)
    #cc2 = cc1 * 2
    #dd2 = rand(1).value(0)
    #
    #gauss1 = aa1 + bb1*exp(-((x - cc1)**2 / (2*dd1**2)))
    ##gauss_noisy = (aa1 + (0.1*rand(x.length())) ) + (bb1 + (0.1*rand(x.length())) )*exp(-((x - cc1)**2 / (2*(dd1 + (0.1*rand(x.length())) )**2)))
    #gauss_noisy = (aa1 + (nf*rand(x.length())) ) + (bb1 + (nf*rand(x.length())) )*exp(-((x - cc1)**2 / (2*(dd1 + (nf*rand(x.length())) )**2))) + (
    #              (aa2 + (nf*rand(x.length())) ) + (bb2 + (nf*rand(x.length())) )*exp(-((x - cc2)**2 / (2*(dd2 + (nf*rand(x.length())) )**2))) )
    #
    #
    #plot(0,x,gauss_noisy)
    ##plot(0,x,gauss)

# #########################################################################################

def GaussianFitter(ds,single_or_double,inputGuessParams,chi_squared_critical_min,maxAttempts):
    '''Subroutine to fit dataset to single or double gaussian peaks.
    Inputs:
        ds                         = rank1 dataset to be fit
        single_or_double           = str flag ['single','double'] as to whether to fit one or two peaks
        inputGuessParams           = rank1 list of 4 or 8 guessed parameters describing ideal gaussian
        chi_squared_critical_min   = minimum chi^2 value sufficient for output (will continue trying X times until found)
    Returns:
        min_chi_squared   = rank0 value of lowest achieved chi^2 value
        results           = rank1 list of output paramters satisfying gaussian fit function (in order of input)
        f                 = ParametricRealFunction satisfying fit
    '''

    from org.apache.commons.math.optimization.fitting import CurveFitter
    from org.apache.commons.math.optimization.fitting import ParametricRealFunction
    from org.apache.commons.math.optimization.general import LevenbergMarquardtOptimizer

    class GaussFit(ParametricRealFunction):
        def value(self, x, params):
            a1 = params[0]
            b1 = params[1]
            c1 = params[2]
            d1 = params[3]
            return (a1 + b1*exp(-((x - c1)**2 / (2*d1**2))))
        def gradient(self, x, params):
            a1 = params[0]
            b1 = params[1]
            c1 = params[2]
            d1 = params[3]
            return [1,
                    exp(-((x - c1)**2 / (2*d1**2))),
                    (b1*(x-c1)/(d1**2))*exp(-((x - c1)**2 / (2*d1**2))),
                    (b1*((x-c1)**2)/(d1**3))*exp(-((x - c1)**2 / (2*d1**2)))]  
    
    class GaussDoubleFit(ParametricRealFunction):
        def value(self, x, params):
            a1 = params[0]
            b1 = params[1]
            c1 = params[2]
            d1 = params[3]
            a2 = params[4]
            b2 = params[5]
            c2 = params[6]
            d2 = params[7]
            return (a1 + b1*exp(-((x - c1)**2 / (2*d1**2)))) + (a2 + b2*exp(-((x - c2)**2 / (2*d2**2))))
        def gradient(self, x, params):
            a1 = params[0]
            b1 = params[1]
            c1 = params[2]
            d1 = params[3]
            a2 = params[4]
            b2 = params[5]
            c2 = params[6]
            d2 = params[7]
            return [1,
                    exp(-((x - c1)**2 / (2*d1**2))),
                    (b1*(x-c1)/(d1**2))*exp(-((x - c1)**2 / (2*d1**2))),
                    (b1*((x-c1)**2)/(d1**3))*exp(-((x - c1)**2 / (2*d1**2))),
                    1,
                    exp(-((x - c2)**2 / (2*d2**2))),
                    (b2*(x-c2)/(d2**2))*exp(-((x - c2)**2 / (2*d2**2))),
                    (b2*((x-c2)**2)/(d2**3))*exp(-((x - c2)**2 / (2*d2**2)))]  
    
    
    if single_or_double == 'single':
        f = GaussFit()
    elif single_or_double == 'double':
        f = GaussDoubleFit()
        
    ftr = CurveFitter(LevenbergMarquardtOptimizer())
    
    x = ds.property(QDataSet.DEPEND_0)
    for i in xrange(len(x)):
        ftr.addObservedPoint(float(x[i]),float(ds[i]))
        
    range_scale = max(x).value()
    peak_scale = max(ds).value()
    width_scale = (max(x)-min(x))/len(x)
    
    #chi_squared_critical_min = 2.#0.005
    chi_squared = chi_squared_critical_min
    min_chi_squared = chi_squared_critical_min*10.
    tryIndex = 1
    while chi_squared >= chi_squared_critical_min and tryIndex<maxAttempts:
        try:
            Peak1_center     = long(rand(1).value(0)*range_scale)
            Peak1_amplitude  = long(rand(1).value(0)*peak_scale)
            Peak1_width      = long(rand(1).value(0)*width_scale)
            
            Peak2_center     = long(Peak1_center*2)
            Peak2_amplitude  = long(rand(1).value(0)*peak_scale)
            Peak2_width      = long(rand(1).value(0)*width_scale)
            
            inputGuessParams = [0.5,Peak1_amplitude,Peak1_center,Peak1_width,0.5,Peak2_amplitude,Peak2_center,Peak2_width]
            
            result = ftr.fit(f,inputGuessParams)
                
            if tryIndex == 1:
                best_result = result
            
            y= zeros( x.length() )
            chi_squared = 0
            for i in xrange(x.length()):
                y[i]= f.value(x[i],result)
                chi_squared = chi_squared + ( ((ds[i]-y[i])**2) / (y[i]) )
            
            if chi_squared < min_chi_squared:
                min_chi_squared = chi_squared
                best_result = result
                
            tryIndex = tryIndex+1
        except: 
            if tryIndex == 1:
                best_result = [-1,-1,-1,-1,-1,-1,-1,-1,-1]
            tryIndex = tryIndex+1
            continue
        
    return(min_chi_squared,best_result,f)
# #########################################################################################

def GaussianFitterUncontained(ds,single_or_double,inputGuessParams,chi_squared_critical_min,maxAttempts):
    '''Subroutine to fit dataset to single or double gaussian peaks. Assumes commented functions are already established
        -> Creating class each iteration might have caused memory crash earlier.
        
    Inputs:
        ds                         = rank1 dataset to be fit
        single_or_double           = str flag ['single','double'] as to whether to fit one or two peaks
        inputGuessParams           = rank1 list of 4 or 8 guessed parameters describing ideal gaussian
        chi_squared_critical_min   = minimum chi^2 value sufficient for output (will continue trying X times until found)
    Returns:
        min_chi_squared   = rank0 value of lowest achieved chi^2 value
        results           = rank1 list of output paramters satisfying gaussian fit function (in order of input)
        f                 = ParametricRealFunction satisfying fit
    '''

#    from org.apache.commons.math.optimization.fitting import CurveFitter
#    from org.apache.commons.math.optimization.fitting import ParametricRealFunction
#    from org.apache.commons.math.optimization.general import LevenbergMarquardtOptimizer
#
#    class GaussFit(ParametricRealFunction):
#        def value(self, x, params):
#            a1 = params[0]
#            b1 = params[1]
#            c1 = params[2]
#            d1 = params[3]
#            return (a1 + b1*exp(-((x - c1)**2 / (2*d1**2))))
#        def gradient(self, x, params):
#            a1 = params[0]
#            b1 = params[1]
#            c1 = params[2]
#            d1 = params[3]
#            return [1,
#                    exp(-((x - c1)**2 / (2*d1**2))),
#                    (b1*(x-c1)/(d1**2))*exp(-((x - c1)**2 / (2*d1**2))),
#                    (b1*((x-c1)**2)/(d1**3))*exp(-((x - c1)**2 / (2*d1**2)))]
#
#    class GaussDoubleFit(ParametricRealFunction):
#        def value(self, x, params):
#            a1 = params[0]
#            b1 = params[1]
#            c1 = params[2]
#            d1 = params[3]
#            a2 = params[4]
#            b2 = params[5]
#            c2 = params[6]
#            d2 = params[7]
#            return (a1 + b1*exp(-((x - c1)**2 / (2*d1**2)))) + (a2 + b2*exp(-((x - c2)**2 / (2*d2**2))))
#        def gradient(self, x, params):
#            a1 = params[0]
#            b1 = params[1]
#            c1 = params[2]
#            d1 = params[3]
#            a2 = params[4]
#            b2 = params[5]
#            c2 = params[6]
#            d2 = params[7]
#            return [1,
#                    exp(-((x - c1)**2 / (2*d1**2))),
#                    (b1*(x-c1)/(d1**2))*exp(-((x - c1)**2 / (2*d1**2))),
#                    (b1*((x-c1)**2)/(d1**3))*exp(-((x - c1)**2 / (2*d1**2))),
#                    1,
#                    exp(-((x - c2)**2 / (2*d2**2))),
#                    (b2*(x-c2)/(d2**2))*exp(-((x - c2)**2 / (2*d2**2))),
#                    (b2*((x-c2)**2)/(d2**3))*exp(-((x - c2)**2 / (2*d2**2)))]
    
    
    if single_or_double == 'single':
        f = GaussFit()
    elif single_or_double == 'double':
        f = GaussDoubleFit()
        
    ftr = CurveFitter(LevenbergMarquardtOptimizer())
    
    x = ds.property(QDataSet.DEPEND_0)
    for i in xrange(len(x)):
        ftr.addObservedPoint(float(x[i]),float(ds[i]))
        
    range_scale = max(x).value()
    peak_scale = max(ds).value()
    width_scale = (max(x)-min(x))/len(x)
    
    #chi_squared_critical_min = 2.#0.005
    chi_squared = chi_squared_critical_min
    min_chi_squared = chi_squared_critical_min*10.
    tryIndex = 1
    while chi_squared >= chi_squared_critical_min and tryIndex<maxAttempts:
        try:
            if tryIndex == 1:
                result = ftr.fit(f,inputGuessParams)
                
            else:
                Peak1_center     = long(rand(1).value(0)*range_scale)
                Peak1_amplitude  = long(rand(1).value(0)*peak_scale)
                Peak1_width      = long(rand(1).value(0)*width_scale)
                
                Peak2_center     = long(Peak1_center*2)
                Peak2_amplitude  = long(rand(1).value(0)*peak_scale)
                Peak2_width      = long(rand(1).value(0)*width_scale)
                
                inputGuessParams = [0.5,Peak1_amplitude,Peak1_center,Peak1_width,0.5,Peak2_amplitude,Peak2_center,Peak2_width]
                
                result = ftr.fit(f,inputGuessParams)
                
            if tryIndex == 1:
                best_result = result
            
            y= zeros( x.length() )
            chi_squared = 0
            for i in xrange(x.length()):
                y[i]= f.value(x[i],result)
                chi_squared = chi_squared + ( ((ds[i]-y[i])**2) / (y[i]) )
            
            if chi_squared < min_chi_squared:
                min_chi_squared = chi_squared
                best_result = result
                
            tryIndex = tryIndex+1
        except: 
            if tryIndex == 1:
                best_result = [-1,-1,-1,-1,-1,-1,-1,-1,-1]
            tryIndex = tryIndex+1
            continue
        
    return(min_chi_squared,best_result,f)


# #########################################################################################
# #########################################################################################

from org.apache.commons.math.optimization.fitting import CurveFitter
from org.apache.commons.math.optimization.fitting import ParametricRealFunction
from org.apache.commons.math.optimization.general import LevenbergMarquardtOptimizer

class GaussFit(ParametricRealFunction):
    def value(self, x, params):
        a1 = params[0]
        b1 = params[1]
        c1 = params[2]
        d1 = params[3]
        return (a1 + b1*exp(-((x - c1)**2 / (2*d1**2))))
    def gradient(self, x, params):
        a1 = params[0]
        b1 = params[1]
        c1 = params[2]
        d1 = params[3]
        return [1,
                exp(-((x - c1)**2 / (2*d1**2))),
                (b1*(x-c1)/(d1**2))*exp(-((x - c1)**2 / (2*d1**2))),
                (b1*((x-c1)**2)/(d1**3))*exp(-((x - c1)**2 / (2*d1**2)))]  

class GaussDoubleFit(ParametricRealFunction):
    def value(self, x, params):
        a1 = params[0]
        b1 = params[1]
        c1 = params[2]
        d1 = params[3]
        a2 = params[4]
        b2 = params[5]
        c2 = params[6]
        d2 = params[7]
        return (a1 + b1*exp(-((x - c1)**2 / (2*d1**2)))) + (a2 + b2*exp(-((x - c2)**2 / (2*d2**2))))
    def gradient(self, x, params):
        a1 = params[0]
        b1 = params[1]
        c1 = params[2]
        d1 = params[3]
        a2 = params[4]
        b2 = params[5]
        c2 = params[6]
        d2 = params[7]
        return [1,
                exp(-((x - c1)**2 / (2*d1**2))),
                (b1*(x-c1)/(d1**2))*exp(-((x - c1)**2 / (2*d1**2))),
                (b1*((x-c1)**2)/(d1**3))*exp(-((x - c1)**2 / (2*d1**2))),
                1,
                exp(-((x - c2)**2 / (2*d2**2))),
                (b2*(x-c2)/(d2**2))*exp(-((x - c2)**2 / (2*d2**2))),
                (b2*((x-c2)**2)/(d2**3))*exp(-((x - c2)**2 / (2*d2**2)))]  
    

# #########################################################################################
# #########################################################################################
########################

tr = '2018-11-03 19:00 to 19:20'
tr = '2019-04-01 8:00 to 8:30'
tr = '2018-11-01 6:51:18.516525 to 6:52:58.317011'
#tr = '2018-11-03 19:19:50 to 19:20:00'
    
spc_a = getDataSet('http://sweap.cfa.harvard.edu/data/sci/spc/L2/$Y/$m/spp_swp_spc_l2_$Y$m$d_v$v.cdf?a_current',tr)
spc_b = getDataSet('http://sweap.cfa.harvard.edu/data/sci/spc/L2/$Y/$m/spp_swp_spc_l2_$Y$m$d_v$v.cdf?b_current',tr)
spc_c = getDataSet('http://sweap.cfa.harvard.edu/data/sci/spc/L2/$Y/$m/spp_swp_spc_l2_$Y$m$d_v$v.cdf?c_current',tr)
spc_d = getDataSet('http://sweap.cfa.harvard.edu/data/sci/spc/L2/$Y/$m/spp_swp_spc_l2_$Y$m$d_v$v.cdf?d_current',tr)

#print spc_a

spc_list = [spc_a,spc_b,spc_c,spc_d]

#sweep = 4

smoothPoints = 5  # Number of points in time to smooth each SPC pad (reduce noise)

outputFile = '/tmp/TEMP_gaussian.cdf'

TEMP_spc_list = []
for spc in spc_list:
    spc = trim(spc,tr)   # Cut down from full cdf to the desired timerange
    mv_lo = spc.property(QDataSet.DEPEND_1)
    for volts in mv_lo[0,:]:
        r = where(eq(mv_lo,volts))
        try:
            spc[r] = smooth(spc[r],smoothPoints)  # smooths over spc data at each voltage level
        except:
            continue
    
    TEMP_spc_list.append(spc)
    
spc_list = TEMP_spc_list

monitor.started()
monitor.setTaskSize(len(spc_list)*len(spc_list[0]))

#totalFlux = sum(spc_list)


#for spc in spc_list:
#    for sweep in xrange(len(spc[0])):
#        timeSlice = putProperty(spc.property(QDataSet.DEPEND_0)[sweep],QDataSet.NAME,None)
#        r = where(valid(spc[sweep,:]))
#        spcSlice = spc[sweep,:][r]
    
spcPeakFitList = []
uu = 0
for spc in spc_list:
    #print spc
    monitor.setTaskProgress(uu)
    monitor.setLabel('Gaussian Fits')
    
    TEMP_spcPeakFit       = None
    resultTime            = None
    resultPeak1_amplitude = None
    resultPeak1_center    = None
    resultPeak1_width     = None
    resultPeak2_amplitude = None
    resultPeak2_center    = None
    resultPeak2_width     = None
    resultmin_chi_squared = None
    for sweep in xrange(len(spc)):
        #print sweep
        monitor.getSubtaskMonitor(0,len(spc),'SPC-%s'%(str(spc)[0]))
        monitor.setTaskProgress((uu*len(spc))+sweep)
    
        timeSlice = putProperty(spc.property(QDataSet.DEPEND_0)[sweep],QDataSet.NAME,None)
        r = where(valid(spc[sweep,:]))
        spcSlice = spc[sweep,:][r]
        
        #(min_chi_squared,best_result,f) = GaussianFitter(ds=spcSlice,single_or_double='double',inputGuessParams=None,chi_squared_critical_min=1.,maxAttempts=10)
        if 'best_result' in locals() and ne(best_result[8],-1):  # If we have found a result in the previous slice and it isn't the garbage result, use it as the initial guess for this one
            (min_chi_squared,best_result,f) = GaussianFitterUncontained(ds=spcSlice,single_or_double='double',inputGuessParams=best_result,chi_squared_critical_min=1.,maxAttempts=10)
            
        else:  # If there isn't a previous result to use, just go with random choices.
            print 'going random'
            (min_chi_squared,best_result,f) = GaussianFitterUncontained(ds=spcSlice,single_or_double='double',inputGuessParams=None,chi_squared_critical_min=1.,maxAttempts=10)
        
        best_result.append(long(min_chi_squared))
        best_result = dataset(best_result)
        
        resultTime = append(resultTime,timeSlice)
        resultPeak1_amplitude = append(resultPeak1_amplitude , best_result[1])
        resultPeak1_center    = append(resultPeak1_center    , best_result[2])
        resultPeak1_width     = append(resultPeak1_width     , best_result[3])
        resultPeak2_amplitude = append(resultPeak2_amplitude , best_result[5])
        resultPeak2_center    = append(resultPeak2_center    , best_result[6])
        resultPeak2_width     = append(resultPeak2_width     , best_result[7])
        resultmin_chi_squared = append(resultmin_chi_squared , best_result[8])
        
        
    resultPeak1_amplitude.putProperty( QDataSet.NAME,'Peak1_amplitude_%s' %(str(spc)[0]))
    resultPeak1_center.putProperty(    QDataSet.NAME,'Peak1_center_%s'    %(str(spc)[0]))
    resultPeak1_width.putProperty(     QDataSet.NAME,'Peak1_width_%s'     %(str(spc)[0]))
    resultPeak2_amplitude.putProperty( QDataSet.NAME,'Peak2_amplitude_%s' %(str(spc)[0]))
    resultPeak2_center.putProperty(    QDataSet.NAME,'Peak2_center_%s'    %(str(spc)[0]))
    resultPeak2_width.putProperty(     QDataSet.NAME,'Peak2_width_%s'     %(str(spc)[0]))
    resultmin_chi_squared.putProperty( QDataSet.NAME,'Chi_squared_%s'     %(str(spc)[0]))
    resultTime.putProperty(            QDataSet.NAME,'Epoch_%s'           %(str(spc)[0]))
    
    resultPeak1_amplitude.putProperty( QDataSet.VALID_MIN,0)
    resultPeak1_center.putProperty(    QDataSet.VALID_MIN,0)
    resultPeak1_width.putProperty(     QDataSet.VALID_MIN,0)
    resultPeak2_amplitude.putProperty( QDataSet.VALID_MIN,0)
    resultPeak2_center.putProperty(    QDataSet.VALID_MIN,0)
    resultPeak2_width.putProperty(     QDataSet.VALID_MIN,0)
    
    resultPeak1_amplitude.putProperty( QDataSet.VALID_MAX,1E5)
    resultPeak1_center.putProperty(    QDataSet.VALID_MAX,1E5)
    resultPeak1_width.putProperty(     QDataSet.VALID_MAX,1E5)
    resultPeak2_amplitude.putProperty( QDataSet.VALID_MAX,1E5)
    resultPeak2_center.putProperty(    QDataSet.VALID_MAX,1E5)
    resultPeak2_width.putProperty(     QDataSet.VALID_MAX,1E5)
        
    TEMP_spcPeakFit = bundle(TEMP_spcPeakFit,resultPeak1_amplitude,resultPeak1_center,resultPeak1_width)
    TEMP_spcPeakFit = bundle(TEMP_spcPeakFit,resultPeak2_amplitude,resultPeak2_center,resultPeak2_width)
    TEMP_spcPeakFit = bundle(TEMP_spcPeakFit,resultmin_chi_squared)
    
    TEMP_spcPeakFit.putProperty(QDataSet.DEPEND_0,resultTime)
    TEMP_spcPeakFit.putProperty(QDataSet.NAME,'gaussianFits_%s' %(str(spc)[0]))
    TEMP_spcPeakFit.putProperty(QDataSet.VALID_MIN,0)
    TEMP_spcPeakFit.putProperty(QDataSet.VALID_MAX,1E5)
        
    spcPeakFitList.append(TEMP_spcPeakFit)
    
    if (str(spc)[0]) == 'a':
        formatDataSet(resultTime,outputFile)
        formatDataSet(TEMP_spcPeakFit,outputFile+'?append=T')
    else:
        formatDataSet(TEMP_spcPeakFit,outputFile+'?append=T')
        
    del(TEMP_spcPeakFit)
    del(
        resultPeak1_amplitude ,
        resultPeak1_center    ,
        resultPeak1_width     ,
        resultPeak2_amplitude ,
        resultPeak2_center    ,
        resultPeak2_width     ,
        resultmin_chi_squared )
    
#    xx = linspace(0,2400,32*8*4)
#    yy= zeros( xx.length() )
#    for i in xrange(xx.length()):
#        yy[i]= f.value(xx[i],best_result)
#
#    plot(uu,spc)
#    plot(uu+1,xx, yy, color=Color.RED, lineWidth=3 , title='&Chi;!U2!N=%s  timeSlice=%s!CpeakTemp1=%s  peakWidth1=%s'%(min_chi_squared,timeSlice,round(best_result[2],2),round(best_result[3],2)) , ylog=False, yrange=[0,20])
#
    uu = uu+1

print 'spcPeakFitList:',spcPeakFitList
#formatDataSet(spcPeakFitList,'TEMP_gaussian.cdf')
stop

xx = linspace(0,2400,32*8*4)
yy= zeros( xx.length() )
for i in xrange(xx.length()):
    yy[i]= f.value(xx[i],best_result)
#yy= map( f.value, time, result )  I can't figure out this one.

plot( 1, xx, yy, color=Color.RED, lineWidth=3 , title='&Chi;!U2!N=%s'%min_chi_squared )
