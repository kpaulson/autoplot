


# Timerange
tr_dd = '2018-10-31'
fitSeconds = 30
pauseAndPlotIndex = 50

# SI Constants
k    = 1.3807E-23
mu_0 = PI*4E-7
mp   = 1.6726E-27

inputGuessParams = [float(rand(1)[0]),float(rand(1)[0])] 


from org.apache.commons.math.optimization.fitting import CurveFitter
from org.apache.commons.math.optimization.fitting import ParametricRealFunction
from org.apache.commons.math.optimization.general import LevenbergMarquardtOptimizer
from org.apache.commons.math.stat.regression      import SimpleRegression

class LinFit(ParametricRealFunction):
    def value(self, x, params):
        a = params[0]
        b = params[1]
        return (a*x + b)
    def gradient(self, x, params):
        a = params[0]
        b = params[1]
        return [x,1]
        
mag_file = 'http://w3sweap.cfa.harvard.edu/data/sci/mag/l2_draft/$Y/$m/psp_fld_l2_mag_$Y$m$d_v$v.cdf'
spc_file = 'http://w3sweap.cfa.harvard.edu/data/sci/spc/L3/$Y/$m/spp_swp_spc_l3i_$Y$m$d_v$v.cdf'

mag_rtn = getDataSet(mag_file+'?psp_fld_mag_rtn',tr_dd)
mag_rtn = trim(mag_rtn,tr_dd)

mag_r = mag_rtn[:,0]
mag_total = magnitude(mag_rtn)


DQF = getDataSet(spc_file+'?DQF',tr_dd)
wp = getDataSet(spc_file+'?wp_moment',tr_dd)
goodData = where(eq(DQF[:,0],0))
wp = wp[goodData]


anisotropyJia = None
TperpJia      = None

ind = 0
monitor.started()
tr_fit_times = generateTimeRanges('$Y-$m-$d $H:$M:$(S,span=%s)'%(fitSeconds),tr_dd)
monitor.setTaskSize(len(tr_fit_times)-1)
for tr_fit_time in tr_fit_times:
    tr_fit_timerange = timegen(tr_fit_time,'%s sec'%fitSeconds,2)
    tr_fit_timerange = str(tr_fit_timerange[0])+' to '+str(tr_fit_timerange[1])
    #print tr_fit_timerange
    
    monitor.setTaskProgress(ind)
    monitor.setLabel('Linear Fits') 
    
    mag_r_fit = trim(mag_r,tr_fit_timerange)
    mag_total_fit = trim(mag_total,tr_fit_timerange)
    BrB2_ratio = (mag_r_fit/mag_total_fit)**2

    wp_fit = synchronize(mag_total_fit,wp)
    Tp = 0.5*((wp_fit*1E3)**2)*(mp/k)
    
    
    
    f = LinFit()
                    
    ftr_BrB2_Tp = CurveFitter(LevenbergMarquardtOptimizer())
    for i in xrange(len(mag_total_fit)):
        ftr_BrB2_Tp.addObservedPoint( 1. , float(BrB2_ratio[i]) , float(Tp[i]) )
                           
    result_BrB2_Tp = ftr_BrB2_Tp.fit(f,inputGuessParams)
    anisotropy = 1 - ( result_BrB2_Tp[0] / (result_BrB2_Tp[0]+result_BrB2_Tp[1]) )
    
    fitLine_xaxis = linspace(min(BrB2_ratio),max(BrB2_ratio),100)
    fitLine = fitLine_xaxis*result_BrB2_Tp[0] + result_BrB2_Tp[1]
    
    lineSlope_title    = round(result_BrB2_Tp[0],2)
    anisotropy_title   = round(anisotropy,2)
    Tperp_title        = round(result_BrB2_Tp[1],0)
    plotTitle = 'slope = %s   T!B&perp;!N = %s   anisotropy = %s'%( lineSlope_title , Tperp_title , anisotropy_title )
        
    #setLayoutOverplot(2)
    if mod(ind,pauseAndPlotIndex) == 0:
        plot(0,BrB2_ratio,Tp,renderType='scatter',symbolSize=3)
        plot(1,fitLine_xaxis,fitLine,renderType='series>color=red',lineThick=3,title=plotTitle)
    
    #sleep(1000)
    
    anisotropyJia = concatenate(anisotropyJia,anisotropy)
    TperpJia      = concatenate(TperpJia,result_BrB2_Tp[1])
    ind = ind+1
plot(2, dataset(tr_fit_times) , anisotropyJia) 
