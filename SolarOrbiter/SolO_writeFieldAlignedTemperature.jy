
timerange             = getParam('timerange', '2022-01-08', 'date of analysis')
plotStuff             = getParam('plotStuff','T','Plot dataset',['T','F'])
writeStuff            = getParam('writeStuff','F','Write dataset out to cdf file',['T','F'])
inverter              = getParam('matrixInverter', 'transpose', 'What algorithm should be used for the inversion of the rotation matrix? (R^-1)', ['lowerUpperDecomposition', 'RealMatrixInverse', 'transpose'])
useFullPressureTensor = getParam('usePressureTensor','T','Use the full pressure tensor instead of the diagonal temperature elements',['T','F'])
coordSystem           = getParam('coordinateSystem', 'rtn', 'Which coordinate system do you want the original data in?', ['rtn', 'srf'])

outputDirectory = 'Research/SolarOrbiter/SWA-PAS/fieldAlignedTemperature_Files/'
#tr = '2022-03-25'

def convertTstoTrues(parameterInput):
    if parameterInput == 'T':
        parameterInput = True
    elif parameterInput == 'F':
        parameterInput = False
    return(parameterInput)
    
    
plotStuff             = convertTstoTrues(plotStuff)
writeStuff            = convertTstoTrues(writeStuff)
useFullPressureTensor = convertTstoTrues(useFullPressureTensor)

############################################################################
##################            IMPORTS            ###########################
############################################################################
############################################################################

def get_os_version():
    '''
    Basic subprocess that should print out the operating system version. Mostly helpful
    for scripts looking for files in a different directory structure on windows vs mac.
    Easiest application:
        print get_os_version().split()[0]
    '''
    import sys
    ver = sys.platform.lower()
    if ver.startswith('java'):
        import java.lang
        ver = java.lang.System.getProperty("os.name").lower()
    return ver
       
OS = get_os_version().split()[0]
if OS == 'mac' or OS == 'linux':
    googleDrive_path = '/home/kpaulson/MyDrive/'
elif OS == 'windows':
    #googleDrive_path = '/Users/kpaulson/GoogleDrive/'
    googleDrive_path = 'G:/My Drive/'
    
monitor.started()
localCodeDirectory  = googleDrive_path+'Software/Autoplot/githubScripts_autoplot/'
remoteCodeDirectory = 'https://github.com/kpaulson/autoplot/blob/master/'


# IMPORT FIELDALIGNER
def field_aligner( Bx , By , Bz , Btotal , TEMP_Rx , TEMP_Ry , TEMP_Rz , trend_seconds ):
    '''Routine used to define field-aligned coordinate system by smoothing over given magnetic field data.

    Parameters:
        Bx = rank1 X component of magnetic field
        By = rank1 Y component of magnetic field
        Bz = rank1 Z component of magnetic field
        TEMP_Rx = rank1 X component of radial s/c position (in same coord system as B)
        TEMP_Ry = rank1 Y component of radial s/c position (in same coord system as B)
        TEMP_Rz = rank1 Z component of radial s/c position (in same coord system as B)
        trend_seconds = rank0 number of seconds over which to average B to define as background
        
    Returns:
        (Bn , Bp , Bq) = rank1 collection of Magnetic Field components in field-aligned system.
        (Nx , Ny , Nz) = rank1 collection of Magnetic Field direction components in original coord system.
        (Px , Py , Pz) = rank1 collection of Quasi-Radial direction components in original coord system.
        (Qx , Qy , Qz) = rank1 collection of Quasi-Azimuthal direction components in original coord system.
    
    '''
    
    import java
    
    #monitor.setLabel('Field Aligner')    
    # ###
    # ### BOXCAR SMOOTH RAW MAG DATA TO DEFINE FIELD-ALIGNED VECTOR
    # ###    
    
    mag_time = Btotal.property(QDataSet.DEPEND_0)
            #mag_time.putProperty(QDataSet.NAME,'B-field Time')
            
            #print mag_time[1]-mag_time[0]
            #for i in xrange(len(mag_time)):
            #    if( mag_time[i]-mag_time[0] > detrend_time ):
            #        raise getmeouttahere
            #print mag_time.property(QDataSet.UNITS)
    
    smooth_points = int(round(trend_seconds*1./convertUnitsTo(mag_time[1]-mag_time[0],Units.seconds),0))
    
    Bx_smooth     = smoothFit(mag_time, Bx,     smooth_points)
    By_smooth     = smoothFit(mag_time, By,     smooth_points)
    Bz_smooth     = smoothFit(mag_time, Bz,     smooth_points)
    Btotal_smooth = smoothFit(mag_time, Btotal, smooth_points)
    
    Nx = Bx_smooth / Btotal_smooth
    Ny = By_smooth / Btotal_smooth
    Nz = Bz_smooth / Btotal_smooth
    
    
    # ###
    # ### PULL RADIAL VECTOR DATA AND DEFINE PERPENDICULAR VECTOR DIRECTIONS
    # ###
    

    TEMP_Rmag = sqrt(TEMP_Rx**2 + TEMP_Ry**2 + TEMP_Rz**2)
    
    ephem_time = TEMP_Rx.property(QDataSet.DEPEND_0)
    try:
        ephem_to_mag_ratio = findex(ephem_time,mag_time)
    except(java.lang.IllegalArgumentException):
        if(eq(len(TEMP_Rx), len(mag_time))):
            ephem_time = mag_time
            ephem_to_mag_ratio = findex(ephem_time,mag_time)
            TEMP_Rx.putProperty(QDataSet.DEPEND_0, ephem_time)
            TEMP_Ry.putProperty(QDataSet.DEPEND_0, ephem_time)
            TEMP_Rz.putProperty(QDataSet.DEPEND_0, ephem_time)
            TEMP_Rmag.putProperty(QDataSet.DEPEND_0, ephem_time)
            print 'TEMP_Rx has no associated timestamps. Proceeding with assumption that they are of same time cadence as \'Btotal\''
        else:
            raise noTimeForGamesException
        
    TEMP_Rx = synchronize( Btotal_smooth, (TEMP_Rx/TEMP_Rmag) )
    TEMP_Ry = synchronize( Btotal_smooth, (TEMP_Ry/TEMP_Rmag) )
    TEMP_Rz = synchronize( Btotal_smooth, (TEMP_Rz/TEMP_Rmag) )

    # This version divides by Rmag again, which I should not be doing.... how long has this been in here??
    Rx = -(TEMP_Rx) #Negate R so that NxR is westwards (need this for right-handedness)
    Ry = -(TEMP_Ry) 
    Rz = -(TEMP_Rz) 
    
    TEMP_Px = ( Ny * Rz ) - ( Nz * Ry )
    TEMP_Py = ( Nz * Rx ) - ( Nx * Rz )
    TEMP_Pz = ( Nx * Ry ) - ( Ny * Rx )
    
    Pmag = sqrt( TEMP_Px**2 + TEMP_Py**2 + TEMP_Pz**2 ) #Have to normalize, since previous definition does not imply unitarity, just orthogonality
      
    Px = TEMP_Px / Pmag # ~azimuthal - positive is in Westward direction (for earth coords)
    Py = TEMP_Py / Pmag
    Pz = TEMP_Pz / Pmag
    
    del( [ TEMP_Px , TEMP_Py , TEMP_Pz , Pmag ] )
        
    Qx = -( Py * Nz ) + ( Pz * Ny ) # N x P ~radial - positive is outward
    Qy = -( Pz * Nx ) + ( Px * Nz )
    Qz = -( Px * Ny ) + ( Py * Nx )
    
    
    # ###
    # ### TRANSFORM MAG DATA INTO FIELD-ALIGNED COORDINATES
    # ###
    
    Bn = (Bx * Nx) + (By * Ny) + (Bz * Nz)
    Bp = (Bx * Px) + (By * Py) + (Bz * Pz)
    Bq = (Bx * Qx) + (By * Qy) + (Bz * Qz)
   
    Nx = round(Nx,3)
    Ny = round(Ny,3)
    Nz = round(Nz,3)     
    
    Px = round(Px,3)
    Py = round(Py,3)
    Pz = round(Pz,3) 
    
    Qx = round(Qx,3)
    Qy = round(Qy,3)
    Qz = round(Qz,3)           
                    
    ###
    ### ADD LABELS AND UNITS AND STUFF, RETURN RESULTS
    ###
    
    Bn.putProperty(QDataSet.LABEL,'B!B||!N')
    Bn.putProperty(QDataSet.NAME,'B!B||!N')
    Bp.putProperty(QDataSet.LABEL,'B!B&perp;east!N')
    Bp.putProperty(QDataSet.NAME,'B!B&perp;east!N')
    Bq.putProperty(QDataSet.LABEL,'B!B&perp;rad!N')
    Bq.putProperty(QDataSet.NAME,'B!B&perp;rad!N')
    Btotal.putProperty(QDataSet.LABEL,'|B|')
    Btotal.putProperty(QDataSet.NAME,'|B|')
    
    
    return( Bn , Bp , Bq , Nx , Ny , Nz , Px , Py , Pz , Qx , Qy , Qz )
    


# IMPORT ROTATOR


def rotateVector( Ax , Ay , Az , Nx , Ny , Nz , Px , Py , Pz , Qx , Qy , Qz ):
    '''
    Simple rotation of some vector A using the matrix composed of unit vectrs N, P, Q
        (unit vectors most often given by field_aligner())
        Description here assumes rotation into field-aligned coordinates, but the math
            is just dot products valid for any rotation.
    INPUT:
        (Ax, Ay, Az) = rank1 vector components in same coordinate system as N, P, Q
        (Nx, Ny, Nz) = rank1 unit vector components parallel to magnetic field
        (Px, Py, Pz) = rank1 unit vector components perpendicular to magnetic field
        (Qx, Qy, Qz) = rank1 unit vector components perpendicular to magnetic field
    OUTPUT:
        (An, Ap, Aq) = rank1 vector components in field-aligned coordinate system
    '''
    
    Nx , Ny , Nz , Px , Py , Pz , Qx , Qy , Qz = synchronize(Ax ,[Nx , Ny , Nz , Px , Py , Pz , Qx , Qy , Qz])
    
    An = (Ax * Nx) + (Ay * Ny) + (Az * Nz)
    Ap = (Ax * Px) + (Ay * Py) + (Az * Pz)
    Aq = (Ax * Qx) + (Ay * Qy) + (Az * Qz)
    
    return( An , Ap , Aq )

def rotateTensor(Nx, Ny, Nz, Px, Py, Pz, Qx, Qy, Qz, T_rtn):
        
    from org.apache.commons.math.linear import Array2DRowRealMatrix 
    from org.apache.commons.math.linear import LUDecompositionImpl
    from org.apache.commons.math.linear import DecompositionSolver
    from org.apache.commons.math.linear import RealMatrix
    from org.apache.commons.math.linear import RealVector
    
    rotationMatrix_to_mag = Array2DRowRealMatrix(3,3)  # matrix entries are identified as (row, column)
    T_tensor_rtn = Array2DRowRealMatrix(3,3)
    
    Tperp1 = dblarr(len(time))
    Tperp2 = dblarr(len(time))
    Tpara = dblarr(len(time))
    
    for i in xrange(len(T_rtn)):
        
        rotationMatrix_to_mag.setEntry(0,0,Nx[i].value()) # rotation matrix built from unit vectors  Nr  Nt  Nn
        rotationMatrix_to_mag.setEntry(0,1,Ny[i].value()) #                                          Pr  Pt  Pn
        rotationMatrix_to_mag.setEntry(0,2,Nz[i].value()) #                                          Qr  Qt  Qn
        rotationMatrix_to_mag.setEntry(1,0,Px[i].value())
        rotationMatrix_to_mag.setEntry(1,1,Py[i].value())
        rotationMatrix_to_mag.setEntry(1,2,Pz[i].value())
        rotationMatrix_to_mag.setEntry(2,0,Qx[i].value())
        rotationMatrix_to_mag.setEntry(2,1,Qy[i].value())
        rotationMatrix_to_mag.setEntry(2,2,Qz[i].value())
       
        
        if len(T_rtn[0,:]) == 3:
            T_tensor_rtn.setEntry(0,0,T_rtn[i,0].value())  # Tr  0   0
            T_tensor_rtn.setEntry(1,1,T_rtn[i,1].value())  # 0   Tt  0
            T_tensor_rtn.setEntry(2,2,T_rtn[i,2].value())  # 0   0   Tn
        elif len(T_rtn[0,:]) == 6:
            T_tensor_rtn.setEntry(0,0,T_rtn[i,0].value())  # Trr  Trt  Trn
            T_tensor_rtn.setEntry(1,1,T_rtn[i,1].value())  # Trt  Ttt  Ttn
            T_tensor_rtn.setEntry(2,2,T_rtn[i,2].value())  # Trn  Ttn  Tnn
            T_tensor_rtn.setEntry(0,1,T_rtn[i,3].value())
            T_tensor_rtn.setEntry(0,2,T_rtn[i,4].value())
            T_tensor_rtn.setEntry(1,2,T_rtn[i,5].value())
            T_tensor_rtn.setEntry(1,0,T_rtn[i,3].value())
            T_tensor_rtn.setEntry(2,0,T_rtn[i,4].value())
            T_tensor_rtn.setEntry(2,1,T_rtn[i,5].value())
        
        
        # Tmag = R Trtn R^-1
        try:
            if inverter == 'lowerUpperDecomposition':
                solver = LUDecompositionImpl(rotationMatrix_to_mag).getSolver()
                rotationMatrix_to_mag_inverse = solver.getInverse()
            elif inverter == 'RealMatrixInverse': # Someting is wrong here, I get negative values
                rotationMatrix_to_mag_inverse = RealMatrix.inverse(rotationMatrix_to_mag)
            elif inverter == 'transpose':
                # inverse of a rotation matrix is just its transpose
                rotationMatrix_to_mag_inverse = rotationMatrix_to_mag.transpose()
            
            T_tensor_mag = rotationMatrix_to_mag.multiply(T_tensor_rtn.multiply(rotationMatrix_to_mag_inverse)) 
            #T_tensor_mag = rotationMatrix_to_mag.multiply(T_tensor_rtn).multiply(rotationMatrix_to_mag_inverse)
            #T_tensor_mag = rotationMatrix_to_mag_inverse.multiply(T_tensor_rtn.multiply(rotationMatrix_to_mag)) # This seems backwards in terms of operations,m but I am finally getting values that make sense (Tperp1=Tperp2, no dependence on TEMP_R). Is this how it should be written in apacheSpeak?
            
            Tpara[i]  = T_tensor_mag.getEntry(0,0)
            Tperp1[i] = T_tensor_mag.getEntry(1,1)
            Tperp2[i] = T_tensor_mag.getEntry(2,2)
        except:
            Tperp1[i] = -1E38
            Tperp2[i] = -1E38
            Tpara[i]  = -1E38
        
        
    return(Tpara, Tperp1, Tperp2)
    
    
############################################################################
#################            BEGIN SCRIPT        ###########################
############################################################################
############################################################################

trs= generateTimeRanges('$Y-$m-$d',timerange)
for tr in trs:
    try:

        year  = tr[0:4]
        month = tr[5:7]
        day   = tr[8:10]

        # GET BFIELD DATA
        b_rtn = getDataSet('vap+cdaweb:ds=SOLO_L2_MAG-%s-NORMAL&id=B_%s'%(coordSystem.upper(), coordSystem.upper()), tr)
        #b_rtn = getDataSet('vap+cdaweb:ds=SOLO_L2_MAG-RTN-NORMAL&filter=solo&id=B_RTN', tr)
        b_time = b_rtn.property(QDataSet.DEPEND_0)
        
        
        # FIELD ALIGN
        Btotal = magnitude(b_rtn)
        TEMP_Rx = putProperty(zeros(len(b_rtn)), QDataSet.DEPEND_0, b_time)
        TEMP_Ry = putProperty(ones( len(b_rtn)), QDataSet.DEPEND_0, b_time)
        TEMP_Rz = putProperty(ones( len(b_rtn)), QDataSet.DEPEND_0, b_time)
        trend_seconds = 60 # 60
        ( Bn , Bp , Bq , Nx , Ny , Nz , Px , Py , Pz , Qx , Qy , Qz ) = field_aligner( b_rtn[:,0] , b_rtn[:,1] , b_rtn[:,2] , Btotal , TEMP_Rx , TEMP_Ry , TEMP_Rz , trend_seconds )
        
        if False:
            # Check out magnetic field in MFA-coords
            b_npq = bundle(Bn, Bp, Bq)
            b_npq.putProperty(QDataSet.DEPEND_0, b_rtn.property(QDataSet.DEPEND_0))
            b_npq.putProperty(QDataSet.NAME, None)
            
            plot(0, b_rtn)
            plot(1, Bn)
            plot(2, Bp)
            plot(3, Bq)
            stop
        
        if False:
            # Check out magnetic field and MFA-coords unit vectors
            plot(0, b_rtn)
            plot(1, b_time, bundle(Nx, Ny, Nz))
            plot(2, b_time, bundle(Px, Py, Pz))
            plot(3, b_time, bundle(Qx, Qy, Qz))
            
            stop
        
        # GET TEMP DATA
        if useFullPressureTensor == True:
            P_rtn   = getDataSet('vap+cdaweb:ds=SOLO_L2_SWA-PAS-GRND-MOM&id=P_%s'%(coordSystem.upper()), tr)
            density = getDataSet('vap+cdaweb:ds=SOLO_L2_SWA-PAS-GRND-MOM&id=N', tr)
            
            boltzmannK = 1.380649E-23
            evToK      = 11606.
            T_rtn = P_rtn / (density * boltzmannK * evToK)
            badPoints = where(eq(valid(T_rtn), 0))
            T_rtn[badPoints] = 0
        else:
            T_rtn = getDataSet('vap+cdaweb:ds=SOLO_L2_SWA-PAS-GRND-MOM&id=TxTyTz_%s'%(coordSystem.upper()), tr)
            
        qualityFactor = getDataSet('vap+cdaweb:ds=SOLO_L2_SWA-PAS-GRND-MOM&id=quality_factor', tr)
        unbadPoints = where(gt(qualityFactor, -1))# where(gt(qualityFactor, 0))
        T_rtn = T_rtn[unbadPoints,:]
        time = T_rtn.property(QDataSet.DEPEND_0)
        
        ( Bn , Bp , Bq , Nx , Ny , Nz , Px , Py , Pz , Qx , Qy , Qz ) = synchronize(T_rtn, ( Bn , Bp , Bq , Nx , Ny , Nz , Px , Py , Pz , Qx , Qy , Qz ))
        
        
        # ROTATE TEMPERATURE TENSOR
        (Tpara, Tperp1, Tperp2) = rotateTensor(Nx, Ny, Nz, Px, Py, Pz, Qx, Qy, Qz, T_rtn)  
        
        Tn = putProperty(Tpara, QDataSet.DEPEND_0, time)
        Tp = putProperty(Tperp1, QDataSet.DEPEND_0, time)
        Tq = putProperty(Tperp2, QDataSet.DEPEND_0, time)
        
        #Tn = abs(Tn)
        #Tp = abs(Tp)
        #Tq = abs(Tq)
        
        Tn.putProperty(QDataSet.VALID_MIN, 0)
        Tp.putProperty(QDataSet.VALID_MIN, 0)
        Tq.putProperty(QDataSet.VALID_MIN, 0)
        
        Tn.putProperty(QDataSet.VALID_MAX, 1E10)
        Tp.putProperty(QDataSet.VALID_MAX, 1E10)
        Tq.putProperty(QDataSet.VALID_MAX, 1E10)
        
        if False:
            ## ROTATE TEMP DATA
            ( Tn , Tp , Tq ) = rotateVector( T_rtn[:,0] , T_rtn[:,1] , T_rtn[:,2] , Nx , Ny , Nz , Px , Py , Pz , Qx , Qy , Qz )
            #
            Tn = abs(Tn)
            Tp = abs(Tp)
            Tq = abs(Tq)
            
            #plot(0, (Tn + Tp + Tq)/3., legendLabel='T')
            #plot(4, Tn, legendLabel='Tpar')
            #plot(1, Tp)
            #plot(2, Tq)
            #plot(3, (Tp+Tq)/2., legendLabel='Tperp')
        
        Tn.putProperty(QDataSet.NAME, 'T_parallel')
        Tp.putProperty(QDataSet.NAME, 'T_perp1')
        Tq.putProperty(QDataSet.NAME, 'T_perp2')
        
        Tn.putProperty(QDataSet.LABEL, 'T!B||!N')
        Tp.putProperty(QDataSet.LABEL, 'T!B&perp;1!N')
        Tq.putProperty(QDataSet.LABEL, 'T!B&perp;2!N')
        
        Tn.putProperty(QDataSet.UNITS, Units.eV)
        Tp.putProperty(QDataSet.UNITS, Units.eV)
        Tq.putProperty(QDataSet.UNITS, Units.eV)
        
        if plotStuff:
            plot(0, time, T_rtn, renderType='series')
            plot(1, time, bundle(Tn, Tp, Tq), yrange=[0, 15], renderType='series')
            #plot(1, time, bundle(Tn, Tp, Tq), renderType='series')
            plot(2, time, Tp/Tq, renderType='series', ylog=True, yrange=[0.1,10], ytitle='T!B&perp;1!N / T!B&perp;2!N')
            plot(3, time, ((Tp+Tq)/2.)/Tn, renderType='series', ylog=True, yrange=[0.1,10], ytitle='T!B&perp;avg!N / T!B||!N')
            plot(4, b_time, b_rtn, ytitle='Bfield')
        
            #plot(3, time, Tp, legendLabel='Tp', renderType='series')
            #plot(4, time, Tq, legendLabel='Tq', renderType='series')
            #plot(5, time, Tn, legendLabel='Tn', renderType='series')
            #stop
        
        
        # WRITE OUT TEMP FILE
        bindle = bundle(Tn, Tp, Tq)
        bindle.putProperty(QDataSet.DEPEND_0, Tn.property(QDataSet.DEPEND_0))
        
        if writeStuff:
            outputFile = 'SolO_%s_fieldAlignedTemperature.cdf'%tr
            writeDirectory = googleDrive_path + outputDirectory + '%s/%s/'%(year, month)
            mkdir(writeDirectory)
            
            formatDataSet(bindle, writeDirectory+outputFile+'?bundle=T')
    
    except:
        print 'couldn\'t run analysis for %s'%(tr)
