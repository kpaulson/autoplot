def field_aligner( Bx , By , Bz , Btotal , TEMP_Rx , TEMP_Ry , TEMP_Rz , trend_seconds ):
    '''Routine used to define field-aligned coordinate system by smoothing over given magnetic field data.

    Parameters:
        Bx = rank1 X component of magnetic field
        By = rank1 Y component of magnetic field
        Bz = rank1 Z component of magnetic field
        TEMP_Rx = rank1 X component of radial s/c position (in same coord system as B)
        TEMP_Ry = rank1 Y component of radial s/c position (in same coord system as B)
        TEMP_Rz = rank1 Z component of radial s/c position (in same coord system as B)
        trend_seconds = rank0 number of seconds over which to average B to define as background
        
    Returns:
        (Bn , Bp , Bq) = rank1 collection of Magnetic Field components in field-aligned system.
        (Nx , Ny , Nz) = rank1 collection of Magnetic Field direction components in original coord system.
        (Px , Py , Pz) = rank1 collection of Quasi-Radial direction components in original coord system.
        (Qx , Qy , Qz) = rank1 collection of Quasi-Azimuthal direction components in original coord system.
    
    '''
    
    import java
    
    #monitor.setLabel('Field Aligner')    
    # ###
    # ### BOXCAR SMOOTH RAW MAG DATA TO DEFINE FIELD-ALIGNED VECTOR
    # ###    
    
    mag_time = Btotal.property(QDataSet.DEPEND_0)
            #mag_time.putProperty(QDataSet.NAME,'B-field Time')
            
            #print mag_time[1]-mag_time[0]
            #for i in xrange(len(mag_time)):
            #    if( mag_time[i]-mag_time[0] > detrend_time ):
            #        raise getmeouttahere
            #print mag_time.property(QDataSet.UNITS)
    
    smooth_points = int(round(trend_seconds*1./convertUnitsTo(mag_time[1]-mag_time[0],Units.seconds),0))
    
    # Had an issue where the LinFit function failed and so held everything else up, so smooth() is the backup
    try:
        Bx_smooth     = smoothFit(mag_time, Bx,     smooth_points)
        By_smooth     = smoothFit(mag_time, By,     smooth_points)
        Bz_smooth     = smoothFit(mag_time, Bz,     smooth_points)
        Btotal_smooth = smoothFit(mag_time, Btotal, smooth_points)
    except:
        Bx_smooth     = smooth(mag_time, Bx,     smooth_points)
        By_smooth     = smooth(mag_time, By,     smooth_points)
        Bz_smooth     = smooth(mag_time, Bz,     smooth_points)
        Btotal_smooth = smooth(mag_time, Btotal, smooth_points)
    
    Nx = Bx_smooth / Btotal_smooth
    Ny = By_smooth / Btotal_smooth
    Nz = Bz_smooth / Btotal_smooth
    
    
    # ###
    # ### PULL RADIAL VECTOR DATA AND DEFINE PERPENDICULAR VECTOR DIRECTIONS
    # ###
    

    TEMP_Rmag = sqrt(TEMP_Rx**2 + TEMP_Ry**2 + TEMP_Rz**2)
    
    ephem_time = TEMP_Rx.property(QDataSet.DEPEND_0)
    try:
        ephem_to_mag_ratio = findex(ephem_time,mag_time)
    except(java.lang.IllegalArgumentException):
        if(eq(len(TEMP_Rx), len(mag_time))):
            ephem_time = mag_time
            ephem_to_mag_ratio = findex(ephem_time,mag_time)
            TEMP_Rx.putProperty(QDataSet.DEPEND_0, ephem_time)
            TEMP_Ry.putProperty(QDataSet.DEPEND_0, ephem_time)
            TEMP_Rz.putProperty(QDataSet.DEPEND_0, ephem_time)
            TEMP_Rmag.putProperty(QDataSet.DEPEND_0, ephem_time)
            print 'TEMP_Rx has no associated timestamps. Proceeding with assumption that they are of same time cadence as \'Btotal\''
        else:
            raise noTimeForGamesException
        
        
    
    #TEMP_Rx = interpolate( (TEMP_Rx/TEMP_Rmag) , ephem_to_mag_ratio )
    #TEMP_Ry = interpolate( (TEMP_Ry/TEMP_Rmag) , ephem_to_mag_ratio )
    #TEMP_Rz = interpolate( (TEMP_Rz/TEMP_Rmag) , ephem_to_mag_ratio )
    TEMP_Rx = synchronize( Btotal_smooth, (TEMP_Rx/TEMP_Rmag) )
    TEMP_Ry = synchronize( Btotal_smooth, (TEMP_Ry/TEMP_Rmag) )
    TEMP_Rz = synchronize( Btotal_smooth, (TEMP_Rz/TEMP_Rmag) )

    # This version divides by Rmag again, which I should not be doing.... how long has this been in here??
    #Rx = -(TEMP_Rx/TEMP_Rmag) #Negate R so that NxR is westwards (need this for right-handedness)
    #Ry = -(TEMP_Ry/TEMP_Rmag) 
    #Rz = -(TEMP_Rz/TEMP_Rmag)
    Rx = -(TEMP_Rx) #Negate R so that NxR is westwards (need this for right-handedness)
    Ry = -(TEMP_Ry) 
    Rz = -(TEMP_Rz) 
    
    TEMP_Px = ( Ny * Rz ) - ( Nz * Ry )
    TEMP_Py = ( Nz * Rx ) - ( Nx * Rz )
    TEMP_Pz = ( Nx * Ry ) - ( Ny * Rx )
    
    Pmag = sqrt( TEMP_Px**2 + TEMP_Py**2 + TEMP_Pz**2 ) #Have to normalize, since previous definition does not imply unitarity, just orthogonality
      
    Px = TEMP_Px / Pmag # ~azimuthal - positive is in Westward direction (for earth coords)
    Py = TEMP_Py / Pmag
    Pz = TEMP_Pz / Pmag
    
    del( [ TEMP_Px , TEMP_Py , TEMP_Pz , Pmag ] )
        
    Qx = -( Py * Nz ) + ( Pz * Ny ) # N x P ~radial - positive is outward
    Qy = -( Pz * Nx ) + ( Px * Nz )
    Qz = -( Px * Ny ) + ( Py * Nx )
    
    
    # ###
    # ### TRANSFORM MAG DATA INTO FIELD-ALIGNED COORDINATES
    # ###
    
    Bn = (Bx * Nx) + (By * Ny) + (Bz * Nz)
    Bp = (Bx * Px) + (By * Py) + (Bz * Pz)
    Bq = (Bx * Qx) + (By * Qy) + (Bz * Qz)
   
    Nx = round(Nx,3)
    Ny = round(Ny,3)
    Nz = round(Nz,3)     
    
    Px = round(Px,3)
    Py = round(Py,3)
    Pz = round(Pz,3) 
    
    Qx = round(Qx,3)
    Qy = round(Qy,3)
    Qz = round(Qz,3)           
                    
    ###
    ### ADD LABELS AND UNITS AND STUFF, RETURN RESULTS
    ###
    
    Bn.putProperty(QDataSet.LABEL,'B!B||!N')
    Bn.putProperty(QDataSet.NAME,'B!B||!N')
    Bp.putProperty(QDataSet.LABEL,'B!B&perp;east!N')
    Bp.putProperty(QDataSet.NAME,'B!B&perp;east!N')
    Bq.putProperty(QDataSet.LABEL,'B!B&perp;rad!N')
    Bq.putProperty(QDataSet.NAME,'B!B&perp;rad!N')
    Btotal.putProperty(QDataSet.LABEL,'|B|')
    Btotal.putProperty(QDataSet.NAME,'|B|')
    
    
    return( Bn , Bp , Bq , Nx , Ny , Nz , Px , Py , Pz , Qx , Qy , Qz )
    