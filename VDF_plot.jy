

############################################################################
############################################################################
############################################################################
############################################################################

timerange = getParam('timerange','2019-08-17','Iteration Timerange')
version = getParam('version','0.4.1','Version number to be appended to filenames')

plotFitsAndPauseALot = True
separatePeaksWithL3Values = False

#output_folder = '/home/kpaulson/Research/PSP/Anisotropy/Anisotropy_Files/L0/v%s/'%(version)
#output_folder = '/home/kpaulson/Research/PSP/Anisotropy/Anisotropy_Files/TEMP/'
#output_folder = 'D:/Research/ParkerProbe/SWEAP/SPC/Anisotropy/Anisotropy_Files/L0/v%s/'%(version)

m_p                  = 1.6726231E-24
q                    = 1.6022E-12
#trend_seconds        = getParam('Bfield_window' , 30 , 'Number of seconds over which to average magField to determine background field direction' )
#minFluxValueForFit   = getParam('Minimum_VDF' , 0.5 , 'Throw out/Don\'t fit data points where totalFlux is below this value (for normalized data, so choose [0,...,1])' )
#fitSeconds           = getParam('fit_window' , 5 , 'Number of seconds over which to do the linear fitting between (vx,vy) and vz*(bx,by)')
#modFits              = getParam('mod_number' , 50 , 'Number of fits performed before updating plot/time reporting')

cfa_sweap_file = 'http://w3sweap.cfa.harvard.edu/data/sci/spc/L2/$Y/$m/spp_swp_spc_l2_$Y$m$d_v$v.cdf'
        
    
############################################################################
############################################################################
############################################################################
############################################################################

import java
time_begin = TimeUtil.now()    


monitor.started()
trs= generateTimeRanges('$Y-$m-$d',timerange)
for tr in trs:
    time_begin_tr = TimeUtil.now()   
        
    try:
        monitor.setProgressMessage(tr)
        
        try:
            spc_a = getDataSet(cfa_sweap_file+'?a_current',tr)
            spc_b = getDataSet(cfa_sweap_file+'?b_current',tr)
            spc_c = getDataSet(cfa_sweap_file+'?c_current',tr)
            spc_d = getDataSet(cfa_sweap_file+'?d_current',tr)
            
            mv_lo = getDataSet(cfa_sweap_file+'?mv_lo',tr)
            mv_hi = getDataSet(cfa_sweap_file+'?mv_hi',tr)
            
#            spc_a = getDataSet(cfa_sweap_file+'?a_current&where=MODE_FLAG.eq(0)',tr)
#            spc_b = getDataSet(cfa_sweap_file+'?b_current&where=MODE_FLAG.eq(0)',tr)
#            spc_c = getDataSet(cfa_sweap_file+'?c_current&where=MODE_FLAG.eq(0)',tr)
#            spc_d = getDataSet(cfa_sweap_file+'?d_current&where=MODE_FLAG.eq(0)',tr)
#
#            mv_lo = getDataSet(cfa_sweap_file+'?mv_lo&where=MODE_FLAG.eq(0)',tr)
#            mv_hi = getDataSet(cfa_sweap_file+'?mv_hi&where=MODE_FLAG.eq(0)',tr)
        except:
            noSPCData = None
            raise java.io.FileNotFoundException
            
        print 'Downloading SPC L2 data took:',TimeUtil.now()-time_begin_tr
        time_last = TimeUtil.now()
        #spc_list = [spc_a,spc_b,spc_c,spc_d]
        
        MODE_FLAG = getDataSet(cfa_sweap_file+'?MODE_FLAG',tr)
        
        spc_a = trim(spc_a,tr)
        spc_b = trim(spc_b,tr)
        spc_c = trim(spc_c,tr)
        spc_d = trim(spc_d,tr)
        
        mv_lo = trim(mv_lo,tr)
        mv_hi = trim(mv_hi,tr)
        #print spc_a
        
        
        #spc_a = putProperty(spc_a/(mv_hi-mv_lo),QDataSet.DEPEND_1,mv_lo)
        #spc_b = putProperty(spc_b/(mv_hi-mv_lo),QDataSet.DEPEND_1,mv_lo)
        #spc_c = putProperty(spc_c/(mv_hi-mv_lo),QDataSet.DEPEND_1,mv_lo)
        #spc_d = putProperty(spc_d/(mv_hi-mv_lo),QDataSet.DEPEND_1,mv_lo)
        spc_list = [spc_a,spc_b,spc_c,spc_d]
        del(spc_a,spc_b,spc_c,spc_d)
        
        totalFlux = sum(spc_list)
        #totalFlux = totalFlux/((mv_lo + (mv_hi-mv_lo)/2) * (mv_hi-mv_lo))
        
        fluxDifference_scx = (spc_list[0]+spc_list[3]) - (spc_list[1]+spc_list[2])
        fluxDifference_scy = (spc_list[0]+spc_list[1]) - (spc_list[2]+spc_list[3])
        
        U = (fluxDifference_scy/totalFlux)/0.035
        V = (fluxDifference_scx/totalFlux)/0.035
        
        U.putProperty(QDataSet.VALID_MIN,None)
        V.putProperty(QDataSet.VALID_MIN,None)
        U.putProperty(QDataSet.VALID_MAX,None)
        V.putProperty(QDataSet.VALID_MAX,None)
        
        
        for j in xrange(len(U[0,:])):
            try:
                U[:,j] = medianFilter(U[:,j],3)
            except:
                continue
            try:
                V[:,j] = medianFilter(V[:,j],3)
            except:
                continue
        
        U.putProperty(QDataSet.UNITS,Units.degrees)
        V.putProperty(QDataSet.UNITS,Units.degrees)
        
        #plot(0,totalFlux)
        #plot(1,U)
        #plot(2,V)
        
        
        #Are you measuring the slope near the peak in current or near the peak in the velocity distribution function? 
        #(the VDF goes like current divided by speed time window width in speed units)
        
        print 'Calculating Flow Angles took:',TimeUtil.now()-time_last
        time_last = TimeUtil.now()
        
        v_z = sqrt( (2./m_p) * q*(mv_lo + (mv_hi-mv_lo)/2.) ) / 1.E5   # in km/s
        windowWidths = sqrt( (2./m_p) * q*(mv_hi-mv_lo)/2.) / 1.E5
        vdf = totalFlux/(v_z*windowWidths)*1.66667E3 #This factor seems arbitrary, but is necessary to line up with Mike's L3 values.
        vdf.putProperty(QDataSet.DEPEND_1,v_z)
        del(windowWidths,mv_hi)
        
        for i in xrange(len(v_z)):
            if gt(v_z[i,max(where(valid(v_z[i,:])))] - v_z[i,min(where(valid(v_z[i,:])))],500):
                vdf[i,:] = -1E38
        
        #totalFlux = totalFlux / (mv_lo + (mv_hi-mv_lo)/2) * (mv_hi-mv_lo)
        #totalFlux = totalFlux/( (mv_hi-mv_lo))
        totalFlux.putProperty(QDataSet.DEPEND_1,mv_lo)
        peaks = reduceMax(vdf,1)
        r = where(eq(vdf,peaks))
        
        print 'Defining VDF took:',TimeUtil.now()-time_last
        time_last = TimeUtil.now()
        
        setLayoutOverplot(2)
        plot(0,vdf,zlog=True,zrange=[0.05,20])
        import org
        dom.plotElements[0].controller.renderer.setRebinner(org.das2.graph.SpectrogramRenderer.RebinnerEnum.lanlNearestNeighbor)
        plot(1,v_z[r])
        #plot(2,U,zrange=[-45,45])
        #plot(3,V,zrange=[-45,45])
        waitUntilIdle()
        writeToPng('C:/Users/kpaulson/Google Drive/Research/PSP/SPC/VDF/Plots/SPC_VDF_%s'%tr)
        formatDataSet(vdf,'C:/Users/kpaulson/Google Drive/Research/PSP/SPC/VDF/Files/SPC_VDF_%s.cdf'%tr)
    except:
        continue
