def doGaussianFit(ds,single_or_double,inputGuessParams,chi_squared_critical_min,maxAttempts):
    '''Subroutine to fit dataset to single or double gaussian peaks.
    Inputs:
        ds                         = rank1 dataset to be fit
        single_or_double           = str flag ['single','double'] as to whether to fit one or two peaks
        inputGuessParams           = rank1 list of 4 or 8 guessed parameters describing ideal gaussian
        chi_squared_critical_min   = minimum chi^2 value sufficient for output (will continue trying X times until found)
    Returns:
        min_chi_squared   = rank0 value of lowest achieved chi^2 value
        results           = rank1 list of output paramters satisfying gaussian fit function (in order of input)
        f                 = ParametricRealFunction satisfying fit
    '''

    from org.apache.commons.math.optimization.fitting import CurveFitter
    from org.apache.commons.math.optimization.fitting import ParametricRealFunction
    from org.apache.commons.math.optimization.general import LevenbergMarquardtOptimizer

    class GaussFit(ParametricRealFunction):
        def value(self, x, params):
            a1 = params[0]
            b1 = params[1]
            c1 = params[2]
            d1 = params[3]
            return (a1 + b1*exp(-((x - c1)**2 / (2*d1**2))))
        def gradient(self, x, params):
            a1 = params[0]
            b1 = params[1]
            c1 = params[2]
            d1 = params[3]
            return [1,
                    exp(-((x - c1)**2 / (2*d1**2))),
                    (b1*(x-c1)/(d1**2))*exp(-((x - c1)**2 / (2*d1**2))),
                    (b1*((x-c1)**2)/(d1**3))*exp(-((x - c1)**2 / (2*d1**2)))]  
    
    class GaussDoubleFit(ParametricRealFunction):
        def value(self, x, params):
            a1 = params[0]
            b1 = params[1]
            c1 = params[2]
            d1 = params[3]
            a2 = params[4]
            b2 = params[5]
            c2 = params[6]
            d2 = params[7]
            return (a1 + b1*exp(-((x - c1)**2 / (2*d1**2)))) + (a2 + b2*exp(-((x - c2)**2 / (2*d2**2))))
        def gradient(self, x, params):
            a1 = params[0]
            b1 = params[1]
            c1 = params[2]
            d1 = params[3]
            a2 = params[4]
            b2 = params[5]
            c2 = params[6]
            d2 = params[7]
            return [1,
                    exp(-((x - c1)**2 / (2*d1**2))),
                    (b1*(x-c1)/(d1**2))*exp(-((x - c1)**2 / (2*d1**2))),
                    (b1*((x-c1)**2)/(d1**3))*exp(-((x - c1)**2 / (2*d1**2))),
                    1,
                    exp(-((x - c2)**2 / (2*d2**2))),
                    (b2*(x-c2)/(d2**2))*exp(-((x - c2)**2 / (2*d2**2))),
                    (b2*((x-c2)**2)/(d2**3))*exp(-((x - c2)**2 / (2*d2**2)))]  
    
    
    if single_or_double == 'single':
        f = GaussFit()
    elif single_or_double == 'double':
        f = GaussDoubleFit()
        
    ftr = CurveFitter(LevenbergMarquardtOptimizer())
    
    x = ds.property(QDataSet.DEPEND_0)
    for i in xrange(len(x)):
        ftr.addObservedPoint(float(x[i]),float(ds[i]))
        
    range_scale = max(x).value()
    peak_scale = max(ds).value()
    width_scale = (max(x)-min(x))/len(x)
    
    #chi_squared_critical_min = 2.#0.005
    chi_squared = chi_squared_critical_min
    min_chi_squared = chi_squared_critical_min*10.
    tryIndex = 1
    while chi_squared >= chi_squared_critical_min and tryIndex<maxAttempts:
        try:
            Peak1_center     = long(rand(1).value(0)*range_scale)
            Peak1_amplitude  = long(rand(1).value(0)*peak_scale)
            Peak1_width      = long(rand(1).value(0)*width_scale)
            
            Peak2_center     = long(Peak1_center*2)
            Peak2_amplitude  = long(rand(1).value(0)*peak_scale)
            Peak2_width      = long(rand(1).value(0)*width_scale)
            
            inputGuessParams = [0.5,Peak1_amplitude,Peak1_center,Peak1_width,0.5,Peak2_amplitude,Peak2_center,Peak2_width]
            
            result = ftr.fit(f,inputGuessParams)
                
            if tryIndex == 1:
                best_result = result
            
            y= zeros( x.length() )
            chi_squared = 0
            for i in xrange(x.length()):
                y[i]= f.value(x[i],result)
                chi_squared = chi_squared + ( ((ds[i]-y[i])**2) / (y[i]) )
            
            if chi_squared < min_chi_squared:
                min_chi_squared = chi_squared
                best_result = result
                
            tryIndex = tryIndex+1
        except: 
            if tryIndex == 1:
                best_result = [-1,-1,-1,-1,-1,-1,-1,-1,-1]
            tryIndex = tryIndex+1
            continue
            
    Peak1_center     = best_result[1]
    Peak1_amplitude  = best_result[2]
    Peak1_width      = best_result[3]
    
    Peak2_center     = best_result[5]
    Peak2_amplitude  = best_result[6]
    Peak2_width      = best_result[7]  
    
    min_chi_squared  = best_result[8]
    
    v_space_min = dom.plots[1].xaxis.range.min()
    v_space_max = dom.plots[1].xaxis.range.min()
    v_space = linspace(v_space_min,v_space_max,100)
    peak_1 = Peak1_amplitude*exp(-((v_space   - Peak1_center)**2 / (Peak1_width**2)))
    peak_2 = Peak2_amplitude*exp(-((v_space   - Peak2_center)**2 / (Peak2_width**2)))
    
    
    model_vdf = peak_1 + peak_2# + peak_a
    plot( 2, v_space, model_vdf, color=Color.RED , ytitle='chi = %s'%(str(min_chi_squared)))    
    #return(min_chi_squared,best_result,f)
	
	
	
	setScriptTitle('Slice Tool Gaussian Demo')
setScriptDescription('''
This demonstrates how a script can be used to create a digitizing app.  Data is loaded in
the top panel, and the scientist draws a box to select a time range in the top panel.  
This will run a model on the time-averaged of the data in the interval.
''')

load( PWD + 'layout.vap' )

from org.das2.qds.util import LinFit
plot( 0, 'vap+cdaweb:ds=RBSPA_REL04_ECT-HOPE-SCI-L2SA&filter=rbsp&id=FESA&timerange=2019-01-01&where=HOPE_ENERGY_Ele.eq(mode)' )

def doFit( ds ):
    sleep(1000)
    print 'do fit'
    x= ds.property( QDataSet.DEPEND_0 )
    lx= log(x)
    ly= log(ds)
    fit= LinFit(lx,ly)
    xx= lx
    xx= exp(xx)
    xx= putProperty( xx, QDataSet.UNITS, Units.lookupUnits('eV') )
    yy= fit.a + lx * fit.b
    yy= exp(yy) 
    yy= putProperty( yy, QDataSet.UNITS, Units.lookupUnits('s!E-1!Ncm!E-2!Nster!E-1!NkeV!E-1!N') )
    plot( 2, xx, yy, color=Color.RED )
    
def mouse( evt ):
   ds= dom.plotElements[0].controller.dataSet
   ds= trim( ds, evt.getXRange() )
   print ds
   col= collapse0( ds )
   plot( 1, col, title='FESA!c'+str(evt.getXRange()) )
   plot( 2, None )
   invokeLater( doFit, col )
   
addMouseModule( dom.plots[0], "doFit", mouse )