


import org
import org.das2.graph.SpectrogramRenderer

############################################################################
############################################################################
############################################################################
############################################################################

timerange = getParam('timerange','2018-10-31 11:00 to 11:30','Iteration Timerange')
#version = getParam('version','0.4.1','Version number to be appended to filenames')
writeStuff = False
manuallyRemoveFullScans = False
conflateAndDownsampleSpectra = True
#smoothPoints = 15
smoothSeconds = 10

plotFitsAndPauseALot = True
separatePeaksWithL3Values = False

#output_folder = '/home/kpaulson/Research/PSP/Anisotropy/Anisotropy_Files/L0/v%s/'%(version)
#output_folder = '/home/kpaulson/Research/PSP/Anisotropy/Anisotropy_Files/TEMP/'
#output_folder = 'D:/Research/ParkerProbe/SWEAP/SPC/Anisotropy/Anisotropy_Files/L0/v%s/'%(version)

m_p                  = 1.6726231E-24
q                    = 1.6022E-12
#trend_seconds        = getParam('Bfield_window' , 30 , 'Number of seconds over which to average magField to determine background field direction' )
#minFluxValueForFit   = getParam('Minimum_VDF' , 0.5 , 'Throw out/Don\'t fit data points where totalFlux is below this value (for normalized data, so choose [0,...,1])' )
#fitSeconds           = getParam('fit_window' , 5 , 'Number of seconds over which to do the linear fitting between (vx,vy) and vz*(bx,by)')
#modFits              = getParam('mod_number' , 50 , 'Number of fits performed before updating plot/time reporting')

cfa_sweap_file = 'http://w3sweap.cfa.harvard.edu/data/sci/sweap/spc/L2/$Y/$m/spp_swp_spc_l2_$Y$m$d_v$v.cdf'
        
    
############################################################################
############################################################################
############################################################################
############################################################################


import sys
smoothSPCByVoltage = getFile( 'https://github.com/kpaulson/autoplot/blob/master/PSPSubProcesses/smoothSPCByVoltage.jy',monitor.getSubtaskMonitor('import smoothSPCByVoltage()'))
execfile( smoothSPCByVoltage.toString() )


############################################################################
def smoothAndDownsample(ds,smoothPoints):
    ''' Takes rank1 or rank2 dataset and returns a downsampled boxcar average
    THIS ONLY WORKS FOR DATASETS WITH A CONSTANT DEPEND_1
    '''
    #if ds.property(QDataSet.
    ds = smooth(ds,smoothPoints)[::smoothPoints]
    return(ds)
############################################################################
def smoothSPCByVoltage(spc_ds,spc_ds_smooth,mv_lo_ds,mv,smoothSeconds):
    '''
    Smooth the rank2 SPC data by the mv_lo value (time-varying DEPEND_1 variable)
    rather than just smoothing across indices.
    
    input:
        spc_ds         = rank2 dataset - raw measurements
        smoothPoints   = integer number of points over which to smooth (corresponded to spectra on SPC)
    output:
        spc_ds_smooth  = rank2 dataset - smoothed
        
    TODO: adapt to time-smoothing (automatically interpolate up to highest cadence within dataset and 
              generate smoothPoints from that to align with number of seconds, then synchronize back
              onto original timestamps?
    '''
    
    
    temp_spc_ds = ones(len(spc_ds_highRes))*-1
    temp_spc_ds.putProperty(QDataSet.VALID_MIN,0)
    #print r_highestRes
    #print temp_spc_ds
    #print spc_ds,spc_ds.property(QDataSet.DEPEND_1)
    temp_spc_ds[r_highestRes[:,0]] = spc_ds_highRes[r_highestRes]
    #plot(r[:,0])
    temp_spc_ds_smooth = smooth(temp_spc_ds,smoothPoints)
    
    
    highestRes_time_to_temp_time_ratio = findex(highestRes_time,temp_time)
    temp_spc_ds_smooth = interpolate(temp_spc_ds_smooth,highestRes_time_to_temp_time_ratio)
    spc_ds_smooth[r] = temp_spc_ds_smooth[r[:,0]]
    
    return(spc_ds_smooth)
############################################################################

def smoothAndDownsampleSPCByVoltage(spc_ds,mv_lo,smoothSeconds):
    
    mv_lo_range = extent(mv_lo)
    min_mv_lo = mv_lo_range[0]
    max_mv_lo = mv_lo_range[1]
    
    valid_mv_lo = where(valid(mv_lo))
    min_mv_lo_sliceIndex = where(eq(mv_lo,min_mv_lo))
    min_mv_lo_sliceIndex = min_mv_lo_sliceIndex[imin(min_mv_lo_sliceIndex[:,1]),0]
    max_mv_lo_sliceIndex = where(eq(mv_lo,max_mv_lo))
    max_mv_lo_sliceIndex = max_mv_lo_sliceIndex[imax(max_mv_lo_sliceIndex[:,1]),0]
    
    TEMP_mv_lo = concatenate(mv_lo[min_mv_lo_sliceIndex,:],mv_lo[max_mv_lo_sliceIndex,:])
    
    s = sort(TEMP_mv_lo)
    uniq_mv_lo = uniqValues(TEMP_mv_lo,s)
    
    temp_time = spc_ds.property(QDataSet.DEPEND_0)
    temp_time.putProperty(QDataSet.NAME,None)
    minimumCadence = min(diff(temp_time)[where(ne(diff(temp_time),0))])

    highestRes_time = timegen(str(temp_time[0]),str(minimumCadence),int((temp_time[-1]-temp_time[0])/minimumCadence))
    
    smoothPoints = int(smoothSeconds/(convertUnitsTo(minimumCadence,Units.seconds).value()))
    print 'smoothPoints',smoothPoints
    print 'rawsmooth',smoothSeconds/(convertUnitsTo(minimumCadence,Units.seconds).value())
    #print 'minCadence',convertUnitsTo(minimumCadence,Units.seconds).value()
    
    if smoothPoints != 0:
        temp_time_to_highestRes_time_ratio = findex(temp_time,highestRes_time)
        spc_ds_highRes = interpolate(spc_ds,temp_time_to_highestRes_time_ratio)
        mv_lo_ds_highRes = interpolate(mv_lo,temp_time_to_highestRes_time_ratio)
        
        spc_ds_highRes.putProperty(QDataSet.DEPEND_1,mv_lo_ds_highRes)
        
    
        spc_ds_smooth = dblarr(len(spc_ds[:,0]),len(spc_ds[0,:]))
        
        for mv in uniq_mv_lo:
            r = where(eq(mv_lo,mv))
            r_highestRes = where(eq(mv_lo_ds_highRes,mv))
            
            temp_spc_ds = ones(len(spc_ds_highRes))*-1
            temp_spc_ds.putProperty(QDataSet.VALID_MIN,0)
            #print r_highestRes
            #print temp_spc_ds
            #print spc_ds,spc_ds.property(QDataSet.DEPEND_1)
            temp_spc_ds[r_highestRes[:,0]] = spc_ds_highRes[r_highestRes]
            #plot(r[:,0])
            temp_spc_ds_smooth = smooth(temp_spc_ds,smoothPoints)
            
            highestRes_time_to_temp_time_ratio = findex(highestRes_time,temp_time)
            temp_spc_ds_smooth = interpolate(temp_spc_ds_smooth,highestRes_time_to_temp_time_ratio)
            spc_ds_smooth[r] = temp_spc_ds_smooth[r[:,0]]
            
    
        spc_ds_smooth.putProperty(QDataSet.DEPEND_0,spc_ds.property(QDataSet.DEPEND_0))
        
        spc_ds_smooth.putProperty(QDataSet.DEPEND_1,mv_lo)
        
        spc_ds_smooth.putProperty(QDataSet.VALID_MIN,0)
        
        #  This will be slow, but will reduce the dataset into regularly spaced values according to smoothSeconds
        print str(datumRange(str(temp_time[0])+' to '+str(temp_time[-1])))
        downsampleTimes = generateTimeRanges('$Y-$m-$d $H:$M:$(S,span=%s)'%(smoothSeconds),str(datumRange(str(temp_time[0])+' to '+str(temp_time[-1]))))
        print dataset(downsampleTimes)
        spc_ds_smooth_downsampled = dblarr(len(downsampleTimes),128)
        TEMP_mv_lo_downsampled = dblarr(len(downsampleTimes),128)
        index = 0
        #stop
        for tr in downsampleTimes:
            tr_range = datumRange(str(tr)+' through '+str(tr+putProperty(dataset(smoothSeconds),QDataSet.UNITS,Units.seconds)))
            #spc_ds_smooth_downsampled = concatenate(spc_ds_smooth_downsampled,reduceMean(trim(spc_ds_smooth,tr_range),0))
            print putProperty(reduceMean(trim(spc_ds_smooth,tr_range),0),QDataSet.DEPEND_0,None)
            print spc_ds_smooth_downsampled
            spc_ds_smooth_downsampled[index,:] = putProperty(reduceMean(trim(spc_ds_smooth,tr_range),0),QDataSet.DEPEND_0,None)
            #TEMP_mv_lo_downsampled = concatenate(TEMP_mv_lo_downsampled,reduceMean(trim(mv_lo,tr_range),0))
            TEMP_mv_lo_downsampled[index,:] = reduceMean(trim(mv_lo,tr_range),0)
            print trim(spc_ds_smooth,tr_range)
            print reduceMean(trim(spc_ds_smooth,tr_range),0)
            index += 1
            #stop
        
        spc_ds_smooth_downsampled.putProperty(QDataSet.DEPEND_1,TEMP_mv_lo_downsampled)
        spc_ds_smooth_downsampled.putProperty(QDataSet.DEPEND_0,dataset(downsampleTimes))
        TEMP_mv_lo_downsampled.putProperty(QDataSet.DEPEND_0,dataset(downsampleTimes))
        
        # Below is much more efficient but did not downsample at same rate as smoothSeconds due to int() call
        #spc_ds_smooth_downsampled = spc_ds_smooth[::smoothPoints,:]
    else:
        spc_ds_smooth_downsampled = spc_ds

    return(spc_ds_smooth_downsampled)

############################################################################


import java
time_begin = TimeUtil.now()    

monitor.started()
trs= generateTimeRanges('$Y-$m-$d',timerange)
for tr in trs:
    if lt( datumRange(timerange).width() , datumRange(tr).width() ):
        tr = timerange
    time_begin_tr = TimeUtil.now()   
    
    if True:    
    #try:
        monitor.setProgressMessage(tr)
        
        try:
#            spc_a = getDataSet(cfa_sweap_file+'?a_current',tr)
#            spc_b = getDataSet(cfa_sweap_file+'?b_current',tr)
#            spc_c = getDataSet(cfa_sweap_file+'?c_current',tr)
#            spc_d = getDataSet(cfa_sweap_file+'?d_current',tr)
#            
#            mv_lo = getDataSet(cfa_sweap_file+'?mv_lo',tr)
#            mv_hi = getDataSet(cfa_sweap_file+'?mv_hi',tr)
            
            spc_a = getDataSet(cfa_sweap_file+'?a_current&where=MODE_FLAG.eq(0)',tr)
            spc_b = getDataSet(cfa_sweap_file+'?b_current&where=MODE_FLAG.eq(0)',tr)
            spc_c = getDataSet(cfa_sweap_file+'?c_current&where=MODE_FLAG.eq(0)',tr)
            spc_d = getDataSet(cfa_sweap_file+'?d_current&where=MODE_FLAG.eq(0)',tr)

            mv_lo = getDataSet(cfa_sweap_file+'?mv_lo&where=MODE_FLAG.eq(0)',tr)
            mv_hi = getDataSet(cfa_sweap_file+'?mv_hi&where=MODE_FLAG.eq(0)',tr)
        except:
            print 'no w3sweap access'
            try:
                local_sweap_file = 'C:/Users/kpaulson/Google Drive/Research/Data/AutoplotCache/http/w3sweap.cfa.harvard.edu/data/sci/spc/L2/$Y/$m/spp_swp_spc_l2_$Y$m$d_v$v.cdf'
                spc_a = getDataSet(cfa_sweap_file+'?a_current&where=MODE_FLAG.eq(0)',tr)
                spc_b = getDataSet(cfa_sweap_file+'?b_current&where=MODE_FLAG.eq(0)',tr)
                spc_c = getDataSet(cfa_sweap_file+'?c_current&where=MODE_FLAG.eq(0)',tr)
                spc_d = getDataSet(cfa_sweap_file+'?d_current&where=MODE_FLAG.eq(0)',tr)
                
                mv_lo = getDataSet(cfa_sweap_file+'?mv_lo&where=MODE_FLAG.eq(0)',tr)
                mv_hi = getDataSet(cfa_sweap_file+'?mv_hi&where=MODE_FLAG.eq(0)',tr)
            except:
                print 'no local files either'
                noSPCData = None
                raise java.io.FileNotFoundException
            
        print 'Downloading SPC L2 data took:',TimeUtil.now()-time_begin_tr
        time_last = TimeUtil.now()
        #spc_list = [spc_a,spc_b,spc_c,spc_d]
        
        MODE_FLAG = getDataSet(cfa_sweap_file+'?MODE_FLAG',tr)
        
        spc_a = trim(spc_a,tr)
        spc_b = trim(spc_b,tr)
        spc_c = trim(spc_c,tr)
        spc_d = trim(spc_d,tr)
        
        mv_lo = trim(mv_lo,tr)
        mv_hi = trim(mv_hi,tr)
        
        
        plot(0,spc_a,yrange=[0,4E3],ytitle='raw')
        #plot(1,smooth(spc_a,smoothPoints),yrange=[0,4E3],ytitle='smoothed by index')
        if conflateAndDownsampleSpectra == True:
##            TEMP_mv_lo = None
##            for i in xrange(len(mv_lo)):
##                TEMP_mv_lo = concatenate(TEMP_mv_lo,mv_lo[i,:])
##            min_mv_lo = min(TEMP_mv_lo)
##            max_mv_lo = max(TEMP_mv_lo)
#
#            mv_lo_range = extent(mv_lo)
#            min_mv_lo = mv_lo_range[0]
#            max_mv_lo = mv_lo_range[1]
#
#            valid_mv_lo = where(valid(mv_lo))
#            min_mv_lo_sliceIndex = where(eq(mv_lo,min_mv_lo))
#            min_mv_lo_sliceIndex = min_mv_lo_sliceIndex[imin(min_mv_lo_sliceIndex[:,1]),0]
#            max_mv_lo_sliceIndex = where(eq(mv_lo,max_mv_lo))
#            max_mv_lo_sliceIndex = max_mv_lo_sliceIndex[imax(max_mv_lo_sliceIndex[:,1]),0]
#
#            TEMP_mv_lo = concatenate(mv_lo[min_mv_lo_sliceIndex,:],mv_lo[max_mv_lo_sliceIndex,:])
#
#            s = sort(TEMP_mv_lo)
#            uniq_mv_lo = uniqValues(TEMP_mv_lo,s)
#
#            spc_a_smooth = dblarr(len(spc_a[:,0]),len(spc_a[0,:]))
#            spc_b_smooth = dblarr(len(spc_b[:,0]),len(spc_b[0,:]))
#            spc_c_smooth = dblarr(len(spc_c[:,0]),len(spc_c[0,:]))
#            spc_d_smooth = dblarr(len(spc_d[:,0]),len(spc_d[0,:]))
#
#            for mv in uniq_mv_lo:
#                r = where(eq(mv_lo,mv))
#
#                #spc_a_smooth = smoothSPCByVoltage(spc_a,spc_a_smooth,smoothPoints)
#                #spc_b_smooth = smoothSPCByVoltage(spc_b,spc_b_smooth,smoothPoints)
#                #spc_c_smooth = smoothSPCByVoltage(spc_c,spc_c_smooth,smoothPoints)
#                #spc_d_smooth = smoothSPCByVoltage(spc_d,spc_d_smooth,smoothPoints)
#                spc_a_smooth = smoothSPCByVoltage(spc_a,spc_a_smooth,mv_lo,mv,smoothSeconds)
#                spc_b_smooth = smoothSPCByVoltage(spc_b,spc_b_smooth,mv_lo,mv,smoothSeconds)
#                spc_c_smooth = smoothSPCByVoltage(spc_c,spc_c_smooth,mv_lo,mv,smoothSeconds)
#                spc_d_smooth = smoothSPCByVoltage(spc_d,spc_d_smooth,mv_lo,mv,smoothSeconds)
#
#
#            spc_a_smooth.putProperty(QDataSet.DEPEND_0,spc_a.property(QDataSet.DEPEND_0))
#            spc_b_smooth.putProperty(QDataSet.DEPEND_0,spc_b.property(QDataSet.DEPEND_0))
#            spc_c_smooth.putProperty(QDataSet.DEPEND_0,spc_c.property(QDataSet.DEPEND_0))
#            spc_d_smooth.putProperty(QDataSet.DEPEND_0,spc_d.property(QDataSet.DEPEND_0))
#
#            spc_a_smooth.putProperty(QDataSet.DEPEND_1,mv_lo)
#            spc_b_smooth.putProperty(QDataSet.DEPEND_1,mv_lo)
#            spc_c_smooth.putProperty(QDataSet.DEPEND_1,mv_lo)
#            spc_d_smooth.putProperty(QDataSet.DEPEND_1,mv_lo)
#
#            spc_a_smooth.putProperty(QDataSet.VALID_MIN,0)
#            spc_b_smooth.putProperty(QDataSet.VALID_MIN,0)
#            spc_c_smooth.putProperty(QDataSet.VALID_MIN,0)
#            spc_d_smooth.putProperty(QDataSet.VALID_MIN,0)
#
#            spc_a = spc_a_smooth[::smoothPoints,:]
#            spc_b = spc_b_smooth[::smoothPoints,:]
#            spc_c = spc_c_smooth[::smoothPoints,:]
#            spc_d = spc_d_smooth[::smoothPoints,:]
#            mv_lo = mv_lo[::smoothPoints,:]
#            mv_hi = mv_hi[::smoothPoints,:]
            
            spc_a = smoothAndDownsampleSPCByVoltage(spc_a,mv_lo,smoothSeconds)
            spc_b = smoothAndDownsampleSPCByVoltage(spc_b,mv_lo,smoothSeconds)
            spc_c = smoothAndDownsampleSPCByVoltage(spc_c,mv_lo,smoothSeconds)
            spc_d = smoothAndDownsampleSPCByVoltage(spc_d,mv_lo,smoothSeconds)
            
            mv_lo = spc_a.property(QDataSet.DEPEND_1)
            mv_hi = synchronize(spc_a,mv_hi)
            
        
        plot(1,spc_a,yrange=[0,4E3],ytitle='smoothed by voltage')
        
        #stop
        
        
        spc_list = [spc_a,spc_b,spc_c,spc_d]
        del(spc_a,spc_b,spc_c,spc_d)
        
        totalFlux = sum(spc_list)
        #totalFlux = totalFlux/((mv_lo + (mv_hi-mv_lo)/2) * (mv_hi-mv_lo))
        
        fluxDifference_scx = (spc_list[0]+spc_list[3]) - (spc_list[1]+spc_list[2])
        fluxDifference_scy = (spc_list[0]+spc_list[1]) - (spc_list[2]+spc_list[3])
        
        U = (fluxDifference_scy/totalFlux)/0.035
        V = (fluxDifference_scx/totalFlux)/0.035
        
        U.putProperty(QDataSet.VALID_MIN,None)
        V.putProperty(QDataSet.VALID_MIN,None)
        U.putProperty(QDataSet.VALID_MAX,None)
        V.putProperty(QDataSet.VALID_MAX,None)
        
        
#        for j in xrange(len(U[0,:])):
#            try:
#                U[:,j] = medianFilter(U[:,j],3)
#            except:
#                continue
#            try:
#                V[:,j] = medianFilter(V[:,j],3)
#            except:
#                continue
        
        U.putProperty(QDataSet.UNITS,Units.degrees)
        V.putProperty(QDataSet.UNITS,Units.degrees)
        
        #plot(0,totalFlux)
        #plot(1,U)
        #plot(2,V)
        
        
        #Are you measuring the slope near the peak in current or near the peak in the velocity distribution function? 
        #(the VDF goes like current divided by speed time window width in speed units)
        
        print 'Calculating Flow Angles took:',TimeUtil.now()-time_last
        time_last = TimeUtil.now()
        
        v_z = sqrt( (2./m_p) * q*(mv_lo + (mv_hi-mv_lo)/2.) ) / 1.E5   # in km/s
        windowWidths = sqrt( (2./m_p) * q*(mv_hi-mv_lo)/2.) / 1.E5
        vdf = totalFlux/(v_z*windowWidths)*1.66667E3 #This factor seems arbitrary, but is necessary to line up with Mike's L3 values.
        vdf.putProperty(QDataSet.DEPEND_1,v_z)
        #plot(0,mv_lo)
        #plot(1,mv_hi)
        #del(windowWidths,mv_hi)
        
        if manuallyRemoveFullScans == True:
            for i in xrange(len(v_z)):
                try:
                    if gt(v_z[i,max(where(valid(v_z[i,:])))] - v_z[i,min(where(valid(v_z[i,:])))],500):
                        vdf[i,:] = -1E38
                except:
                    continue
                    
        #totalFlux = totalFlux / (mv_lo + (mv_hi-mv_lo)/2) * (mv_hi-mv_lo)
        #totalFlux = totalFlux/( (mv_hi-mv_lo))
        totalFlux.putProperty(QDataSet.DEPEND_1,mv_lo)
        peaks = reduceMax(vdf,1)
        r = where(eq(vdf,peaks))
        
        vdf.putProperty(QDataSet.NAME,'vdf')
        vdf.putProperty(QDataSet.SCALE_TYPE,'log')
        print 'Defining VDF took:',TimeUtil.now()-time_last
        time_last = TimeUtil.now()
        
        #setLayoutOverplot(2)
        #waitUntilIdle()
        plot(0,U,yrange=[0,4E3],zrange=[-45,45])
        plot(1,V,yrange=[0,4E3],zrange=[-45,45])
        plot(2,vdf,zlog=True,ytitle='v!Bz!N (km/s)',zrange=[0.05,20],ztitle='VDF')
        
        dom.plotElements[0].controller.renderer.setRebinner(org.das2.graph.SpectrogramRenderer.RebinnerEnum.lanlNearestNeighbor)
        #plot(1,v_z[r],renderType='scatter')
        #plot(2,U,zrange=[-45,45])
        #plot(3,V,zrange=[-45,45])
        #waitUntilIdle()
        if writeStuff == True:
            writeToPng('C:/Users/kpaulson/Google Drive/Research/PSP/SPC/VDF/Plots/SPC_VDF_%s.png'%tr)
            formatDataSet(vdf,'C:/Users/kpaulson/Google Drive/Research/PSP/SPC/VDF/Files/SPC_VDF_%s.cdf'%tr)
    #except:
    #    continue
