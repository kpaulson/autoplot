import org
import org.das2.graph.SpectrogramRenderer

############################################################################
############################################################################
############################################################################
############################################################################

timerange             = getParam('timerange','2018-11-01','Iteration Timerange')
checkForPreviousFiles = getParam('checkPrevious','T','If previous copies of VDF file exist, then skip to next day',['T','F'])
onlyUsePrivateSPC     = getParam('non-publicSPCFiles','T','Skip looking at the public SPC directory and use private files (requires password)?',['T','F'])
writeStuff            = getParam('writeStuff','T','Write out cdf and png of SPC vdf data to local directory?',['T','F'])

manuallyRemoveFullScans = False
calculateVDFUncertainty = False


if onlyUsePrivateSPC == 'T':
    onlyUsePrivateSPC = True
elif onlyUsePrivateSPC == 'F':
    onlyUsePrivateSPC = False

if checkForPreviousFiles == 'T':
    checkForPreviousFiles = True
elif checkForPreviousFiles == 'F':
    checkForPreviousFiles = False
    
if writeStuff == 'T':
    writeStuff = True
    outputDirectory = getParam('ouputDirectory','/Users/kpaulson/GoogleDrive/Research/PSP/SPC/VDF/','Local directory in which to write vdf cdf')
elif writeStuff == 'F':
    writeStuff = False
    outputDirectory = '/tmp/'


m_p                  = 1.6726231E-24
q                    = 1.6022E-12

cfa_sweap_file_private = 'http://w3sweap.cfa.harvard.edu/data/sci/sweap/spc/L2/$Y/$m/spp_swp_spc_l2_$Y$m$d_v$v.cdf'
cfa_sweap_file_public = 'http://sweap.cfa.harvard.edu/pub/data/sci/sweap/spc/L2/$Y/$m/spp_swp_spc_l2_$Y$m$d_v$v.cdf'
        
    
############################################################################
############################################################################
############################################################################
############################################################################

import java
time_begin = TimeUtil.now()    


monitor.started()
trs= generateTimeRanges('$Y-$m-$d',timerange)
for tr in trs:
    time_begin_tr = TimeUtil.now()    
    
    if lt(datumRange(timerange).width(), datumRange(tr).width()):
        tr = timerange
        
    outputFile = outputDirectory+'Files/SPC_VDF_%s.cdf'%tr
    
    fileAlreadyExists = False
    if checkForPreviousFiles == True:
        try:
            TEMP_epoch = getDataSet(outputFile+'?Epoch')
            if ne( long(mode(copy(TEMP_epoch))), 0):
                fileAlreadyExists = True
        except:
            pass
    
    #if True:    
    try:
        monitor.setProgressMessage(tr)
        
        if fileAlreadyExists == True:
            print 'File already exists for %s'%(tr)
            raise fileAlreadyExistsException
            
        try:
            if onlyUsePrivateSPC == True:
                raise moveItAlongException
                
            cfa_sweap_file = cfa_sweap_file_public
            
            spc_a = getDataSet(cfa_sweap_file+'?a_current',tr)
            spc_b = getDataSet(cfa_sweap_file+'?b_current',tr)
            spc_c = getDataSet(cfa_sweap_file+'?c_current',tr)
            spc_d = getDataSet(cfa_sweap_file+'?d_current',tr)

            mv_lo = getDataSet(cfa_sweap_file+'?mv_lo',tr)
            mv_hi = getDataSet(cfa_sweap_file+'?mv_hi',tr)
            
            spc_a_DELTA_VAR = getDataSet(cfa_sweap_file+'?a_current_DELTA_VAR',tr)
            spc_b_DELTA_VAR = getDataSet(cfa_sweap_file+'?b_current_DELTA_VAR',tr)
            spc_c_DELTA_VAR = getDataSet(cfa_sweap_file+'?c_current_DELTA_VAR',tr)
            spc_d_DELTA_VAR = getDataSet(cfa_sweap_file+'?d_current_DELTA_VAR',tr)

            mv_lo_DELTA_VAR = getDataSet(cfa_sweap_file+'?mv_lo_DELTA_VAR',tr)
            mv_hi_DELTA_VAR = getDataSet(cfa_sweap_file+'?mv_hi_DELTA_VAR',tr)
            
        except:
            try:
                cfa_sweap_file = cfa_sweap_file_private
                
                spc_a = getDataSet(cfa_sweap_file+'?a_current',tr)
                spc_b = getDataSet(cfa_sweap_file+'?b_current',tr)
                spc_c = getDataSet(cfa_sweap_file+'?c_current',tr)
                spc_d = getDataSet(cfa_sweap_file+'?d_current',tr)
    
                mv_lo = getDataSet(cfa_sweap_file+'?mv_lo',tr)
                mv_hi = getDataSet(cfa_sweap_file+'?mv_hi',tr)
                
                spc_a_DELTA_VAR = getDataSet(cfa_sweap_file+'?a_current_DELTA_VAR',tr)
                spc_b_DELTA_VAR = getDataSet(cfa_sweap_file+'?b_current_DELTA_VAR',tr)
                spc_c_DELTA_VAR = getDataSet(cfa_sweap_file+'?c_current_DELTA_VAR',tr)
                spc_d_DELTA_VAR = getDataSet(cfa_sweap_file+'?d_current_DELTA_VAR',tr)
    
                mv_lo_DELTA_VAR = getDataSet(cfa_sweap_file+'?mv_lo_DELTA_VAR',tr)
                mv_hi_DELTA_VAR = getDataSet(cfa_sweap_file+'?mv_hi_DELTA_VAR',tr)
            except:
                noSPCData = None
                raise java.io.FileNotFoundExceptiontry
            
#        try:
#            if onlyUsePrivateSPC == True:
#                raise moveItAlongException
#
#            cfa_sweap_file = cfa_sweap_file_public
#
#            spc_a = getDataSet(cfa_sweap_file+'?a_current&where=MODE_FLAG.eq(0)',tr)
#            spc_b = getDataSet(cfa_sweap_file+'?b_current&where=MODE_FLAG.eq(0)',tr)
#            spc_c = getDataSet(cfa_sweap_file+'?c_current&where=MODE_FLAG.eq(0)',tr)
#            spc_d = getDataSet(cfa_sweap_file+'?d_current&where=MODE_FLAG.eq(0)',tr)
#
#            mv_lo = getDataSet(cfa_sweap_file+'?mv_lo&where=MODE_FLAG.eq(0)',tr)
#            mv_hi = getDataSet(cfa_sweap_file+'?mv_hi&where=MODE_FLAG.eq(0)',tr)
#
#            spc_a_DELTA_VAR = getDataSet(cfa_sweap_file+'?a_current_DELTA_VAR&where=MODE_FLAG.eq(0)',tr)
#            spc_b_DELTA_VAR = getDataSet(cfa_sweap_file+'?b_current_DELTA_VAR&where=MODE_FLAG.eq(0)',tr)
#            spc_c_DELTA_VAR = getDataSet(cfa_sweap_file+'?c_current_DELTA_VAR&where=MODE_FLAG.eq(0)',tr)
#            spc_d_DELTA_VAR = getDataSet(cfa_sweap_file+'?d_current_DELTA_VAR&where=MODE_FLAG.eq(0)',tr)
#
#            mv_lo_DELTA_VAR = getDataSet(cfa_sweap_file+'?mv_lo_DELTA_VAR&where=MODE_FLAG.eq(0)',tr)
#            mv_hi_DELTA_VAR = getDataSet(cfa_sweap_file+'?mv_hi_DELTA_VAR&where=MODE_FLAG.eq(0)',tr)
#
#        except:
#            try:
#                cfa_sweap_file = cfa_sweap_file_private
#
#                spc_a = getDataSet(cfa_sweap_file+'?a_current&where=MODE_FLAG.eq(0)',tr)
#                spc_b = getDataSet(cfa_sweap_file+'?b_current&where=MODE_FLAG.eq(0)',tr)
#                spc_c = getDataSet(cfa_sweap_file+'?c_current&where=MODE_FLAG.eq(0)',tr)
#                spc_d = getDataSet(cfa_sweap_file+'?d_current&where=MODE_FLAG.eq(0)',tr)
#
#                mv_lo = getDataSet(cfa_sweap_file+'?mv_lo&where=MODE_FLAG.eq(0)',tr)
#                mv_hi = getDataSet(cfa_sweap_file+'?mv_hi&where=MODE_FLAG.eq(0)',tr)
#
#                spc_a_DELTA_VAR = getDataSet(cfa_sweap_file+'?a_current_DELTA_VAR&where=MODE_FLAG.eq(0)',tr)
#                spc_b_DELTA_VAR = getDataSet(cfa_sweap_file+'?b_current_DELTA_VAR&where=MODE_FLAG.eq(0)',tr)
#                spc_c_DELTA_VAR = getDataSet(cfa_sweap_file+'?c_current_DELTA_VAR&where=MODE_FLAG.eq(0)',tr)
#                spc_d_DELTA_VAR = getDataSet(cfa_sweap_file+'?d_current_DELTA_VAR&where=MODE_FLAG.eq(0)',tr)
#
#                mv_lo_DELTA_VAR = getDataSet(cfa_sweap_file+'?mv_lo_DELTA_VAR&where=MODE_FLAG.eq(0)',tr)
#                mv_hi_DELTA_VAR = getDataSet(cfa_sweap_file+'?mv_hi_DELTA_VAR&where=MODE_FLAG.eq(0)',tr)
#            except:
#                noSPCData = None
#                raise java.io.FileNotFoundException
            
        print 'Downloading SPC L2 data took:',TimeUtil.now()-time_begin_tr
        time_last = TimeUtil.now()
        #spc_list = [spc_a,spc_b,spc_c,spc_d]
        
        MODE_FLAG = getDataSet(cfa_sweap_file+'?MODE_FLAG',tr)
        #where=MODE_FLAG.eq(0)
        
        spc_a = trim(spc_a,tr)
        spc_b = trim(spc_b,tr)
        spc_c = trim(spc_c,tr)
        spc_d = trim(spc_d,tr)
        
        mv_lo = trim(mv_lo,tr)
        mv_hi = trim(mv_hi,tr)
        
        spc_a_DELTA_VAR = trim(spc_a_DELTA_VAR,tr)
        spc_b_DELTA_VAR = trim(spc_b_DELTA_VAR,tr)
        spc_c_DELTA_VAR = trim(spc_c_DELTA_VAR,tr)
        spc_d_DELTA_VAR = trim(spc_d_DELTA_VAR,tr)
        
        mv_lo_DELTA_VAR = trim(mv_lo_DELTA_VAR,tr)
        mv_hi_DELTA_VAR = trim(mv_hi_DELTA_VAR,tr)
        #print spc_a
        
        
        #spc_a = putProperty(spc_a/(mv_hi-mv_lo),QDataSet.DEPEND_1,mv_lo)
        #spc_b = putProperty(spc_b/(mv_hi-mv_lo),QDataSet.DEPEND_1,mv_lo)
        #spc_c = putProperty(spc_c/(mv_hi-mv_lo),QDataSet.DEPEND_1,mv_lo)
        #spc_d = putProperty(spc_d/(mv_hi-mv_lo),QDataSet.DEPEND_1,mv_lo)
        spc_list = [spc_a,spc_b,spc_c,spc_d]
        #del(spc_a,spc_b,spc_c,spc_d)
        
        totalFlux = sum(spc_list)
        #totalFlux = totalFlux/((mv_lo + (mv_hi-mv_lo)/2) * (mv_hi-mv_lo))
        
        fluxDifference_scx =   (spc_list[0]+spc_list[3]) - (spc_list[1]+spc_list[2])
        fluxDifference_scy =   (spc_list[0]+spc_list[1]) - (spc_list[2]+spc_list[3])
        fluxDifference_pinch = (spc_list[0]+spc_list[2]) - (spc_list[1]+spc_list[3])
        
        U = (fluxDifference_scy/totalFlux)/0.035
        V = (fluxDifference_scx/totalFlux)/0.035
        pinch = (fluxDifference_pinch/totalFlux)/0.035
        
        # Temporarily set the valid range to None, since the medianFilter function can't handle fill values yet
        U.putProperty(QDataSet.VALID_MIN,None)
        V.putProperty(QDataSet.VALID_MIN,None)
        pinch.putProperty(QDataSet.VALID_MIN,None)
        U.putProperty(QDataSet.VALID_MAX,None)
        V.putProperty(QDataSet.VALID_MAX,None)
        pinch.putProperty(QDataSet.VALID_MAX,None)
        
        
        for j in xrange(len(U[0,:])):
            try:
                U[:,j] = medianFilter(U[:,j],3)
            except:
                continue
            try:
                V[:,j] = medianFilter(V[:,j],3)
            except:
                continue
        
        # Set this back to a reasonable range so that we don't have issues plotting later
        U.putProperty(QDataSet.VALID_MIN,-360)
        V.putProperty(QDataSet.VALID_MIN,-360)
        pinch.putProperty(QDataSet.VALID_MIN,-360)
        U.putProperty(QDataSet.VALID_MAX,360)
        V.putProperty(QDataSet.VALID_MAX,360)
        pinch.putProperty(QDataSet.VALID_MAX,360)
        
        U.putProperty(QDataSet.UNITS,Units.degrees)
        V.putProperty(QDataSet.UNITS,Units.degrees)
        
        #plot(0,totalFlux)
        #plot(1,U)
        #plot(2,V)
        
        print 'Calculating Flow Angles took:',TimeUtil.now()-time_last
        time_last = TimeUtil.now()
        
        v_z = sqrt( (2./m_p) * q*(mv_lo + (mv_hi-mv_lo)/2.) ) / 1.E5   # in km/s
        v_z.putProperty(QDataSet.NAME,'v_z')
        v_z.putProperty(QDataSet.LABEL,'v!Bz!N (km/s)')
        windowWidths = sqrt( (2./m_p) * q*(mv_hi-mv_lo)/2.) / 1.E5
        vdf = totalFlux/(v_z*windowWidths)*1.66667E3 #This factor seems arbitrary, but is necessary to line up with Mike's L3 values. Need to figure this out at some point. conversion to NYs?
        vdf.putProperty(QDataSet.DEPEND_1,v_z)
        
        if calculateVDFUncertainty == True:
            mv_hi_mv_lo_squareDiff = (mv_hi**2-mv_lo**2)
            d_vdf_d_spc_a = ((m_p*1E5)/q)*((mv_hi_mv_lo_squareDiff)**(-1./2.))
            d_vdf_d_spc_b = d_vdf_d_spc_a
            d_vdf_d_spc_c = d_vdf_d_spc_a
            d_vdf_d_spc_d = d_vdf_d_spc_a
            
            d_vdf_d_mv_hi = totalFlux*((m_p*1E5)/q)*(-mv_hi/((mv_hi_mv_lo_squareDiff)**(3/2)))
            d_vdf_d_mv_lo = totalFlux*((m_p*1E5)/q)*( mv_lo/((mv_hi_mv_lo_squareDiff)**(3/2)))
            
            vdf_DELTA_VAR = sqrt( (d_vdf_d_spc_a**2)*(spc_a_DELTA_VAR**2) \
                                + (d_vdf_d_spc_b**2)*(spc_b_DELTA_VAR**2) \
                                + (d_vdf_d_spc_c**2)*(spc_c_DELTA_VAR**2) \
                                + (d_vdf_d_spc_d**2)*(spc_d_DELTA_VAR**2) \
                                + (d_vdf_d_mv_hi**2)*(mv_hi_DELTA_VAR**2) \
                                + (d_vdf_d_mv_lo**2)*(mv_lo_DELTA_VAR**2) )*1.66667E3
            
            vdf.putProperty(QDataSet.DELTA_PLUS, vdf_DELTA_VAR)
            vdf.putProperty(QDataSet.DELTA_MINUS,vdf_DELTA_VAR)
            
            vdf_DELTA_VAR.putProperty(QDataSet.NAME,'vdf_DELTA_VAR')
            vdf_DELTA_VAR.putProperty(QDataSet.SCALE_TYPE,'log')
            vdf_DELTA_VAR.putProperty(QDataSet.DEPEND_0,vdf.property(QDataSet.DEPEND_0))
            vdf_DELTA_VAR.putProperty(QDataSet.DEPEND_1,v_z)
        
        del(windowWidths,mv_hi)
        
        # Temporary kludge to skip mislabeled full scans
        if manuallyRemoveFullScans == True:
            for i in xrange(len(v_z)):
                try:
                    if gt(v_z[i,max(where(valid(v_z[i,:])))] - v_z[i,min(where(valid(v_z[i,:])))],500):
                        vdf[i,:] = -1E38
                except:
                    continue
                    
        #totalFlux = totalFlux / (mv_lo + (mv_hi-mv_lo)/2) * (mv_hi-mv_lo)
        #totalFlux = totalFlux/( (mv_hi-mv_lo))
        totalFlux.putProperty(QDataSet.DEPEND_1,mv_lo)
        peaks = reduceMax(vdf,1)
        r = where(eq(vdf,peaks))
        
        vdf.putProperty(QDataSet.NAME,'vdf')
        vdf.putProperty(QDataSet.SCALE_TYPE,'log')
        vdf.putProperty(QDataSet.VALID_MIN,0)
        vdf.putProperty(QDataSet.VALID_MAX,1E10)
        
        U.putProperty(QDataSet.DEPEND_1,v_z)
        V.putProperty(QDataSet.DEPEND_1,v_z)
        pinch.putProperty(QDataSet.DEPEND_1,v_z)
        
        print 'Defining VDF took:',TimeUtil.now()-time_last
        time_last = TimeUtil.now()
        
        #setLayoutOverplot(2)
        try:
            load('https://github.com/kpaulson/autoplot/blob/master/PSP/VAPs/SPC_VDF_stack.vap')
        except:
            try:
                load('/Users/kpaulson/GoogleDrive/Research/PSP/SPC/VDF/SPC_VDF_stack.vap')
            except:
                continue
        waitUntilIdle()
        
        plot(0,vdf,zlog=True,xrange=tr, zrange=[0.05,20], ytitle='Vz (km/s)', ztitle='VDF!C(cm!U-3!N km!U-1!N s)', title='PSP SPC VDF %s'%(timerange))
        
        
        #dom.plotElements[0].controller.renderer.setRebinner(org.das2.graph.SpectrogramRenderer.RebinnerEnum.lanlNearestNeighbor)
        plot(1,v_z[r],renderType='scatter')
        #plot(2,vdf_DELTA_VAR)
        
#        testIndex = 400
#        testSlice = vdf[testIndex,:]
#        testSlice.putProperty(QDataSet.DELTA_PLUS,vdf_DELTA_VAR[testIndex,:])
#        testSlice.putProperty(QDataSet.DELTA_MINUS,vdf_DELTA_VAR[testIndex,:])
        #plot(3,testSlice,xrange=[0,800])
        plot(2,U,zrange=[-18,18], ytitle='Vz (km/s)', ztitle='sc_x deflect!C(degrees)')
        plot(3,V,zrange=[-18,18], ytitle='Vz (km/s)', ztitle='sc_y deflect!C(degrees)')
        plot(4,pinch,zrange=[-9,9], ytitle='Vz (km/s)', ztitle='pinch')
        
        
        U.putProperty(QDataSet.UNITS,spc_a.property(QDataSet.UNITS))
        V.putProperty(QDataSet.UNITS,spc_a.property(QDataSet.UNITS))
        
        diag1 = V + 2*(spc_c-spc_d)/totalFlux/0.035
        diag2 = U - 2*(spc_a-spc_d)/totalFlux/0.035
        
        diag1.putProperty(QDataSet.DEPEND_1,v_z)
        diag2.putProperty(QDataSet.DEPEND_1,v_z)
        
#        plot(4,pinch/diag1,zrange=[-1,1])
#        plot(5,pinch/diag2,zrange=[-1,1])
#        stop
#        plot(4,spc_a.property(QDataSet.DEPEND_0),v_z,pinch/diag)

        waitUntilIdle()
        if writeStuff == True:
            writeToPng(outputDirectory+'Plots/SPC_VDF_%s.png'%tr)
            
            vdf.putProperty(  QDataSet.NAME,'vdf')
            U.putProperty(    QDataSet.NAME,'sc_x_deflection')
            V.putProperty(    QDataSet.NAME,'sc_y_deflection')
            pinch.putProperty(QDataSet.NAME,'spot_ellipticity')
            MODE_FLAG.putProperty(QDataSet.NAME,'modeFlag')
            
            vdf.putProperty(  QDataSet.LABEL,'vdf')
            U.putProperty(    QDataSet.LABEL,'sc_x deflection!C(degrees)')
            V.putProperty(    QDataSet.LABEL,'sc_y deflection!C(degrees)')
            pinch.putProperty(QDataSet.LABEL,'ellipticity ([A+C]-[B+D])')
            MODE_FLAG.putProperty(QDataSet.LABEL,'mode flag')
            
            vdf_bindle = bundle(vdf, U, V, pinch)
            #print 'here'
            #vdf_bindle = bundle(vdf_bindle, MODE_FLAG)
            vdf_bindle.putProperty( QDataSet.DEPEND_0,vdf.property(QDataSet.DEPEND_0) )
            vdf_bindle.putProperty( QDataSet.DEPEND_1,vdf.property(QDataSet.DEPEND_1) )
            formatDataSet(vdf_bindle,outputFile+'?bundle=T')
            
            formatDataSet(MODE_FLAG,outputFile+'?append=T')
            
            print 'Writing VDF cdf took:',TimeUtil.now()-time_last
            time_last = TimeUtil.now()
    except:
        if fileAlreadyExists == False:
            print 'vdf processing failed for %s'%tr
        continue
