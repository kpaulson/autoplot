#############################
#    SCRIPT FOR READYING    #
#       WIND DATA FOR       #
#     DEHOFFMAN-TELLER      #
#############################

# Original timestamps
#timerange = '1998-02-02 00:00 to 1998-02-07 09:00'
#dd = '1998-02-02'

# Variable timestamp input
timerange = getParam('timerange','2016-10-15','Timerange of WIND Data')
dd = timerange[0:10]

#B_input = getDataSet('file:///C:/Users/Kristoff/Desktop/Farrugia_WIND-Hoffman-Teller/B_gse_for_HT.dat?rank2=field2-field5&renderTye=series&time=field0&timeFormat=$d-$m-$Y+$H:$M:$S.$(milli)')
#V_input = getDataSet('file:///C:/Users/Kristoff/Desktop/Farrugia_WIND-Hoffman-Teller/V_gse_for_HT.dat?rank2=field2-field4&renderTye=series&time=field0&timeFormat=$d-$m-$Y+$H:$M:$S.$(milli)')

#Full cadence magnetic field:
#B_input = getDataSet('vap+cdaweb:ds=WI_H2_MFI&id=BGSE&timerange=%s'%timerange)
#B_mag = getDataSet('vap+cdaweb:ds=WI_H2_MFI&id=BF1&timerange=%s'%timerange)

#Three-second magnetic field
B_input = getDataSet('vap+cdaweb:ds=WI_H0_MFI&id=B3GSE&timerange=%s'%timerange)
B_mag = getDataSet('vap+cdaweb:ds=WI_H0_MFI&id=B3F1&timerange=%s'%timerange)
time = B_mag.property(QDataSet.DEPEND_0)
timeSort = sort(time)
time = time[timeSort]
uniqTime = uniq(time)
time = time[uniqTime]
B_input = bundle(B_mag[timeSort][uniqTime],B_input[:,0][timeSort][uniqTime],B_input[:,1][timeSort][uniqTime],B_input[:,2][timeSort][uniqTime])
B_input.putProperty(QDataSet.DEPEND_0,time)

V_input = getDataSet('vap+cdaweb:ds=WI_K0_SWE&id=V_GSE&timerange=%s'%timerange)
swe_time = V_input.property(QDataSet.DEPEND_0)

#r = where(uniq(swe_time))
#swe_time = swe_time[r]
#s = sort(swe_time)
#swe_time = swe_time[s]
Vx = unbundle(V_input,0)#[r][s]
Vy = unbundle(V_input,1)#[r][s]
Vz = unbundle(V_input,2)#[r][s]

def fillInGaps(element):
    #element.putProperty(QDataSet.VALID_MIN,-1E6)
    #element.putProperty(QDataSet.VALID_MAX, 1E6)
    element_time = element[where( valid(element).eq(1) )].property(QDataSet.DEPEND_0)
    TEMP_ratio = findex(element_time,swe_time)
    TEMP_element = interpolate(element[where( valid(element).eq(1) )],TEMP_ratio)
    return(TEMP_element)
#Vz = fillInGaps(Vz)

pos_input = getDataSet('vap+cdaweb:ds=WI_K0_SWE&id=SC_pos_gse&timerange=%s'%timerange)
pos_x = unbundle(pos_input,0)#[r][s]
pos_y = unbundle(pos_input,1)#[r][s]
pos_z = unbundle(pos_input,2)#[r][s]

density_input = getDataSet('vap+cdaweb:ds=WI_K0_SWE&id=Np&timerange=%s'%timerange)

temp_input = getDataSet('vap+cdaweb:ds=WI_PM_3DP&id=P_TEMP&timerange=%s'%timerange)

timeSort = sort(swe_time)
uniqTimes = uniq(swe_time[timeSort])
Vx = Vx[timeSort][uniqTimes]
Vy = Vy[timeSort][uniqTimes]
Vz = Vz[timeSort][uniqTimes]
pos_x = pos_x[timeSort][uniqTimes]
pos_y = pos_y[timeSort][uniqTimes]
pos_z = pos_z[timeSort][uniqTimes]
density_input = density_input[timeSort][uniqTimes]
swe_time = swe_time[timeSort][uniqTimes]

swe_time.putProperty(QDataSet.MONOTONIC, True)
Vx.putProperty(QDataSet.DEPEND_0, swe_time)
Vy.putProperty(QDataSet.DEPEND_0, swe_time)
Vz.putProperty(QDataSet.DEPEND_0, swe_time)
pos_x.putProperty(QDataSet.DEPEND_0, swe_time)
pos_y.putProperty(QDataSet.DEPEND_0, swe_time)
pos_z.putProperty(QDataSet.DEPEND_0, swe_time)
density_input.putProperty(QDataSet.DEPEND_0, swe_time)

def assertMonotonic(ds):
    tt= xtags( ds )
    dt= diff(tt)
    r= where( dt.le(0) )
    print r
    if r.length()>0:
       raise Exception('data is not monotonic when it should be: '+str(ds))
   

def filterAndUpscale(element,faster_ds):
    ''' Runs a median filter throwing out single points more than 3 standard deviations from 
    the mean of the 2 surrounding data points. Then, interpolates up to faster_ds time cadence'''
#for element in [Vx,Vy,Vz,pos_x,pos_y,pos_z,density_input,temp_input] :
    
    element_filter = medianFilter(element[where(valid(element).eq(1))],3)
    r = where( abs(element[where(valid(element).eq(1))]-element_filter).ge(3*stddev(element[where(valid(element).eq(1))])) )
    mask = ones(len(element[where(valid(element).eq(1))]))
    mask[r] = -1E31
    element[where(valid(copy(element)).eq(1))] = copy(element[where(valid(copy(element)).eq(1))])*mask
    
    element.putProperty(QDataSet.VALID_MIN,-1E10) # Sets valid limits on element
    element.putProperty(QDataSet.VALID_MAX, 1E10)
    element = copy(element[where( valid(element).eq(1) )]) # Removes invalid outliers
    try:
        element_time = element[where( valid(element).eq(1) )].property(QDataSet.DEPEND_0) 
        time = faster_ds.property(QDataSet.DEPEND_0)
        TEMP_ratio = findex(element_time,time)
        TEMP_element = interpolate(element[where( valid(element).eq(1) )],TEMP_ratio)
    except:
        try:
            TEMP_element = synchronize( faster_ds , element )
        except:
            try:
                TEMP_element = synchronize( monotonicSubset(faster_ds) , monotonicSubset(element) ) # Interpolates element up to higher cadence SOMETHING IS BROKEN HERE
            except:
                TEMP_element = synchronizeNN( faster_ds , element )
    return(TEMP_element)

assertMonotonic(Vx)
assertMonotonic(B_input)

plasma_velocity_x = filterAndUpscale(Vx,B_input)
plasma_velocity_y = filterAndUpscale(Vy,B_input)
plasma_velocity_z = filterAndUpscale(Vz,B_input)

pos_x = filterAndUpscale(pos_x,B_input)
pos_y = filterAndUpscale(pos_y,B_input)
pos_z = filterAndUpscale(pos_z,B_input)

density_upsampled = filterAndUpscale(density_input,B_input)
temp_upsampled = filterAndUpscale(temp_input,B_input)


# Rename data variables, reassign fill values

B_input[:,0].putProperty(QDataSet.UNITS, Units.nT)
B_input[:,1].putProperty(QDataSet.UNITS, Units.nT)
B_input[:,2].putProperty(QDataSet.UNITS, Units.nT)
B_input[:,3].putProperty(QDataSet.UNITS, Units.nT)
plasma_velocity_x.putProperty(QDataSet.UNITS, Units.lookupUnits('km/s'))
plasma_velocity_y.putProperty(QDataSet.UNITS, Units.lookupUnits('km/s'))
plasma_velocity_z.putProperty(QDataSet.UNITS, Units.lookupUnits('km/s'))
pos_x.putProperty(QDataSet.UNITS, Units.kiloMeters)
pos_y.putProperty(QDataSet.UNITS, Units.kiloMeters)
pos_z.putProperty(QDataSet.UNITS, Units.kiloMeters)
density_upsampled.putProperty(QDataSet.UNITS, Units.lookupUnits('cm-3'))
temp_upsampled.putProperty(QDataSet.UNITS, Units.eV)

last = TimeUtil.now()

r = where( valid(B_input[:,1]).eq(0) )
temp_Bx = copy(B_input[:,1])
temp_Bx[r] = datum('-9999.999 nT')
#temp_Bx[r] = putProperty(dataset('-9999.999'), QDataSet.UNITS, Units.nT)

r = where( valid(B_input[:,2]).eq(0) )
temp_By = copy(B_input[:,2])
temp_By[r] = datum('-9999.999 nT')

r = where( valid(B_input[:,3]).eq(0) )
temp_Bz = copy(B_input[:,3])
temp_Bz[r] = datum('-9999.999 nT')

r = where( valid(B_input[:,0]).eq(0) )
temp_Btot = copy(B_input[:,0])
temp_Btot[r] = datum('-9999.999 nT')

fgm = bundle(temp_Bx,temp_By,temp_Bz,temp_Btot)

r = where( valid(plasma_velocity_x).eq(0) )
plasma_velocity_x[r] = putProperty(dataset('-9999.999'), QDataSet.UNITS, Units.lookupUnits('km/s'))
r = where( valid(plasma_velocity_y).eq(0) )
plasma_velocity_y[r] = putProperty(dataset('-9999.999'), QDataSet.UNITS, Units.lookupUnits('km/s'))
r = where( valid(plasma_velocity_z).eq(0) )
plasma_velocity_z[r] = putProperty(dataset('-9999.999'), QDataSet.UNITS, Units.lookupUnits('km/s'))

r = where( valid(pos_x).eq(0) )
pos_x[r] = datum('-9999.999 km')
r = where( valid(pos_y).eq(0) )
pos_y[r] = datum('-9999.999 km')
r = where( valid(pos_z).eq(0) )
pos_z[r] = datum('-9999.999 km')

r = where( valid(density_upsampled).eq(0) )
density_upsampled[r] = putProperty(dataset('-9999.999'), QDataSet.UNITS, Units.lookupUnits('cm-3'))

r = where( valid(temp_upsampled).eq(0) )
temp_upsampled[r] = datum('-9999.999 eV')
        
print 'To reset fill values took:',TimeUtil.now()-last
last = TimeUtil.now()

write_output = 'T'
if write_output=='T':
    
        output = None        
        output = bundle(output,pos_x,pos_y,pos_z)
        output = bundle(output,fgm[:,3])
        output = bundle(output,fgm[:,0],fgm[:,1],fgm[:,2])
        output = bundle(output,density_upsampled,temp_upsampled)
        output = bundle(output,plasma_velocity_x,plasma_velocity_y,plasma_velocity_z)
        
        output.putProperty(QDataSet.DEPEND_0,time)
        print 'To bundle everything took:',TimeUtil.now()-last
        last = TimeUtil.now()
        #stop
        
        # ###
        # ### WRITE DAILY FILE
        # ###
        
        sc = 'WIND'
        #mms_data_directory = 'D:/Research/Solar Wind Projects/2012 Hu Reconstruction Codes/gs_code_v1_windows/WINDDATA/merged_mag_plasma/'
        mms_data_directory = 'G:/My Drive/Research/GradShafranovReconstruction/gs_code_kp/WINDDATA/merged_mag_plasma/'
        mms_data_file = '%s_%s_merged.txt'%(sc,dd)
        
        formatDataSet(output,mms_data_directory+mms_data_file+'?format=9.4f&tformat=milliseconds')
        print 'Written to:',mms_data_directory+mms_data_file
