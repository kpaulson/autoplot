
orbit1 = ['2018-08-12 08:15 to 2019-01-20 01:04']
orbit2 = ['2019-01-20 01:04 to 2019-06-18 20:15']
orbit3 = ['2019-06-18 20:15 to 2019-11-15 15:25']
orbit4 = ['2019-11-15 15:25 to 2020-04-03 09:00']
orbit5 = ['2020-04-03 09:00 to 2020-08-02 05:03']
orbit3_inbound = ['2019-08-20 to 2019-09-01']
orbit3_outbound = ['2019-09-01 to 2019-09-21']

# Mike's stream selections
FRS1 = ['2018-11-02 00:20 to 2018-11-05 16:30', '2018-11-13 10:20 to 2018-11-13 20:10', '2018-12-16 14:10 to 2018-12-16 16:30']
PH1  = ['2018-11-05 05:00 to 2018-11-07 07:20', '2018-10-31 19:50 to 2018-11-02 12:50', '2018-11-12 07:20 to 2018-11-13 20:10', '2018-12-16 14:10 to 2018-12-16 16:30']
FRS2 = ['2018-11-08 02:00 to 2018-11-10 12:50', '2018-10-03 22:30 to 2018-10-04 02:30']
FRS3 = ['2019-03-31 15:00 to 2019-04-03 06:10', '2019-04-12 02:10 to 2019-04-13 06:10']
PH2  = ['2019-04-03 08:20 to 2019-04-04 15:10', '2019-03-30 22:20 to 2019-04-02 00:20', '2019-04-11 13:20 to 2019-04-12 19:30', '2019-03-16 19:10 to 2019-03-19 04:00']

trs = ['2019-03 to 2019-06']
trs = ['2018 through 2019']
trs = ['2018']
trs = ['2019']
#tr = '2019 04'
trs = ['2018 through 2020']
#trs = ['2019-01-20 to 2019-04-01']

wavePowerHandedness = 'RH' # Choose from 'LH', 'RH', or 'both'

vp_momentMin = 0 #0, 400
vp_momentMax = 350 #350, 1E5

vp_range_title = '%s to %s km/s' %(vp_momentMin, vp_momentMax)
if vp_momentMax > 5E4:
    vp_range_title = '> %s km/s  |  ' %(vp_momentMin)
elif vp_momentMin < 10:
    vp_range_title = '< %s km/s  |  ' %(vp_momentMax)
if vp_momentMax > 5E4 and vp_momentMin < 10:
    vp_range_title = ''

xbins = 120
ybins = 30
xbinMin = -1
xbinMax = 0
ybinMin = -6
ybinMax = 4

xplotLogMin = xbinMin
xplotLogMax = xbinMax
yplotLogMin = ybinMin
yplotLogMax = ybinMax

useLocalSubprocesses = True


#addToSearchPath(sys.path,googleDrive_path+'Software/Autoplot/jar/commons-math3-3.6.1.jar',monitor)
#from org.apache.commons.math3.fitting import AbstractCurveFitter
#from org.apache.commons.math3.fitting import SimpleCurveFitter
#from org.apache.commons.math3.fitting.leastsquares import LevenbergMarquardtOptimizer as LMO
#from org.apache.commons.math3.fitting.leastsquares import GaussNewtonOptimizer
#from org.apache.commons.math3.analysis import ParametricUnivariateFunction

  
############################################################################
##################            IMPORTS            ###########################
############################################################################
############################################################################
    

import sys
### IMPORT SUBPROCESSES
localGithubDirectory = 'C:/Users/kpaulson/Software/Autoplot/GithubScripts/'
remoteGithubDirectory = 'https://github.com/kpaulson/autoplot/blob/master/'
try:
    if useLocalSubprocesses == True:
        get_OS_version = getFile( localGithubDirectory+'CoreSubprocesses/get_os_version.jy',monitor.getSubtaskMonitor('import get_os_version()'))
        execfile( get_OS_version.toString() )
        
        linearRegressionAlgorithm = getFile( localGithubDirectory+'CoreSubprocesses/linearRegressionAlgorithm.jy',monitor.getSubtaskMonitor('import linearRegressionAlgorithm()'))
        execfile( linearRegressionAlgorithm.toString() )
except:
    pass



OS = get_os_version().split()[0]
if OS == 'mac':
    googleDrive_path = '/Volumes/Macintosh HD/Volumes/GoogleDrive/My Drive/'
    googleDrive_path = '/Volumes/GoogleDrive/My Drive/'
elif OS == 'windows':
    googleDrive_path = '/Users/kpaulson/GoogleDrive/'
    
    
############################################################################
##################            DEFINITIONS        ###########################
############################################################################
############################################################################
    
#wavePowerFile = 'file:/C:/Users/kpaulson/GoogleDrive/Research/PSP/WaveAnalysis/WavePower_Copy/PSP_wavePower_$Y-$m-$d.cdf'
wavePowerFile = 'G:/My Drive/Research/PSP/WaveAnalysis/WavePower/PSP_wavePower_$Y-$m-$d.cdf'
ephemFile     = 'G:/My Drive/Research/PSP/Ephemeris/EPHEMERIS/spp_swp_spc_hourlyephem_$Y.cdf'
spcFile       = 'http://w3sweap.cfa.harvard.edu/data/sci/sweap/spc/L3/$Y/$m/spp_swp_spc_l3i_$Y$m$d_v$v.cdf'


    
############################################################################
#################            BEGIN SCRIPT        ###########################
############################################################################
############################################################################

lastTime = TimeUtil.now()

wavePower_LH = None
wavePower_RH = None
r_au = None
vp_moment = None
for tr in trs:
    wavePower_LH_TEMP = getDataSet(wavePowerFile+'?wavePower_LH',tr)
    wavePower_RH_TEMP = getDataSet(wavePowerFile+'?wavePower_RH',tr)
    
    r_au_TEMP = getDataSet(ephemFile+'?SC_R_AU',tr)
    vp_moment_TEMP = getDataSet(spcFile+'?vp_moment_RTN',tr)
    
    wavePower_LH = append(wavePower_LH, wavePower_LH_TEMP)
    wavePower_RH = append(wavePower_RH, wavePower_RH_TEMP)
    r_au = append(r_au, r_au_TEMP)
    vp_moment = append(vp_moment, vp_moment_TEMP)


if wavePowerHandedness == 'LH':
    wavePower = wavePower_LH
elif wavePowerHandedness == 'RH':
    wavePower = wavePower_RH
elif wavePowerHandedness == 'both':
    wavePower = merge(wavePower_LH,wavePower_RH)
    
wavePower = monotonicSubset(wavePower)
r_au = monotonicSubset(r_au)
vp_moment = monotonicSubset(vp_moment)

print 'Time taken to import data:',TimeUtil.now()-lastTime
lastTime = TimeUtil.now()

r_au = synchronize(wavePower,r_au)
r_au.putProperty(QDataSet.LABEL,'SC_r')



vp_to_wave_ratio = findex(vp_moment.property(QDataSet.DEPEND_0), wavePower.property(QDataSet.DEPEND_0))
vp_moment = interpolate(vp_moment, vp_to_wave_ratio)
#vp_moment = synchronize(wavePower,vp_moment)
#vp_moment.putProperty(QDataSet.VALID_MIN,0)


wavePower_log = log10(wavePower)
r_au_log = log10(r_au)
print r_au_log
#setLayoutOverplot(2)
plot(0,r_au_log,wavePower_log,renderType='scatter',legendLabel='all data',title='%s!C%s%s-polarized waves'%(tr, vp_range_title, wavePowerHandedness))
#plot(0,r_au_log,wavePower_log,vp_moment[:,0],legendLabel='all data',title='%s!C%s  |  %s-polarized waves'%(tr, vp_range_title, wavePowerHandedness))



#inputGuessParams = [float(rand(1)[0]),float(rand(1)[0])] 
inputGuessParams = [float(-2),float(-5)] 
      
print 'Time taken to plot data:',TimeUtil.now()-lastTime
lastTime = TimeUtil.now()
                        
#r = []
#r = where(valid(r_au_log).and(valid(wavePower_LH_log)))
r = where(gt(r_au_log,-10).and(gt(wavePower_log,-20)))

radialSort = sort(r_au_log[r])
r_au_log = r_au_log[r][radialSort]
#r_au_log = r_au_log[radialSort]
wavePower_log = wavePower_log[r][radialSort]
vp_moment = vp_moment[r][radialSort]
r_au = r_au[r][radialSort]
wavePower = wavePower[r][radialSort]
r = []

print r_au_log


rr = linspace(xbinMin,xbinMax,xbins)
pp = linspace(ybinMin,ybinMax,ybins)

zz_top = rebin(link(r_au_log[r],wavePower_log[r],ones(len(wavePower_log[r]))), rr, pp)
zz_top_weights = zz_top.property(QDataSet.WEIGHTS)

columnTotals = total(zz_top_weights,1)

weights = zeros(len(r_au_log))
weightsCounter = 0
for column in xrange(len(columnTotals)):
    #weights[weightsCounter:weightsCounter+columnTotals[column]] = len(r_au_log)/columnTotals[column]
    weights[weightsCounter:weightsCounter+columnTotals[column]] = columnTotals[column]
    weightsCounter = weightsCounter+columnTotals[column]

weights = ones(len(r_au_log))
r= where(gt(weights,1E-30).and(gt(wavePower_log,-7.5)).and(gt(vp_moment[:,0],vp_momentMin)).and(lt(vp_moment[:,0],vp_momentMax)))
#r= where(gt(weights,1E-30).and(gt(vp_moment[:,0],vp_momentMin)).and(lt(vp_moment[:,0],vp_momentMax)))
#zz_top = rebin(link(r_au_log[r],wavePower_log[r],ones(len(wavePower_log[r]))), rr, pp)
#zz_top_weights = zz_top.property(QDataSet.WEIGHTS)
#plot(2,zz_top_weights)
#stop
#plot(5,weights)      
#stop
   
       
###
### APACHE FITTING SYSTEM - RIDICULOUSLY SLOW SINCE I HAVE TO ADD EACH POINT INDIVIDUALLY
###

#from org.apache.commons.math.optimization.fitting import CurveFitter
#from org.apache.commons.math.optimization.fitting import ParametricRealFunction
#from org.apache.commons.math.optimization.fitting import WeightedObservedPoint
#from org.apache.commons.math.optimization.general import LevenbergMarquardtOptimizer
#from org.apache.commons.math.stat.regression      import SimpleRegression
 
#class LinFit(ParametricRealFunction):
##class LinFit(ParametricUnivariateFunction):
#    def value(self, x, params):
#        a = params[0]
#        b = params[1]
#        return (a*x + b)
#    def gradient(self, x, params):
#        a = params[0]
#        b = params[1]
#        return [x,1]

#f = LinFit()             
#ftr = CurveFitter(LevenbergMarquardtOptimizer())
#for i in xrange(len(wavePower_LH_log[r])):
#    point_weight = 1.
#    fit_point = WeightedObservedPoint(point_weight, float(r_au_log[r][i]), float(wavePower_LH_log[r][i]))
#    ftr.addObservedPoint( fit_point )
#
#print 'Time taken to add points to fitter:',TimeUtil.now()-lastTime
#lastTime = TimeUtil.now()
#
#result = ftr.fit(f,inputGuessParams)
#print 'Fit result:',result

# MY FITTING ALGORITHM
(TEMP_intercept,TEMP_slope,TEMP_chiSquared,TEMP_interceptError,TEMP_slopeError,pearson_r) = linearRegressionAlgorithm(r_au_log[r],wavePower_log[r])

# JEREMY'S FITTING SYSTEM
from org.das2.qds.util import LinFit
lf= LinFit(r_au_log[r],wavePower_log[r],weights[r])

try:
    intercept=  lf.getIntercept()
    slope=      lf.getSlope()
    chiSquare = lf.getChi2()
    sigma_x =   lf.getSiga()
    sigma_y =   lf.getSigb()
except:
    intercept=  TEMP_intercept
    slope=      TEMP_slope
    chiSquare = TEMP_chiSquared
    sigma_x =   TEMP_interceptError
    sigma_y =   TEMP_slopeError

print 'slope:',slope
print 'TEMP_slope:',TEMP_slope
print 'intercept:',intercept
print 'chiSquare:',chiSquare
print 'sigma_x:',sigma_x
print 'sigma_y:',sigma_y
slopeError = (sigma_y/sigma_x)
print 'slopeError:',slopeError
print 'TEMP_slopeError:',TEMP_slopeError

print 'Time taken to perform fit:',TimeUtil.now()-lastTime
lastTime = TimeUtil.now()

x_prime = linspace(0,1,100)
b = intercept#-6
m = slope#-4
y_prime = 10**(b)*(x_prime**m)
x_prime_linear = linspace(xbinMin,xbinMax,100)
y_prime_linear = b+(x_prime_linear*m)

#sigma_x = sqrt( total( (r_au_log[r] - mean(r_au_log[r]))**2 ) )
#sigma_y = sqrt( total( (wavePower_LH_log[r] - (r_au_log[r]*slope + intercept))**2 ) )
#slopeError = (sigma_y/sigma_x)
#print 'slopeError:',slopeError
#print 'sigma_x:',sigma_x
#print 'sigma_y:',sigma_y


rr = linspace(xbinMin,xbinMax,xbins)
pp = linspace(ybinMin,ybinMax,ybins)

zz_top = rebin(link(r_au_log[r],wavePower_log[r],ones(len(wavePower_log[r]))), rr, pp)
zz_top_weights = zz_top.property(QDataSet.WEIGHTS)


plot(1,r_au_log[r],wavePower_log[r],color='red',renderType='scatter',legendLabel='fit data')
plot(2,zz_top_weights*3.495,zlog=True,yrange=[yplotLogMin,yplotLogMax], ytitle='Wave Power!C(nT!U2!N)', ztitle='Period of Activity!C(seconds)', zrange=[0.05, 5E3 ]) #3.495 is the width of each spectral bin in seconds
plot(4,(r_au[r]),(wavePower[r]),renderType='scatter',yrange=[10**yplotLogMin,10**yplotLogMax])

plot(3,x_prime_linear,y_prime_linear,color='red',symbolSize=0,lineWidth=2,lineStyle='dashes',legendLabel='Slope: %s &plusmn; %s'%(round(slope,2),round(slopeError,2)),xrange=[xplotLogMin,xplotLogMax],yrange=[yplotLogMin,yplotLogMax], xtitle='log10(SC_r)')

#plot(2,r_AU_LH,wavePower_LH)
plot(5,x_prime,y_prime,color='red',symbolSize=0,lineWidth=2,lineStyle='dashes',xrange=[0,1.],ylog=True,yrange=[10**yplotLogMin,10**yplotLogMax],legendLabel='10!U%s!N (R/R!D0!N)!U%s &plusmn; %s'%(round(intercept,2),round(slope,2),round(slopeError,2)),title='Exponential fit to subset of wave power data', xtitle='Radial Distance (AU)')
#plot(3,x_prime,(exp(b)*(x_prime**m))-500,color='red')





